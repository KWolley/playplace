
c:/Users/karaw/Documents/aquarealtime/resdev/software/playplace/target/2.0.1/boron/playplace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001224  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5240  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e5c8  000d5244  0001e5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001c0  2003e630  2003e630  0002e630  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d52ac  000d52ac  000252ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d52d4  000d52d4  000252d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ea9f4  00000000  00000000  000252d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f7bb  00000000  00000000  0010fccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00022ab4  00000000  00000000  0011f487  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001db8  00000000  00000000  00141f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006658  00000000  00000000  00143cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030c93  00000000  00000000  0014a34b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000280c4  00000000  00000000  0017afde  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010565c  00000000  00000000  001a30a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004f54  00000000  00000000  002a8700  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f000 ffa1 	bl	d4f74 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f000 ffa9 	bl	d4f90 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5c8 	.word	0x2003e5c8
   d4048:	000d5244 	.word	0x000d5244
   d404c:	2003e630 	.word	0x2003e630
   d4050:	2003e630 	.word	0x2003e630
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fcc7 	bl	d49f0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5210 	.word	0x000d5210
   d407c:	000d5234 	.word	0x000d5234

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b878 	b.w	d4174 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8b5 	bl	d41f4 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bc71 	b.w	d4974 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 ba5f 	b.w	d4554 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 ba65 	b.w	d4564 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40aa:	b510      	push	{r4, lr}
   d40ac:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40ae:	6800      	ldr	r0, [r0, #0]
   d40b0:	b108      	cbz	r0, d40b6 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b2:	f000 fa57 	bl	d4564 <free>
class SystemClass {
   d40b6:	4620      	mov	r0, r4
   d40b8:	bd10      	pop	{r4, pc}

000d40ba <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ba:	b40e      	push	{r1, r2, r3}
   d40bc:	b503      	push	{r0, r1, lr}
   d40be:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d40c0:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40c2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40c6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d40c8:	f000 fbcf 	bl	d486a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40cc:	b002      	add	sp, #8
   d40ce:	f85d eb04 	ldr.w	lr, [sp], #4
   d40d2:	b003      	add	sp, #12
   d40d4:	4770      	bx	lr

000d40d6 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d40d6:	2300      	movs	r3, #0
   d40d8:	6840      	ldr	r0, [r0, #4]
   d40da:	461a      	mov	r2, r3
   d40dc:	4619      	mov	r1, r3
   d40de:	f000 b9f1 	b.w	d44c4 <network_off>
	...

000d40e4 <_ZN8particle24SystemSleepConfigurationC1Ev>:
};

class SystemSleepConfiguration: protected SystemSleepConfigurationHelper {
public:
    // Constructor
    SystemSleepConfiguration()
   d40e4:	b510      	push	{r4, lr}
   d40e6:	4604      	mov	r4, r0
            : SystemSleepConfigurationHelper(&config_),
   d40e8:	3004      	adds	r0, #4
        : config_(config) {
   d40ea:	6020      	str	r0, [r4, #0]
              config_(),
              valid_(true) {
   d40ec:	2210      	movs	r2, #16
   d40ee:	2100      	movs	r1, #0
   d40f0:	f000 ff4e 	bl	d4f90 <memset>
   d40f4:	2301      	movs	r3, #1
   d40f6:	7523      	strb	r3, [r4, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d40f8:	4b02      	ldr	r3, [pc, #8]	; (d4104 <_ZN8particle24SystemSleepConfigurationC1Ev+0x20>)
   d40fa:	6063      	str	r3, [r4, #4]
        config_.version = HAL_SLEEP_VERSION;
        config_.mode = HAL_SLEEP_MODE_NONE;
   d40fc:	2300      	movs	r3, #0
   d40fe:	7223      	strb	r3, [r4, #8]
        config_.flags = 0;
        config_.wakeup_sources = nullptr;
    }
   d4100:	4620      	mov	r0, r4
   d4102:	bd10      	pop	{r4, pc}
   d4104:	00030010 	.word	0x00030010

000d4108 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4108:	b538      	push	{r3, r4, r5, lr}
   d410a:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d410c:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d410e:	b128      	cbz	r0, d411c <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d4110:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d4112:	210c      	movs	r1, #12
   d4114:	f000 ff1b 	bl	d4f4e <_ZdlPvj>
            wakeupSource = next;
   d4118:	4628      	mov	r0, r5
        while (wakeupSource) {
   d411a:	e7f8      	b.n	d410e <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d411c:	4620      	mov	r0, r4
   d411e:	bd38      	pop	{r3, r4, r5, pc}

000d4120 <_ZN8particle24SystemSleepConfiguration8durationEm>:
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4120:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d4122:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4124:	4605      	mov	r5, r0
   d4126:	460e      	mov	r6, r1
        if (valid_) {
   d4128:	b1cb      	cbz	r3, d415e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d412a:	6803      	ldr	r3, [r0, #0]
   d412c:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d412e:	b123      	cbz	r3, d413a <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d4130:	889a      	ldrh	r2, [r3, #4]
   d4132:	2a04      	cmp	r2, #4
   d4134:	d017      	beq.n	d4166 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d4136:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4138:	e7f9      	b.n	d412e <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d413a:	490c      	ldr	r1, [pc, #48]	; (d416c <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d413c:	2010      	movs	r0, #16
   d413e:	f000 ff08 	bl	d4f52 <_ZnwjRKSt9nothrow_t>
   d4142:	4604      	mov	r4, r0
   d4144:	b168      	cbz	r0, d4162 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d4146:	2210      	movs	r2, #16
   d4148:	2100      	movs	r1, #0
   d414a:	f000 ff21 	bl	d4f90 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d414e:	4b08      	ldr	r3, [pc, #32]	; (d4170 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d4150:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4152:	2304      	movs	r3, #4
   d4154:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4156:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4158:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d415a:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d415e:	4628      	mov	r0, r5
   d4160:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d4162:	7528      	strb	r0, [r5, #20]
                return *this;
   d4164:	e7fb      	b.n	d415e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4166:	60de      	str	r6, [r3, #12]
                return *this;
   d4168:	e7f9      	b.n	d415e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d416a:	bf00      	nop
   d416c:	000d520c 	.word	0x000d520c
   d4170:	00030010 	.word	0x00030010

000d4174 <setup>:
#define CELL_CONNECT_SECONDS 20 // time to attempt to connect to cellular
#define CLOUD_CONNECT_SECONDS 20 // time to attempt to connect cloud
#define CLOUD_WAIT 30

// setup() runs once, when the device is first turned on.
void setup() {
   d4174:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d4176:	f000 fd4f 	bl	d4c18 <_Z16_fetch_usbserialv>

}
   d417a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
   d417e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4182:	f000 bd3d 	b.w	d4c00 <_ZN9USBSerial5beginEl>
	...

000d4188 <_Z8ULPSleepi>:
  return 1;
}

// Sleep ULP way
int ULPSleep(int seconds)
{
   d4188:	b510      	push	{r4, lr}
  if (seconds <= 0)
   d418a:	1e04      	subs	r4, r0, #0
{
   d418c:	b08a      	sub	sp, #40	; 0x28
  if (seconds <= 0)
   d418e:	dc05      	bgt.n	d419c <_Z8ULPSleepi+0x14>
  {
    seconds = 10;
    Serial.printlnf("Zero sleep time, adjusting to 10 seconds sleep time.");
   d4190:	f000 fd42 	bl	d4c18 <_Z16_fetch_usbserialv>
   d4194:	4915      	ldr	r1, [pc, #84]	; (d41ec <_Z8ULPSleepi+0x64>)
   d4196:	f7ff ff90 	bl	d40ba <_ZN5Print8printlnfEPKcz>
    seconds = 10;
   d419a:	240a      	movs	r4, #10
  }
  Serial.printlnf("Going to sleep for %d minutes %d seconds.", seconds / 60, seconds % 60);
   d419c:	f000 fd3c 	bl	d4c18 <_Z16_fetch_usbserialv>
   d41a0:	233c      	movs	r3, #60	; 0x3c
   d41a2:	4913      	ldr	r1, [pc, #76]	; (d41f0 <_Z8ULPSleepi+0x68>)
   d41a4:	fbb4 f2f3 	udiv	r2, r4, r3
   d41a8:	fb03 4312 	mls	r3, r3, r2, r4
   d41ac:	f7ff ff85 	bl	d40ba <_ZN5Print8printlnfEPKcz>
  SystemSleepConfiguration config;
   d41b0:	a804      	add	r0, sp, #16
   d41b2:	f7ff ff97 	bl	d40e4 <_ZN8particle24SystemSleepConfigurationC1Ev>
        if (valid_) {
   d41b6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d41ba:	b113      	cbz	r3, d41c2 <_Z8ULPSleepi+0x3a>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d41bc:	2302      	movs	r3, #2
   d41be:	f88d 3018 	strb.w	r3, [sp, #24]
  config.mode(SystemSleepMode::ULTRA_LOW_POWER)
        .duration(seconds * 1000);  // Takes msec
   d41c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d41c6:	4361      	muls	r1, r4
   d41c8:	a804      	add	r0, sp, #16
   d41ca:	f7ff ffa9 	bl	d4120 <_ZN8particle24SystemSleepConfiguration8durationEm>
  System.sleep(config);
   d41ce:	a801      	add	r0, sp, #4
   d41d0:	a904      	add	r1, sp, #16
   d41d2:	f000 fa53 	bl	d467c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d41d6:	9801      	ldr	r0, [sp, #4]
   d41d8:	b108      	cbz	r0, d41de <_Z8ULPSleepi+0x56>
            free(wakeupSource_);
   d41da:	f000 f9c3 	bl	d4564 <free>
  SystemSleepConfiguration config;
   d41de:	a804      	add	r0, sp, #16
   d41e0:	f7ff ff92 	bl	d4108 <_ZN8particle24SystemSleepConfigurationD1Ev>
  return 1;
}
   d41e4:	2001      	movs	r0, #1
   d41e6:	b00a      	add	sp, #40	; 0x28
   d41e8:	bd10      	pop	{r4, pc}
   d41ea:	bf00      	nop
   d41ec:	000d500c 	.word	0x000d500c
   d41f0:	000d5041 	.word	0x000d5041

000d41f4 <loop>:
void loop() {
   d41f4:	b530      	push	{r4, r5, lr}
  delay(1000);
   d41f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
void loop() {
   d41fa:	b085      	sub	sp, #20
  delay(1000);
   d41fc:	f000 fb78 	bl	d48f0 <delay>
  Serial.print("==== LOOP ====");
   d4200:	f000 fd0a 	bl	d4c18 <_Z16_fetch_usbserialv>
   d4204:	491a      	ldr	r1, [pc, #104]	; (d4270 <loop+0x7c>)
   d4206:	f000 faff 	bl	d4808 <_ZN5Print5printEPKc>
  Serial.print("start");
   d420a:	f000 fd05 	bl	d4c18 <_Z16_fetch_usbserialv>
   d420e:	4919      	ldr	r1, [pc, #100]	; (d4274 <loop+0x80>)
   d4210:	f000 fafa 	bl	d4808 <_ZN5Print5printEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4214:	f000 f868 	bl	d42e8 <HAL_Timer_Get_Milli_Seconds>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4218:	f000 f97c 	bl	d4514 <spark_cloud_flag_connect>
  Serial.printlnf("Particle Returned: %i",Particle.connected());
   d421c:	f000 fcfc 	bl	d4c18 <_Z16_fetch_usbserialv>
   d4220:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4222:	f000 f97f 	bl	d4524 <spark_cloud_flag_connected>
   d4226:	4914      	ldr	r1, [pc, #80]	; (d4278 <loop+0x84>)
   d4228:	4602      	mov	r2, r0
   d422a:	4620      	mov	r0, r4
   d422c:	f7ff ff45 	bl	d40ba <_ZN5Print8printlnfEPKcz>
   d4230:	f000 f978 	bl	d4524 <spark_cloud_flag_connected>
  if (Particle.connected())
   d4234:	b1a8      	cbz	r0, d4262 <loop+0x6e>
    Serial.print("turn everything off");
   d4236:	f000 fcef 	bl	d4c18 <_Z16_fetch_usbserialv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d423a:	4d10      	ldr	r5, [pc, #64]	; (d427c <loop+0x88>)
   d423c:	4910      	ldr	r1, [pc, #64]	; (d4280 <loop+0x8c>)
   d423e:	f000 fae3 	bl	d4808 <_ZN5Print5printEPKc>
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d4242:	2400      	movs	r4, #0
    Particle.disconnect();
   d4244:	a801      	add	r0, sp, #4
   d4246:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d424a:	f88d 400c 	strb.w	r4, [sp, #12]
   d424e:	f000 fc01 	bl	d4a54 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
   d4252:	6868      	ldr	r0, [r5, #4]
   d4254:	4622      	mov	r2, r4
   d4256:	2102      	movs	r1, #2
   d4258:	f000 f91c 	bl	d4494 <network_disconnect>
    Cellular.off();
   d425c:	4628      	mov	r0, r5
   d425e:	f7ff ff3a 	bl	d40d6 <_ZN5spark13CellularClass3offEv>
  ULPSleep(60*5);
   d4262:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4266:	f7ff ff8f 	bl	d4188 <_Z8ULPSleepi>
}
   d426a:	b005      	add	sp, #20
   d426c:	bd30      	pop	{r4, r5, pc}
   d426e:	bf00      	nop
   d4270:	000d506b 	.word	0x000d506b
   d4274:	000d507a 	.word	0x000d507a
   d4278:	000d5080 	.word	0x000d5080
   d427c:	2003e694 	.word	0x2003e694
   d4280:	000d5096 	.word	0x000d5096

000d4284 <_GLOBAL__sub_I_SystemMode>:
    }
    delay(1000);
  }
  Serial.printlnf("OK.");
  return secondCounter;
   d4284:	b510      	push	{r4, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4286:	4c09      	ldr	r4, [pc, #36]	; (d42ac <_GLOBAL__sub_I_SystemMode+0x28>)
   d4288:	2300      	movs	r3, #0
   d428a:	6023      	str	r3, [r4, #0]
   d428c:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d428e:	71a3      	strb	r3, [r4, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4290:	2003      	movs	r0, #3
    SleepResult() {}
   d4292:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   d4296:	60a3      	str	r3, [r4, #8]
        set_system_mode(mode);
   d4298:	f000 f8be 	bl	d4418 <set_system_mode>
SYSTEM_MODE(MANUAL);  
   d429c:	4620      	mov	r0, r4
   d429e:	4a04      	ldr	r2, [pc, #16]	; (d42b0 <_GLOBAL__sub_I_SystemMode+0x2c>)
   d42a0:	4904      	ldr	r1, [pc, #16]	; (d42b4 <_GLOBAL__sub_I_SystemMode+0x30>)
   d42a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_MODE(MANUAL);  
   d42a6:	f000 be4d 	b.w	d4f44 <__aeabi_atexit>
   d42aa:	bf00      	nop
   d42ac:	2003e634 	.word	0x2003e634
   d42b0:	2003e630 	.word	0x2003e630
   d42b4:	000d40ab 	.word	0x000d40ab

000d42b8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d42b8:	b508      	push	{r3, lr}
   d42ba:	4b02      	ldr	r3, [pc, #8]	; (d42c4 <netdb_freeaddrinfo+0xc>)
   d42bc:	681b      	ldr	r3, [r3, #0]
   d42be:	689b      	ldr	r3, [r3, #8]
   d42c0:	9301      	str	r3, [sp, #4]
   d42c2:	bd08      	pop	{r3, pc}
   d42c4:	00030268 	.word	0x00030268

000d42c8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d42c8:	b508      	push	{r3, lr}
   d42ca:	4b02      	ldr	r3, [pc, #8]	; (d42d4 <netdb_getaddrinfo+0xc>)
   d42cc:	681b      	ldr	r3, [r3, #0]
   d42ce:	68db      	ldr	r3, [r3, #12]
   d42d0:	9301      	str	r3, [sp, #4]
   d42d2:	bd08      	pop	{r3, pc}
   d42d4:	00030268 	.word	0x00030268

000d42d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d42d8:	b508      	push	{r3, lr}
   d42da:	4b02      	ldr	r3, [pc, #8]	; (d42e4 <HAL_RNG_GetRandomNumber+0xc>)
   d42dc:	681b      	ldr	r3, [r3, #0]
   d42de:	685b      	ldr	r3, [r3, #4]
   d42e0:	9301      	str	r3, [sp, #4]
   d42e2:	bd08      	pop	{r3, pc}
   d42e4:	00030218 	.word	0x00030218

000d42e8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d42e8:	b508      	push	{r3, lr}
   d42ea:	4b02      	ldr	r3, [pc, #8]	; (d42f4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d42ec:	681b      	ldr	r3, [r3, #0]
   d42ee:	695b      	ldr	r3, [r3, #20]
   d42f0:	9301      	str	r3, [sp, #4]
   d42f2:	bd08      	pop	{r3, pc}
   d42f4:	00030218 	.word	0x00030218

000d42f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42f8:	b508      	push	{r3, lr}
   d42fa:	4b02      	ldr	r3, [pc, #8]	; (d4304 <os_mutex_recursive_create+0xc>)
   d42fc:	681b      	ldr	r3, [r3, #0]
   d42fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4300:	9301      	str	r3, [sp, #4]
   d4302:	bd08      	pop	{r3, pc}
   d4304:	00030248 	.word	0x00030248

000d4308 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4308:	b508      	push	{r3, lr}
   d430a:	4b02      	ldr	r3, [pc, #8]	; (d4314 <os_mutex_recursive_destroy+0xc>)
   d430c:	681b      	ldr	r3, [r3, #0]
   d430e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	bd08      	pop	{r3, pc}
   d4314:	00030248 	.word	0x00030248

000d4318 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4318:	b508      	push	{r3, lr}
   d431a:	4b02      	ldr	r3, [pc, #8]	; (d4324 <inet_inet_ntop+0xc>)
   d431c:	681b      	ldr	r3, [r3, #0]
   d431e:	695b      	ldr	r3, [r3, #20]
   d4320:	9301      	str	r3, [sp, #4]
   d4322:	bd08      	pop	{r3, pc}
   d4324:	00030264 	.word	0x00030264

000d4328 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b02      	ldr	r3, [pc, #8]	; (d4334 <hal_usart_init+0xc>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	681b      	ldr	r3, [r3, #0]
   d4330:	9301      	str	r3, [sp, #4]
   d4332:	bd08      	pop	{r3, pc}
   d4334:	0003023c 	.word	0x0003023c

000d4338 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <hal_usart_write+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	68db      	ldr	r3, [r3, #12]
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	0003023c 	.word	0x0003023c

000d4348 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <hal_usart_available+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	691b      	ldr	r3, [r3, #16]
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	0003023c 	.word	0x0003023c

000d4358 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <hal_usart_read+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	695b      	ldr	r3, [r3, #20]
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	0003023c 	.word	0x0003023c

000d4368 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <hal_usart_peek+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	699b      	ldr	r3, [r3, #24]
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	0003023c 	.word	0x0003023c

000d4378 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <hal_usart_flush+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	69db      	ldr	r3, [r3, #28]
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	0003023c 	.word	0x0003023c

000d4388 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <hal_usart_available_data_for_write+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	0003023c 	.word	0x0003023c

000d4398 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <HAL_USB_USART_Init+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	681b      	ldr	r3, [r3, #0]
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	0003024c 	.word	0x0003024c

000d43a8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <HAL_USB_USART_Begin+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	685b      	ldr	r3, [r3, #4]
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	0003024c 	.word	0x0003024c

000d43b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <HAL_USB_USART_Available_Data+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	691b      	ldr	r3, [r3, #16]
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	0003024c 	.word	0x0003024c

000d43c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	695b      	ldr	r3, [r3, #20]
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	0003024c 	.word	0x0003024c

000d43d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <HAL_USB_USART_Receive_Data+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	699b      	ldr	r3, [r3, #24]
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	0003024c 	.word	0x0003024c

000d43e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <HAL_USB_USART_Send_Data+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	69db      	ldr	r3, [r3, #28]
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	0003024c 	.word	0x0003024c

000d43f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <HAL_USB_USART_Flush_Data+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	6a1b      	ldr	r3, [r3, #32]
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	0003024c 	.word	0x0003024c

000d4408 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <log_message+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	00030260 	.word	0x00030260

000d4418 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <set_system_mode+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	685b      	ldr	r3, [r3, #4]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	00030220 	.word	0x00030220

000d4428 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <system_delay_ms+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	695b      	ldr	r3, [r3, #20]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	00030220 	.word	0x00030220

000d4438 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b03      	ldr	r3, [pc, #12]	; (d4448 <system_ctrl_set_app_request_handler+0x10>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4442:	9301      	str	r3, [sp, #4]
   d4444:	bd08      	pop	{r3, pc}
   d4446:	0000      	.short	0x0000
   d4448:	00030220 	.word	0x00030220

000d444c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b03      	ldr	r3, [pc, #12]	; (d445c <system_ctrl_set_result+0x10>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4456:	9301      	str	r3, [sp, #4]
   d4458:	bd08      	pop	{r3, pc}
   d445a:	0000      	.short	0x0000
   d445c:	00030220 	.word	0x00030220

000d4460 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b03      	ldr	r3, [pc, #12]	; (d4470 <system_sleep_ext+0x10>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d446a:	9301      	str	r3, [sp, #4]
   d446c:	bd08      	pop	{r3, pc}
   d446e:	0000      	.short	0x0000
   d4470:	00030220 	.word	0x00030220

000d4474 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <network_connect+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	685b      	ldr	r3, [r3, #4]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030240 	.word	0x00030240

000d4484 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <network_connecting+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	689b      	ldr	r3, [r3, #8]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030240 	.word	0x00030240

000d4494 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <network_disconnect+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	68db      	ldr	r3, [r3, #12]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030240 	.word	0x00030240

000d44a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <network_ready+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	691b      	ldr	r3, [r3, #16]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030240 	.word	0x00030240

000d44b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <network_on+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	695b      	ldr	r3, [r3, #20]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030240 	.word	0x00030240

000d44c4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <network_off+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	699b      	ldr	r3, [r3, #24]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030240 	.word	0x00030240

000d44d4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <network_listen+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	69db      	ldr	r3, [r3, #28]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030240 	.word	0x00030240

000d44e4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <network_listening+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	6a1b      	ldr	r3, [r3, #32]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030240 	.word	0x00030240

000d44f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <network_set_listen_timeout+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030240 	.word	0x00030240

000d4504 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <network_get_listen_timeout+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030240 	.word	0x00030240

000d4514 <spark_cloud_flag_connect>:
DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <spark_cloud_flag_connect+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	68db      	ldr	r3, [r3, #12]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030244 	.word	0x00030244

000d4524 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <spark_cloud_flag_connected+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	695b      	ldr	r3, [r3, #20]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030244 	.word	0x00030244

000d4534 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030244 	.word	0x00030244

000d4544 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <spark_cloud_disconnect+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030244 	.word	0x00030244

000d4554 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <malloc+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	681b      	ldr	r3, [r3, #0]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	0003021c 	.word	0x0003021c

000d4564 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <free+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	685b      	ldr	r3, [r3, #4]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	0003021c 	.word	0x0003021c

000d4574 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <vsnprintf+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	0003021c 	.word	0x0003021c

000d4584 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <newlib_impure_ptr_callback+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	0003021c 	.word	0x0003021c

000d4594 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4594:	2200      	movs	r2, #0
   d4596:	6840      	ldr	r0, [r0, #4]
   d4598:	4611      	mov	r1, r2
   d459a:	f7ff bfa3 	b.w	d44e4 <network_listening>

000d459e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d459e:	2200      	movs	r2, #0
   d45a0:	6840      	ldr	r0, [r0, #4]
   d45a2:	4611      	mov	r1, r2
   d45a4:	f7ff bfae 	b.w	d4504 <network_get_listen_timeout>

000d45a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d45a8:	6840      	ldr	r0, [r0, #4]
   d45aa:	2200      	movs	r2, #0
   d45ac:	f7ff bfa2 	b.w	d44f4 <network_set_listen_timeout>

000d45b0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d45b0:	6840      	ldr	r0, [r0, #4]
   d45b2:	2200      	movs	r2, #0
   d45b4:	f081 0101 	eor.w	r1, r1, #1
   d45b8:	f7ff bf8c 	b.w	d44d4 <network_listen>

000d45bc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d45bc:	2300      	movs	r3, #0
   d45be:	6840      	ldr	r0, [r0, #4]
   d45c0:	461a      	mov	r2, r3
   d45c2:	4619      	mov	r1, r3
   d45c4:	f7ff bf7e 	b.w	d44c4 <network_off>

000d45c8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d45c8:	2300      	movs	r3, #0
   d45ca:	6840      	ldr	r0, [r0, #4]
   d45cc:	461a      	mov	r2, r3
   d45ce:	4619      	mov	r1, r3
   d45d0:	f7ff bf70 	b.w	d44b4 <network_on>

000d45d4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d45d4:	2200      	movs	r2, #0
   d45d6:	6840      	ldr	r0, [r0, #4]
   d45d8:	4611      	mov	r1, r2
   d45da:	f7ff bf63 	b.w	d44a4 <network_ready>

000d45de <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d45de:	2200      	movs	r2, #0
   d45e0:	6840      	ldr	r0, [r0, #4]
   d45e2:	4611      	mov	r1, r2
   d45e4:	f7ff bf4e 	b.w	d4484 <network_connecting>

000d45e8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d45e8:	6840      	ldr	r0, [r0, #4]
   d45ea:	2200      	movs	r2, #0
   d45ec:	2102      	movs	r1, #2
   d45ee:	f7ff bf51 	b.w	d4494 <network_disconnect>

000d45f2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d45f2:	2300      	movs	r3, #0
   d45f4:	6840      	ldr	r0, [r0, #4]
   d45f6:	461a      	mov	r2, r3
   d45f8:	f7ff bf3c 	b.w	d4474 <network_connect>

000d45fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d45fc:	4b02      	ldr	r3, [pc, #8]	; (d4608 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d45fe:	2203      	movs	r2, #3
   d4600:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4602:	4a02      	ldr	r2, [pc, #8]	; (d460c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4604:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4606:	4770      	bx	lr
   d4608:	2003e640 	.word	0x2003e640
   d460c:	000d50b4 	.word	0x000d50b4

000d4610 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4610:	b510      	push	{r4, lr}
   d4612:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4614:	6800      	ldr	r0, [r0, #0]
   d4616:	b118      	cbz	r0, d4620 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4618:	f7ff ffa4 	bl	d4564 <free>
            wakeupSource_ = nullptr;
   d461c:	2300      	movs	r3, #0
   d461e:	6023      	str	r3, [r4, #0]
        }
    }
   d4620:	bd10      	pop	{r4, pc}

000d4622 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4622:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d4624:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d4628:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d462a:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d462c:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d462e:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d4632:	f8c0 2006 	str.w	r2, [r0, #6]
   d4636:	889b      	ldrh	r3, [r3, #4]
   d4638:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d463a:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d463c:	f7ff ffe8 	bl	d4610 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d4640:	682b      	ldr	r3, [r5, #0]
   d4642:	b113      	cbz	r3, d464a <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d4644:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d4646:	2300      	movs	r3, #0
   d4648:	602b      	str	r3, [r5, #0]
    }
   d464a:	4620      	mov	r0, r4
   d464c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4650 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d4650:	b538      	push	{r3, r4, r5, lr}
   d4652:	460c      	mov	r4, r1
   d4654:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d4656:	f7ff ffdb 	bl	d4610 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d465a:	b144      	cbz	r4, d466e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d465c:	8820      	ldrh	r0, [r4, #0]
   d465e:	f7ff ff79 	bl	d4554 <malloc>
   d4662:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d4664:	b128      	cbz	r0, d4672 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d4666:	8822      	ldrh	r2, [r4, #0]
   d4668:	4621      	mov	r1, r4
   d466a:	f000 fc83 	bl	d4f74 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d466e:	2000      	movs	r0, #0
    }
   d4670:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d4672:	4801      	ldr	r0, [pc, #4]	; (d4678 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d4674:	e7fc      	b.n	d4670 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d4676:	bf00      	nop
   d4678:	fffffefc 	.word	0xfffffefc

000d467c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d467c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d467e:	4d2d      	ldr	r5, [pc, #180]	; (d4734 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d4680:	7d0b      	ldrb	r3, [r1, #20]
   d4682:	4604      	mov	r4, r0
   d4684:	b08b      	sub	sp, #44	; 0x2c
   d4686:	4608      	mov	r0, r1
   d4688:	1daf      	adds	r7, r5, #6
   d468a:	2b00      	cmp	r3, #0
   d468c:	d038      	beq.n	d4700 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d468e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d4690:	791b      	ldrb	r3, [r3, #4]
   d4692:	2b00      	cmp	r3, #0
   d4694:	d034      	beq.n	d4700 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d4696:	2200      	movs	r2, #0
    SleepResult() {}
   d4698:	4b27      	ldr	r3, [pc, #156]	; (d4738 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d469a:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d469c:	a902      	add	r1, sp, #8
   d469e:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d46a0:	9202      	str	r2, [sp, #8]
   d46a2:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d46a6:	f88d 200e 	strb.w	r2, [sp, #14]
   d46aa:	f7ff fed9 	bl	d4460 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d46ae:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d46b2:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d46b6:	b200      	sxth	r0, r0
   d46b8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d46bc:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d46c0:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d46c2:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d46c4:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d46c6:	4628      	mov	r0, r5
   d46c8:	f7ff ffc2 	bl	d4650 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d46cc:	a802      	add	r0, sp, #8
   d46ce:	f7ff ff9f 	bl	d4610 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d46d2:	2300      	movs	r3, #0
   d46d4:	6023      	str	r3, [r4, #0]
   d46d6:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d46d8:	71a3      	strb	r3, [r4, #6]
   d46da:	8123      	strh	r3, [r4, #8]
   d46dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d46e0:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d46e2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d46e6:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d46e8:	683b      	ldr	r3, [r7, #0]
   d46ea:	f8c4 3006 	str.w	r3, [r4, #6]
   d46ee:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d46f0:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d46f2:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d46f4:	4620      	mov	r0, r4
   d46f6:	f7ff ffab 	bl	d4650 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d46fa:	4620      	mov	r0, r4
   d46fc:	b00b      	add	sp, #44	; 0x2c
   d46fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d4700:	2600      	movs	r6, #0
   d4702:	2320      	movs	r3, #32
   d4704:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d4708:	4b0c      	ldr	r3, [pc, #48]	; (d473c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d470a:	9300      	str	r3, [sp, #0]
   d470c:	490c      	ldr	r1, [pc, #48]	; (d4740 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d470e:	4633      	mov	r3, r6
   d4710:	aa02      	add	r2, sp, #8
   d4712:	2032      	movs	r0, #50	; 0x32
   d4714:	f7ff fe78 	bl	d4408 <log_message>
    SleepResult() {}
   d4718:	4b07      	ldr	r3, [pc, #28]	; (d4738 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d471a:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d471c:	a902      	add	r1, sp, #8
        error_ = error;
   d471e:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d4722:	4804      	ldr	r0, [pc, #16]	; (d4734 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d4724:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d4726:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d472a:	f8ad 300c 	strh.w	r3, [sp, #12]
   d472e:	f7ff ff78 	bl	d4622 <_ZN17SystemSleepResultaSEOS_>
   d4732:	e7cb      	b.n	d46cc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d4734:	2003e648 	.word	0x2003e648
   d4738:	ffff0000 	.word	0xffff0000
   d473c:	000d50e7 	.word	0x000d50e7
   d4740:	000d50e0 	.word	0x000d50e0

000d4744 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4744:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4746:	4b09      	ldr	r3, [pc, #36]	; (d476c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4748:	4c09      	ldr	r4, [pc, #36]	; (d4770 <_GLOBAL__sub_I_System+0x2c>)
   d474a:	2202      	movs	r2, #2
   d474c:	2000      	movs	r0, #0
   d474e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4750:	4b08      	ldr	r3, [pc, #32]	; (d4774 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4752:	6020      	str	r0, [r4, #0]
   d4754:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4756:	71a0      	strb	r0, [r4, #6]
   d4758:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d475a:	f7ff fe5d 	bl	d4418 <set_system_mode>
SystemClass System;
   d475e:	4620      	mov	r0, r4
   d4760:	4a05      	ldr	r2, [pc, #20]	; (d4778 <_GLOBAL__sub_I_System+0x34>)
   d4762:	4906      	ldr	r1, [pc, #24]	; (d477c <_GLOBAL__sub_I_System+0x38>)
   d4764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4768:	f000 bbec 	b.w	d4f44 <__aeabi_atexit>
   d476c:	2003e654 	.word	0x2003e654
   d4770:	2003e648 	.word	0x2003e648
   d4774:	ffff0000 	.word	0xffff0000
   d4778:	2003e630 	.word	0x2003e630
   d477c:	000d40ab 	.word	0x000d40ab

000d4780 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4780:	b510      	push	{r4, lr}
   d4782:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4784:	6800      	ldr	r0, [r0, #0]
   d4786:	b108      	cbz	r0, d478c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4788:	f7ff fdbe 	bl	d4308 <os_mutex_recursive_destroy>
    }
   d478c:	4620      	mov	r0, r4
   d478e:	bd10      	pop	{r4, pc}

000d4790 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4790:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4792:	4c06      	ldr	r4, [pc, #24]	; (d47ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4794:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4796:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4798:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d479a:	f7ff fdad 	bl	d42f8 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d479e:	4620      	mov	r0, r4
   d47a0:	4a03      	ldr	r2, [pc, #12]	; (d47b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d47a2:	4904      	ldr	r1, [pc, #16]	; (d47b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d47a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d47a8:	f000 bbcc 	b.w	d4f44 <__aeabi_atexit>
   d47ac:	2003e658 	.word	0x2003e658
   d47b0:	2003e630 	.word	0x2003e630
   d47b4:	000d4781 	.word	0x000d4781

000d47b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d47b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47ba:	4606      	mov	r6, r0
   d47bc:	460d      	mov	r5, r1
  size_t n = 0;
   d47be:	188f      	adds	r7, r1, r2
   d47c0:	2400      	movs	r4, #0
  while (size--) {
   d47c2:	42bd      	cmp	r5, r7
   d47c4:	d00c      	beq.n	d47e0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d47c6:	6833      	ldr	r3, [r6, #0]
   d47c8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d47cc:	689b      	ldr	r3, [r3, #8]
   d47ce:	4630      	mov	r0, r6
   d47d0:	4798      	blx	r3
     if (chunk>=0)
   d47d2:	1e03      	subs	r3, r0, #0
   d47d4:	db01      	blt.n	d47da <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d47d6:	441c      	add	r4, r3
  while (size--) {
   d47d8:	e7f3      	b.n	d47c2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d47da:	2c00      	cmp	r4, #0
   d47dc:	bf08      	it	eq
   d47de:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d47e0:	4620      	mov	r0, r4
   d47e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d47e4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d47e4:	b513      	push	{r0, r1, r4, lr}
   d47e6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d47e8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d47ea:	b159      	cbz	r1, d4804 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d47ec:	9101      	str	r1, [sp, #4]
   d47ee:	f000 fbfb 	bl	d4fe8 <strlen>
   d47f2:	6823      	ldr	r3, [r4, #0]
   d47f4:	9901      	ldr	r1, [sp, #4]
   d47f6:	68db      	ldr	r3, [r3, #12]
   d47f8:	4602      	mov	r2, r0
   d47fa:	4620      	mov	r0, r4
    }
   d47fc:	b002      	add	sp, #8
   d47fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4802:	4718      	bx	r3
    }
   d4804:	b002      	add	sp, #8
   d4806:	bd10      	pop	{r4, pc}

000d4808 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d4808:	b508      	push	{r3, lr}
  return write(str);
   d480a:	f7ff ffeb 	bl	d47e4 <_ZN5Print5writeEPKc>
}
   d480e:	bd08      	pop	{r3, pc}

000d4810 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d4810:	6803      	ldr	r3, [r0, #0]
   d4812:	689b      	ldr	r3, [r3, #8]
   d4814:	4718      	bx	r3

000d4816 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4816:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4818:	210d      	movs	r1, #13
{
   d481a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d481c:	f7ff fff8 	bl	d4810 <_ZN5Print5printEc>
  n += print('\n');
   d4820:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4822:	4604      	mov	r4, r0
  n += print('\n');
   d4824:	4628      	mov	r0, r5
   d4826:	f7ff fff3 	bl	d4810 <_ZN5Print5printEc>
  return n;
}
   d482a:	4420      	add	r0, r4
   d482c:	bd38      	pop	{r3, r4, r5, pc}

000d482e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d482e:	b530      	push	{r4, r5, lr}
   d4830:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4832:	2300      	movs	r3, #0
   d4834:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4838:	2a01      	cmp	r2, #1
   d483a:	bf98      	it	ls
   d483c:	220a      	movls	r2, #10
   d483e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4840:	460d      	mov	r5, r1
   d4842:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4846:	fb01 5312 	mls	r3, r1, r2, r5
   d484a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d484e:	2b09      	cmp	r3, #9
   d4850:	bf94      	ite	ls
   d4852:	3330      	addls	r3, #48	; 0x30
   d4854:	3337      	addhi	r3, #55	; 0x37
   d4856:	b2db      	uxtb	r3, r3
  } while(n);
   d4858:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d485a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d485e:	d9ef      	bls.n	d4840 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4860:	4621      	mov	r1, r4
   d4862:	f7ff ffbf 	bl	d47e4 <_ZN5Print5writeEPKc>
}
   d4866:	b00b      	add	sp, #44	; 0x2c
   d4868:	bd30      	pop	{r4, r5, pc}

000d486a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d486a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d486e:	b086      	sub	sp, #24
   d4870:	af00      	add	r7, sp, #0
   d4872:	4605      	mov	r5, r0
   d4874:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d4876:	1d38      	adds	r0, r7, #4
   d4878:	2114      	movs	r1, #20
{
   d487a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d487c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d487e:	f7ff fe79 	bl	d4574 <vsnprintf>

    if (n<bufsize)
   d4882:	2813      	cmp	r0, #19
   d4884:	d80e      	bhi.n	d48a4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d4886:	1d39      	adds	r1, r7, #4
   d4888:	4628      	mov	r0, r5
   d488a:	f7ff ffab 	bl	d47e4 <_ZN5Print5writeEPKc>
   d488e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d4890:	b11e      	cbz	r6, d489a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d4892:	4628      	mov	r0, r5
   d4894:	f7ff ffbf 	bl	d4816 <_ZN5Print7printlnEv>
   d4898:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d489a:	4620      	mov	r0, r4
   d489c:	3718      	adds	r7, #24
   d489e:	46bd      	mov	sp, r7
   d48a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d48a4:	f100 0308 	add.w	r3, r0, #8
   d48a8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d48ac:	46e8      	mov	r8, sp
        char bigger[n+1];
   d48ae:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d48b2:	4622      	mov	r2, r4
   d48b4:	1c41      	adds	r1, r0, #1
   d48b6:	683b      	ldr	r3, [r7, #0]
   d48b8:	4668      	mov	r0, sp
   d48ba:	f7ff fe5b 	bl	d4574 <vsnprintf>
  return write(str);
   d48be:	4669      	mov	r1, sp
   d48c0:	4628      	mov	r0, r5
   d48c2:	f7ff ff8f 	bl	d47e4 <_ZN5Print5writeEPKc>
   d48c6:	4604      	mov	r4, r0
   d48c8:	46c5      	mov	sp, r8
   d48ca:	e7e1      	b.n	d4890 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d48cc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d48cc:	4b01      	ldr	r3, [pc, #4]	; (d48d4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d48ce:	4a02      	ldr	r2, [pc, #8]	; (d48d8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d48d0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d48d2:	4770      	bx	lr
   d48d4:	2003e65c 	.word	0x2003e65c
   d48d8:	000d510e 	.word	0x000d510e

000d48dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d48dc:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d48de:	681a      	ldr	r2, [r3, #0]
   d48e0:	4b02      	ldr	r3, [pc, #8]	; (d48ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d48e2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d48e4:	4770      	bx	lr
   d48e6:	bf00      	nop
   d48e8:	2003e5c8 	.word	0x2003e5c8
   d48ec:	2003e660 	.word	0x2003e660

000d48f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d48f0:	2100      	movs	r1, #0
   d48f2:	f7ff bd99 	b.w	d4428 <system_delay_ms>

000d48f6 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48f6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d48f8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d48fa:	4604      	mov	r4, r0
      if (_M_manager)
   d48fc:	b113      	cbz	r3, d4904 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48fe:	2203      	movs	r2, #3
   d4900:	4601      	mov	r1, r0
   d4902:	4798      	blx	r3
    }
   d4904:	4620      	mov	r0, r4
   d4906:	bd10      	pop	{r4, pc}

000d4908 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4908:	b510      	push	{r4, lr}
   d490a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d490c:	f7ff fff3 	bl	d48f6 <_ZNSt14_Function_baseD1Ev>
   d4910:	4620      	mov	r0, r4
   d4912:	bd10      	pop	{r4, pc}

000d4914 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4914:	4803      	ldr	r0, [pc, #12]	; (d4924 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4916:	4a04      	ldr	r2, [pc, #16]	; (d4928 <_GLOBAL__sub_I_RGB+0x14>)
   d4918:	4904      	ldr	r1, [pc, #16]	; (d492c <_GLOBAL__sub_I_RGB+0x18>)
   d491a:	2300      	movs	r3, #0
   d491c:	6083      	str	r3, [r0, #8]
   d491e:	f000 bb11 	b.w	d4f44 <__aeabi_atexit>
   d4922:	bf00      	nop
   d4924:	2003e664 	.word	0x2003e664
   d4928:	2003e630 	.word	0x2003e630
   d492c:	000d4909 	.word	0x000d4909

000d4930 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4930:	4b01      	ldr	r3, [pc, #4]	; (d4938 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4932:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4934:	4770      	bx	lr
   d4936:	bf00      	nop
   d4938:	2003e5cc 	.word	0x2003e5cc

000d493c <serialEventRun>:
{
   d493c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d493e:	4b0b      	ldr	r3, [pc, #44]	; (d496c <serialEventRun+0x30>)
   d4940:	b143      	cbz	r3, d4954 <serialEventRun+0x18>
   d4942:	f000 f969 	bl	d4c18 <_Z16_fetch_usbserialv>
   d4946:	6803      	ldr	r3, [r0, #0]
   d4948:	691b      	ldr	r3, [r3, #16]
   d494a:	4798      	blx	r3
   d494c:	2800      	cmp	r0, #0
   d494e:	dd01      	ble.n	d4954 <serialEventRun+0x18>
        serialEvent();
   d4950:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4954:	4b06      	ldr	r3, [pc, #24]	; (d4970 <serialEventRun+0x34>)
   d4956:	b143      	cbz	r3, d496a <serialEventRun+0x2e>
   d4958:	f000 fa22 	bl	d4da0 <_Z22__fetch_global_Serial1v>
   d495c:	6803      	ldr	r3, [r0, #0]
   d495e:	691b      	ldr	r3, [r3, #16]
   d4960:	4798      	blx	r3
   d4962:	2800      	cmp	r0, #0
   d4964:	dd01      	ble.n	d496a <serialEventRun+0x2e>
        serialEvent1();
   d4966:	f3af 8000 	nop.w
}
   d496a:	bd08      	pop	{r3, pc}
	...

000d4974 <_post_loop>:
{
   d4974:	b508      	push	{r3, lr}
	serialEventRun();
   d4976:	f7ff ffe1 	bl	d493c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d497a:	f7ff fcb5 	bl	d42e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d497e:	4b01      	ldr	r3, [pc, #4]	; (d4984 <_post_loop+0x10>)
   d4980:	6018      	str	r0, [r3, #0]
}
   d4982:	bd08      	pop	{r3, pc}
   d4984:	2003e7ec 	.word	0x2003e7ec

000d4988 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4988:	4802      	ldr	r0, [pc, #8]	; (d4994 <_Z33system_initialize_user_backup_ramv+0xc>)
   d498a:	4a03      	ldr	r2, [pc, #12]	; (d4998 <_Z33system_initialize_user_backup_ramv+0x10>)
   d498c:	4903      	ldr	r1, [pc, #12]	; (d499c <_Z33system_initialize_user_backup_ramv+0x14>)
   d498e:	1a12      	subs	r2, r2, r0
   d4990:	f000 baf0 	b.w	d4f74 <memcpy>
   d4994:	2003f400 	.word	0x2003f400
   d4998:	2003f404 	.word	0x2003f404
   d499c:	000d5240 	.word	0x000d5240

000d49a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d49a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d49a2:	2300      	movs	r3, #0
   d49a4:	9300      	str	r3, [sp, #0]
   d49a6:	461a      	mov	r2, r3
   d49a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d49ac:	f7ff fd4e 	bl	d444c <system_ctrl_set_result>
}
   d49b0:	b003      	add	sp, #12
   d49b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d49b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d49b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d49ba:	8843      	ldrh	r3, [r0, #2]
   d49bc:	2b0a      	cmp	r3, #10
   d49be:	d008      	beq.n	d49d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d49c0:	2b50      	cmp	r3, #80	; 0x50
   d49c2:	d10b      	bne.n	d49dc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d49c4:	4b09      	ldr	r3, [pc, #36]	; (d49ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d49c6:	681b      	ldr	r3, [r3, #0]
   d49c8:	b14b      	cbz	r3, d49de <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d49ca:	b003      	add	sp, #12
   d49cc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d49d0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d49d2:	f7ff ffe5 	bl	d49a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d49d6:	b003      	add	sp, #12
   d49d8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d49dc:	2300      	movs	r3, #0
   d49de:	9300      	str	r3, [sp, #0]
   d49e0:	461a      	mov	r2, r3
   d49e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d49e6:	f7ff fd31 	bl	d444c <system_ctrl_set_result>
}
   d49ea:	e7f4      	b.n	d49d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d49ec:	2003e678 	.word	0x2003e678

000d49f0 <module_user_init_hook>:
{
   d49f0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d49f2:	4c12      	ldr	r4, [pc, #72]	; (d4a3c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d49f4:	4812      	ldr	r0, [pc, #72]	; (d4a40 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d49f6:	4d13      	ldr	r5, [pc, #76]	; (d4a44 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d49f8:	2100      	movs	r1, #0
   d49fa:	f7ff fdc3 	bl	d4584 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d49fe:	6823      	ldr	r3, [r4, #0]
   d4a00:	42ab      	cmp	r3, r5
   d4a02:	4b11      	ldr	r3, [pc, #68]	; (d4a48 <module_user_init_hook+0x58>)
   d4a04:	bf0c      	ite	eq
   d4a06:	2201      	moveq	r2, #1
   d4a08:	2200      	movne	r2, #0
   d4a0a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4a0c:	d002      	beq.n	d4a14 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4a0e:	f7ff ffbb 	bl	d4988 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4a12:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4a14:	f7ff fc60 	bl	d42d8 <HAL_RNG_GetRandomNumber>
   d4a18:	4604      	mov	r4, r0
    srand(seed);
   d4a1a:	f000 fac1 	bl	d4fa0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4a1e:	4b0b      	ldr	r3, [pc, #44]	; (d4a4c <module_user_init_hook+0x5c>)
   d4a20:	b113      	cbz	r3, d4a28 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4a22:	4620      	mov	r0, r4
   d4a24:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4a28:	2100      	movs	r1, #0
   d4a2a:	4808      	ldr	r0, [pc, #32]	; (d4a4c <module_user_init_hook+0x5c>)
   d4a2c:	f7ff fd82 	bl	d4534 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4a34:	4806      	ldr	r0, [pc, #24]	; (d4a50 <module_user_init_hook+0x60>)
   d4a36:	2100      	movs	r1, #0
   d4a38:	f7ff bcfe 	b.w	d4438 <system_ctrl_set_app_request_handler>
   d4a3c:	2003f400 	.word	0x2003f400
   d4a40:	000d4931 	.word	0x000d4931
   d4a44:	9a271c1e 	.word	0x9a271c1e
   d4a48:	2003e674 	.word	0x2003e674
   d4a4c:	00000000 	.word	0x00000000
   d4a50:	000d49b9 	.word	0x000d49b9

000d4a54 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d4a54:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d4a56:	2308      	movs	r3, #8
   d4a58:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d4a5c:	6803      	ldr	r3, [r0, #0]
   d4a5e:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d4a62:	7a03      	ldrb	r3, [r0, #8]
   d4a64:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d4a68:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d4a6a:	6843      	ldr	r3, [r0, #4]
   d4a6c:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d4a6e:	4668      	mov	r0, sp
   d4a70:	f7ff fd68 	bl	d4544 <spark_cloud_disconnect>
}
   d4a74:	b003      	add	sp, #12
   d4a76:	f85d fb04 	ldr.w	pc, [sp], #4

000d4a7a <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4a7a:	4770      	bx	lr

000d4a7c <_ZN9IPAddressD0Ev>:
   d4a7c:	b510      	push	{r4, lr}
   d4a7e:	2118      	movs	r1, #24
   d4a80:	4604      	mov	r4, r0
   d4a82:	f000 fa64 	bl	d4f4e <_ZdlPvj>
   d4a86:	4620      	mov	r0, r4
   d4a88:	bd10      	pop	{r4, pc}

000d4a8a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4a8c:	7d03      	ldrb	r3, [r0, #20]
   d4a8e:	2b06      	cmp	r3, #6
{
   d4a90:	b08d      	sub	sp, #52	; 0x34
   d4a92:	460e      	mov	r6, r1
   d4a94:	f100 0704 	add.w	r7, r0, #4
   d4a98:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4a9c:	d012      	beq.n	d4ac4 <_ZNK9IPAddress7printToER5Print+0x3a>
   d4a9e:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4aa2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4aa6:	220a      	movs	r2, #10
   d4aa8:	4630      	mov	r0, r6
   d4aaa:	f7ff fec0 	bl	d482e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4aae:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ab0:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4ab2:	d019      	beq.n	d4ae8 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4ab4:	2c00      	cmp	r4, #0
   d4ab6:	d0f4      	beq.n	d4aa2 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4ab8:	212e      	movs	r1, #46	; 0x2e
   d4aba:	4630      	mov	r0, r6
   d4abc:	f7ff fea8 	bl	d4810 <_ZN5Print5printEc>
   d4ac0:	4404      	add	r4, r0
   d4ac2:	e7ee      	b.n	d4aa2 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4ac4:	232f      	movs	r3, #47	; 0x2f
   d4ac6:	466a      	mov	r2, sp
   d4ac8:	4639      	mov	r1, r7
   d4aca:	200a      	movs	r0, #10
		buf[0] = 0;
   d4acc:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4ad0:	f7ff fc22 	bl	d4318 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4ad4:	4668      	mov	r0, sp
   d4ad6:	f000 fa87 	bl	d4fe8 <strlen>
   d4ada:	6833      	ldr	r3, [r6, #0]
   d4adc:	4602      	mov	r2, r0
   d4ade:	68db      	ldr	r3, [r3, #12]
   d4ae0:	4669      	mov	r1, sp
   d4ae2:	4630      	mov	r0, r6
   d4ae4:	4798      	blx	r3
   d4ae6:	4604      	mov	r4, r0
    }
    return n;
}
   d4ae8:	4620      	mov	r0, r4
   d4aea:	b00d      	add	sp, #52	; 0x34
   d4aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4af0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4af0:	b510      	push	{r4, lr}
   d4af2:	4b05      	ldr	r3, [pc, #20]	; (d4b08 <_ZN9IPAddressC1Ev+0x18>)
   d4af4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4af6:	2211      	movs	r2, #17
   d4af8:	f840 3b04 	str.w	r3, [r0], #4
   d4afc:	2100      	movs	r1, #0
   d4afe:	f000 fa47 	bl	d4f90 <memset>
}
   d4b02:	4620      	mov	r0, r4
   d4b04:	bd10      	pop	{r4, pc}
   d4b06:	bf00      	nop
   d4b08:	000d5138 	.word	0x000d5138

000d4b0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4b0c:	4603      	mov	r3, r0
   d4b0e:	4a07      	ldr	r2, [pc, #28]	; (d4b2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4b10:	b510      	push	{r4, lr}
   d4b12:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4b16:	f101 0210 	add.w	r2, r1, #16
   d4b1a:	f851 4b04 	ldr.w	r4, [r1], #4
   d4b1e:	f843 4b04 	str.w	r4, [r3], #4
   d4b22:	4291      	cmp	r1, r2
   d4b24:	d1f9      	bne.n	d4b1a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4b26:	780a      	ldrb	r2, [r1, #0]
   d4b28:	701a      	strb	r2, [r3, #0]
}
   d4b2a:	bd10      	pop	{r4, pc}
   d4b2c:	000d5138 	.word	0x000d5138

000d4b30 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4b30:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4b32:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4b36:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4b3a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4b3e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4b42:	2304      	movs	r3, #4
   d4b44:	6041      	str	r1, [r0, #4]
   d4b46:	7503      	strb	r3, [r0, #20]
}
   d4b48:	bd10      	pop	{r4, pc}

000d4b4a <_ZN9IPAddressaSEPKh>:
{
   d4b4a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4b4c:	78cb      	ldrb	r3, [r1, #3]
   d4b4e:	9300      	str	r3, [sp, #0]
   d4b50:	788b      	ldrb	r3, [r1, #2]
   d4b52:	784a      	ldrb	r2, [r1, #1]
   d4b54:	7809      	ldrb	r1, [r1, #0]
   d4b56:	f7ff ffeb 	bl	d4b30 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4b5a:	b002      	add	sp, #8
   d4b5c:	bd10      	pop	{r4, pc}

000d4b5e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4b5e:	7441      	strb	r1, [r0, #17]
}
   d4b60:	4770      	bx	lr

000d4b62 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4b62:	4770      	bx	lr

000d4b64 <_ZN9USBSerial4readEv>:
{
   d4b64:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4b66:	2100      	movs	r1, #0
   d4b68:	7c00      	ldrb	r0, [r0, #16]
   d4b6a:	f7ff fc35 	bl	d43d8 <HAL_USB_USART_Receive_Data>
}
   d4b6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4b72:	bd08      	pop	{r3, pc}

000d4b74 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d4b74:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4b76:	2101      	movs	r1, #1
   d4b78:	7c00      	ldrb	r0, [r0, #16]
   d4b7a:	f7ff fc2d 	bl	d43d8 <HAL_USB_USART_Receive_Data>
}
   d4b7e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4b82:	bd08      	pop	{r3, pc}

000d4b84 <_ZN9USBSerial17availableForWriteEv>:
{
   d4b84:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4b86:	7c00      	ldrb	r0, [r0, #16]
   d4b88:	f7ff fc1e 	bl	d43c8 <HAL_USB_USART_Available_Data_For_Write>
}
   d4b8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b90:	bd08      	pop	{r3, pc}

000d4b92 <_ZN9USBSerial9availableEv>:
{
   d4b92:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4b94:	7c00      	ldrb	r0, [r0, #16]
   d4b96:	f7ff fc0f 	bl	d43b8 <HAL_USB_USART_Available_Data>
}
   d4b9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b9e:	bd08      	pop	{r3, pc}

000d4ba0 <_ZN9USBSerial5writeEh>:
{
   d4ba0:	b513      	push	{r0, r1, r4, lr}
   d4ba2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4ba4:	7c00      	ldrb	r0, [r0, #16]
{
   d4ba6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4ba8:	f7ff fc0e 	bl	d43c8 <HAL_USB_USART_Available_Data_For_Write>
   d4bac:	2800      	cmp	r0, #0
   d4bae:	9901      	ldr	r1, [sp, #4]
   d4bb0:	dc01      	bgt.n	d4bb6 <_ZN9USBSerial5writeEh+0x16>
   d4bb2:	7c60      	ldrb	r0, [r4, #17]
   d4bb4:	b120      	cbz	r0, d4bc0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4bb6:	7c20      	ldrb	r0, [r4, #16]
   d4bb8:	f7ff fc16 	bl	d43e8 <HAL_USB_USART_Send_Data>
   d4bbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d4bc0:	b002      	add	sp, #8
   d4bc2:	bd10      	pop	{r4, pc}

000d4bc4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d4bc4:	7c00      	ldrb	r0, [r0, #16]
   d4bc6:	f7ff bc17 	b.w	d43f8 <HAL_USB_USART_Flush_Data>

000d4bca <_ZN9USBSerialD0Ev>:
   d4bca:	b510      	push	{r4, lr}
   d4bcc:	2114      	movs	r1, #20
   d4bce:	4604      	mov	r4, r0
   d4bd0:	f000 f9bd 	bl	d4f4e <_ZdlPvj>
   d4bd4:	4620      	mov	r0, r4
   d4bd6:	bd10      	pop	{r4, pc}

000d4bd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4bd8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4bde:	4604      	mov	r4, r0
   d4be0:	4608      	mov	r0, r1
   d4be2:	2100      	movs	r1, #0
   d4be4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4be8:	4b04      	ldr	r3, [pc, #16]	; (d4bfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4bea:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d4bec:	2301      	movs	r3, #1
  _serial = serial;
   d4bee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4bf0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d4bf2:	4611      	mov	r1, r2
   d4bf4:	f7ff fbd0 	bl	d4398 <HAL_USB_USART_Init>
}
   d4bf8:	4620      	mov	r0, r4
   d4bfa:	bd10      	pop	{r4, pc}
   d4bfc:	000d514c 	.word	0x000d514c

000d4c00 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4c00:	7c00      	ldrb	r0, [r0, #16]
   d4c02:	2200      	movs	r2, #0
   d4c04:	f7ff bbd0 	b.w	d43a8 <HAL_USB_USART_Begin>

000d4c08 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4c08:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4c0a:	2214      	movs	r2, #20
{
   d4c0c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4c0e:	2100      	movs	r1, #0
   d4c10:	f000 f9be 	bl	d4f90 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4c14:	4620      	mov	r0, r4
   d4c16:	bd10      	pop	{r4, pc}

000d4c18 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4c18:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4c1a:	4c10      	ldr	r4, [pc, #64]	; (d4c5c <_Z16_fetch_usbserialv+0x44>)
{
   d4c1c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4c1e:	a803      	add	r0, sp, #12
   d4c20:	f7ff fff2 	bl	d4c08 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4c24:	7821      	ldrb	r1, [r4, #0]
   d4c26:	f3bf 8f5b 	dmb	ish
   d4c2a:	f011 0101 	ands.w	r1, r1, #1
   d4c2e:	d111      	bne.n	d4c54 <_Z16_fetch_usbserialv+0x3c>
   d4c30:	4620      	mov	r0, r4
   d4c32:	9101      	str	r1, [sp, #4]
   d4c34:	f7ff fa31 	bl	d409a <__cxa_guard_acquire>
   d4c38:	9901      	ldr	r1, [sp, #4]
   d4c3a:	b158      	cbz	r0, d4c54 <_Z16_fetch_usbserialv+0x3c>
   d4c3c:	aa03      	add	r2, sp, #12
   d4c3e:	4808      	ldr	r0, [pc, #32]	; (d4c60 <_Z16_fetch_usbserialv+0x48>)
   d4c40:	f7ff ffca 	bl	d4bd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4c44:	4620      	mov	r0, r4
   d4c46:	f7ff fa2d 	bl	d40a4 <__cxa_guard_release>
   d4c4a:	4a06      	ldr	r2, [pc, #24]	; (d4c64 <_Z16_fetch_usbserialv+0x4c>)
   d4c4c:	4906      	ldr	r1, [pc, #24]	; (d4c68 <_Z16_fetch_usbserialv+0x50>)
   d4c4e:	4804      	ldr	r0, [pc, #16]	; (d4c60 <_Z16_fetch_usbserialv+0x48>)
   d4c50:	f000 f978 	bl	d4f44 <__aeabi_atexit>
	return _usbserial;
}
   d4c54:	4802      	ldr	r0, [pc, #8]	; (d4c60 <_Z16_fetch_usbserialv+0x48>)
   d4c56:	b008      	add	sp, #32
   d4c58:	bd10      	pop	{r4, pc}
   d4c5a:	bf00      	nop
   d4c5c:	2003e67c 	.word	0x2003e67c
   d4c60:	2003e680 	.word	0x2003e680
   d4c64:	2003e630 	.word	0x2003e630
   d4c68:	000d4b63 	.word	0x000d4b63

000d4c6c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4c6c:	2200      	movs	r2, #0
   d4c6e:	6840      	ldr	r0, [r0, #4]
   d4c70:	4611      	mov	r1, r2
   d4c72:	f7ff bc17 	b.w	d44a4 <network_ready>

000d4c76 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d4c76:	2200      	movs	r2, #0
   d4c78:	6840      	ldr	r0, [r0, #4]
   d4c7a:	4611      	mov	r1, r2
   d4c7c:	f7ff bc32 	b.w	d44e4 <network_listening>

000d4c80 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4c80:	2200      	movs	r2, #0
   d4c82:	6840      	ldr	r0, [r0, #4]
   d4c84:	4611      	mov	r1, r2
   d4c86:	f7ff bc3d 	b.w	d4504 <network_get_listen_timeout>

000d4c8a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4c8a:	6840      	ldr	r0, [r0, #4]
   d4c8c:	2200      	movs	r2, #0
   d4c8e:	f7ff bc31 	b.w	d44f4 <network_set_listen_timeout>

000d4c92 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4c92:	6840      	ldr	r0, [r0, #4]
   d4c94:	2200      	movs	r2, #0
   d4c96:	f081 0101 	eor.w	r1, r1, #1
   d4c9a:	f7ff bc1b 	b.w	d44d4 <network_listen>

000d4c9e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4c9e:	2300      	movs	r3, #0
   d4ca0:	6840      	ldr	r0, [r0, #4]
   d4ca2:	461a      	mov	r2, r3
   d4ca4:	4619      	mov	r1, r3
   d4ca6:	f7ff bc05 	b.w	d44b4 <network_on>

000d4caa <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4caa:	2200      	movs	r2, #0
   d4cac:	6840      	ldr	r0, [r0, #4]
   d4cae:	4611      	mov	r1, r2
   d4cb0:	f7ff bbe8 	b.w	d4484 <network_connecting>

000d4cb4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4cb4:	6840      	ldr	r0, [r0, #4]
   d4cb6:	2200      	movs	r2, #0
   d4cb8:	2102      	movs	r1, #2
   d4cba:	f7ff bbeb 	b.w	d4494 <network_disconnect>

000d4cbe <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4cbe:	2300      	movs	r3, #0
   d4cc0:	6840      	ldr	r0, [r0, #4]
   d4cc2:	461a      	mov	r2, r3
   d4cc4:	f7ff bbd6 	b.w	d4474 <network_connect>

000d4cc8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4cc8:	4b08      	ldr	r3, [pc, #32]	; (d4cec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4cca:	b510      	push	{r4, lr}
   d4ccc:	2428      	movs	r4, #40	; 0x28
   d4cce:	4622      	mov	r2, r4
   d4cd0:	4618      	mov	r0, r3
   d4cd2:	2100      	movs	r1, #0
   d4cd4:	f000 f95c 	bl	d4f90 <memset>
   d4cd8:	4b05      	ldr	r3, [pc, #20]	; (d4cf0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d4cda:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d4cdc:	f04f 32ff 	mov.w	r2, #4294967295
   d4ce0:	6042      	str	r2, [r0, #4]
   d4ce2:	2204      	movs	r2, #4
   d4ce4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4ce6:	4a03      	ldr	r2, [pc, #12]	; (d4cf4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4ce8:	601a      	str	r2, [r3, #0]
   d4cea:	bd10      	pop	{r4, pc}
   d4cec:	2003e69c 	.word	0x2003e69c
   d4cf0:	2003e694 	.word	0x2003e694
   d4cf4:	000d517c 	.word	0x000d517c

000d4cf8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d4cf8:	4770      	bx	lr

000d4cfa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4cfa:	7441      	strb	r1, [r0, #17]
}
   d4cfc:	4770      	bx	lr

000d4cfe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d4cfe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d4d00:	7c00      	ldrb	r0, [r0, #16]
   d4d02:	f7ff fb41 	bl	d4388 <hal_usart_available_data_for_write>
}
   d4d06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d0a:	bd08      	pop	{r3, pc}

000d4d0c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4d0c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d4d0e:	7c00      	ldrb	r0, [r0, #16]
   d4d10:	f7ff fb1a 	bl	d4348 <hal_usart_available>
}
   d4d14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d18:	bd08      	pop	{r3, pc}

000d4d1a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4d1a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d4d1c:	7c00      	ldrb	r0, [r0, #16]
   d4d1e:	f7ff fb23 	bl	d4368 <hal_usart_peek>
}
   d4d22:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4d26:	bd08      	pop	{r3, pc}

000d4d28 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4d28:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d4d2a:	7c00      	ldrb	r0, [r0, #16]
   d4d2c:	f7ff fb14 	bl	d4358 <hal_usart_read>
}
   d4d30:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4d34:	bd08      	pop	{r3, pc}

000d4d36 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d4d36:	7c00      	ldrb	r0, [r0, #16]
   d4d38:	f7ff bb1e 	b.w	d4378 <hal_usart_flush>

000d4d3c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4d3e:	7c45      	ldrb	r5, [r0, #17]
{
   d4d40:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4d42:	b12d      	cbz	r5, d4d50 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d4d44:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4d46:	b003      	add	sp, #12
   d4d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d4d4c:	f7ff baf4 	b.w	d4338 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4d50:	7c00      	ldrb	r0, [r0, #16]
   d4d52:	9101      	str	r1, [sp, #4]
   d4d54:	f7ff fb18 	bl	d4388 <hal_usart_available_data_for_write>
   d4d58:	2800      	cmp	r0, #0
   d4d5a:	9901      	ldr	r1, [sp, #4]
   d4d5c:	dcf2      	bgt.n	d4d44 <_ZN11USARTSerial5writeEh+0x8>
}
   d4d5e:	4628      	mov	r0, r5
   d4d60:	b003      	add	sp, #12
   d4d62:	bd30      	pop	{r4, r5, pc}

000d4d64 <_ZN11USARTSerialD0Ev>:
   d4d64:	b510      	push	{r4, lr}
   d4d66:	2114      	movs	r1, #20
   d4d68:	4604      	mov	r4, r0
   d4d6a:	f000 f8f0 	bl	d4f4e <_ZdlPvj>
   d4d6e:	4620      	mov	r0, r4
   d4d70:	bd10      	pop	{r4, pc}
	...

000d4d74 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d4d74:	b510      	push	{r4, lr}
   d4d76:	f04f 0c00 	mov.w	ip, #0
   d4d7a:	4604      	mov	r4, r0
   d4d7c:	4608      	mov	r0, r1
   d4d7e:	4611      	mov	r1, r2
   d4d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4d84:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d4d88:	4a04      	ldr	r2, [pc, #16]	; (d4d9c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d4d8a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d4d8c:	2201      	movs	r2, #1
  _serial = serial;
   d4d8e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4d90:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d4d92:	461a      	mov	r2, r3
   d4d94:	f7ff fac8 	bl	d4328 <hal_usart_init>
}
   d4d98:	4620      	mov	r0, r4
   d4d9a:	bd10      	pop	{r4, pc}
   d4d9c:	000d51b0 	.word	0x000d51b0

000d4da0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4da0:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4da2:	4c0e      	ldr	r4, [pc, #56]	; (d4ddc <_Z22__fetch_global_Serial1v+0x3c>)
   d4da4:	7821      	ldrb	r1, [r4, #0]
   d4da6:	f3bf 8f5b 	dmb	ish
   d4daa:	f011 0101 	ands.w	r1, r1, #1
   d4dae:	d112      	bne.n	d4dd6 <_Z22__fetch_global_Serial1v+0x36>
   d4db0:	4620      	mov	r0, r4
   d4db2:	9101      	str	r1, [sp, #4]
   d4db4:	f7ff f971 	bl	d409a <__cxa_guard_acquire>
   d4db8:	9901      	ldr	r1, [sp, #4]
   d4dba:	b160      	cbz	r0, d4dd6 <_Z22__fetch_global_Serial1v+0x36>
   d4dbc:	4a08      	ldr	r2, [pc, #32]	; (d4de0 <_Z22__fetch_global_Serial1v+0x40>)
   d4dbe:	4b09      	ldr	r3, [pc, #36]	; (d4de4 <_Z22__fetch_global_Serial1v+0x44>)
   d4dc0:	4809      	ldr	r0, [pc, #36]	; (d4de8 <_Z22__fetch_global_Serial1v+0x48>)
   d4dc2:	f7ff ffd7 	bl	d4d74 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d4dc6:	4620      	mov	r0, r4
   d4dc8:	f7ff f96c 	bl	d40a4 <__cxa_guard_release>
   d4dcc:	4a07      	ldr	r2, [pc, #28]	; (d4dec <_Z22__fetch_global_Serial1v+0x4c>)
   d4dce:	4908      	ldr	r1, [pc, #32]	; (d4df0 <_Z22__fetch_global_Serial1v+0x50>)
   d4dd0:	4805      	ldr	r0, [pc, #20]	; (d4de8 <_Z22__fetch_global_Serial1v+0x48>)
   d4dd2:	f000 f8b7 	bl	d4f44 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4dd6:	4804      	ldr	r0, [pc, #16]	; (d4de8 <_Z22__fetch_global_Serial1v+0x48>)
   d4dd8:	b002      	add	sp, #8
   d4dda:	bd10      	pop	{r4, pc}
   d4ddc:	2003e6c4 	.word	0x2003e6c4
   d4de0:	2003e6c8 	.word	0x2003e6c8
   d4de4:	2003e74c 	.word	0x2003e74c
   d4de8:	2003e7d0 	.word	0x2003e7d0
   d4dec:	2003e630 	.word	0x2003e630
   d4df0:	000d4cf9 	.word	0x000d4cf9

000d4df4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4df4:	2300      	movs	r3, #0
   d4df6:	6840      	ldr	r0, [r0, #4]
   d4df8:	461a      	mov	r2, r3
   d4dfa:	f7ff bb3b 	b.w	d4474 <network_connect>

000d4dfe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4dfe:	6840      	ldr	r0, [r0, #4]
   d4e00:	2200      	movs	r2, #0
   d4e02:	2102      	movs	r1, #2
   d4e04:	f7ff bb46 	b.w	d4494 <network_disconnect>

000d4e08 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4e08:	2200      	movs	r2, #0
   d4e0a:	6840      	ldr	r0, [r0, #4]
   d4e0c:	4611      	mov	r1, r2
   d4e0e:	f7ff bb39 	b.w	d4484 <network_connecting>

000d4e12 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4e12:	2200      	movs	r2, #0
   d4e14:	6840      	ldr	r0, [r0, #4]
   d4e16:	4611      	mov	r1, r2
   d4e18:	f7ff bb44 	b.w	d44a4 <network_ready>

000d4e1c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4e1c:	2300      	movs	r3, #0
   d4e1e:	6840      	ldr	r0, [r0, #4]
   d4e20:	461a      	mov	r2, r3
   d4e22:	4619      	mov	r1, r3
   d4e24:	f7ff bb46 	b.w	d44b4 <network_on>

000d4e28 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4e28:	2300      	movs	r3, #0
   d4e2a:	6840      	ldr	r0, [r0, #4]
   d4e2c:	461a      	mov	r2, r3
   d4e2e:	4619      	mov	r1, r3
   d4e30:	f7ff bb48 	b.w	d44c4 <network_off>

000d4e34 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4e34:	6840      	ldr	r0, [r0, #4]
   d4e36:	2200      	movs	r2, #0
   d4e38:	f081 0101 	eor.w	r1, r1, #1
   d4e3c:	f7ff bb4a 	b.w	d44d4 <network_listen>

000d4e40 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4e40:	6840      	ldr	r0, [r0, #4]
   d4e42:	2200      	movs	r2, #0
   d4e44:	f7ff bb56 	b.w	d44f4 <network_set_listen_timeout>

000d4e48 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4e48:	2200      	movs	r2, #0
   d4e4a:	6840      	ldr	r0, [r0, #4]
   d4e4c:	4611      	mov	r1, r2
   d4e4e:	f7ff bb59 	b.w	d4504 <network_get_listen_timeout>

000d4e52 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4e52:	2200      	movs	r2, #0
   d4e54:	6840      	ldr	r0, [r0, #4]
   d4e56:	4611      	mov	r1, r2
   d4e58:	f7ff bb44 	b.w	d44e4 <network_listening>

000d4e5c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e60:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4e62:	b095      	sub	sp, #84	; 0x54
   d4e64:	4616      	mov	r6, r2
   d4e66:	460d      	mov	r5, r1
   d4e68:	4607      	mov	r7, r0
    IPAddress addr;
   d4e6a:	f7ff fe41 	bl	d4af0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4e6e:	4621      	mov	r1, r4
   d4e70:	2218      	movs	r2, #24
   d4e72:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4e74:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4e76:	f000 f88b 	bl	d4f90 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4e7a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4e7c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4e80:	4621      	mov	r1, r4
   d4e82:	466b      	mov	r3, sp
   d4e84:	aa0c      	add	r2, sp, #48	; 0x30
   d4e86:	4630      	mov	r0, r6
   d4e88:	f7ff fa1e 	bl	d42c8 <netdb_getaddrinfo>
    if (!r) {
   d4e8c:	4604      	mov	r4, r0
   d4e8e:	2800      	cmp	r0, #0
   d4e90:	d146      	bne.n	d4f20 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4e92:	4602      	mov	r2, r0
   d4e94:	2101      	movs	r1, #1
   d4e96:	6868      	ldr	r0, [r5, #4]
   d4e98:	f7ff fb04 	bl	d44a4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e9c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4e9e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4ea0:	4622      	mov	r2, r4
   d4ea2:	6868      	ldr	r0, [r5, #4]
   d4ea4:	f7ff fafe 	bl	d44a4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4ea8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4eaa:	4681      	mov	r9, r0
        bool ok = false;
   d4eac:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4eae:	2e00      	cmp	r6, #0
   d4eb0:	d036      	beq.n	d4f20 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4eb2:	2900      	cmp	r1, #0
   d4eb4:	d134      	bne.n	d4f20 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4eb6:	6873      	ldr	r3, [r6, #4]
   d4eb8:	2b02      	cmp	r3, #2
   d4eba:	d003      	beq.n	d4ec4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4ebc:	2b0a      	cmp	r3, #10
   d4ebe:	d00b      	beq.n	d4ed8 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4ec0:	69f6      	ldr	r6, [r6, #28]
   d4ec2:	e7f4      	b.n	d4eae <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4ec4:	f1b8 0f00 	cmp.w	r8, #0
   d4ec8:	d004      	beq.n	d4ed4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4eca:	6971      	ldr	r1, [r6, #20]
   d4ecc:	4638      	mov	r0, r7
   d4ece:	3104      	adds	r1, #4
   d4ed0:	f7ff fe3b 	bl	d4b4a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d4ed4:	4641      	mov	r1, r8
   d4ed6:	e7f3      	b.n	d4ec0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4ed8:	f1b9 0f00 	cmp.w	r9, #0
   d4edc:	d101      	bne.n	d4ee2 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4ede:	4649      	mov	r1, r9
   d4ee0:	e7ee      	b.n	d4ec0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4ee2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4ee4:	2210      	movs	r2, #16
   d4ee6:	a801      	add	r0, sp, #4
   d4ee8:	f000 f852 	bl	d4f90 <memset>
                    a.v = 6;
   d4eec:	2306      	movs	r3, #6
   d4eee:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4ef2:	ad01      	add	r5, sp, #4
   d4ef4:	f104 0308 	add.w	r3, r4, #8
   d4ef8:	3418      	adds	r4, #24
   d4efa:	6818      	ldr	r0, [r3, #0]
   d4efc:	6859      	ldr	r1, [r3, #4]
   d4efe:	462a      	mov	r2, r5
   d4f00:	c203      	stmia	r2!, {r0, r1}
   d4f02:	3308      	adds	r3, #8
   d4f04:	42a3      	cmp	r3, r4
   d4f06:	4615      	mov	r5, r2
   d4f08:	d1f7      	bne.n	d4efa <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d4f0a:	a901      	add	r1, sp, #4
   d4f0c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d4f0e:	ad07      	add	r5, sp, #28
   d4f10:	f7ff fdfc 	bl	d4b0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4f16:	1d3c      	adds	r4, r7, #4
   d4f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4f1a:	682b      	ldr	r3, [r5, #0]
   d4f1c:	7023      	strb	r3, [r4, #0]
   d4f1e:	e7de      	b.n	d4ede <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4f20:	9800      	ldr	r0, [sp, #0]
   d4f22:	f7ff f9c9 	bl	d42b8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4f26:	4638      	mov	r0, r7
   d4f28:	b015      	add	sp, #84	; 0x54
   d4f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4f30 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4f30:	4b02      	ldr	r3, [pc, #8]	; (d4f3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4f32:	4a03      	ldr	r2, [pc, #12]	; (d4f40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4f34:	601a      	str	r2, [r3, #0]
   d4f36:	2200      	movs	r2, #0
   d4f38:	605a      	str	r2, [r3, #4]

} // spark
   d4f3a:	4770      	bx	lr
   d4f3c:	2003e7e4 	.word	0x2003e7e4
   d4f40:	000d51e0 	.word	0x000d51e0

000d4f44 <__aeabi_atexit>:
   d4f44:	460b      	mov	r3, r1
   d4f46:	4601      	mov	r1, r0
   d4f48:	4618      	mov	r0, r3
   d4f4a:	f000 b805 	b.w	d4f58 <__cxa_atexit>

000d4f4e <_ZdlPvj>:
   d4f4e:	f7ff b8a2 	b.w	d4096 <_ZdlPv>

000d4f52 <_ZnwjRKSt9nothrow_t>:
   d4f52:	f7ff b89e 	b.w	d4092 <_Znwj>
	...

000d4f58 <__cxa_atexit>:
   d4f58:	b510      	push	{r4, lr}
   d4f5a:	4c05      	ldr	r4, [pc, #20]	; (d4f70 <__cxa_atexit+0x18>)
   d4f5c:	4613      	mov	r3, r2
   d4f5e:	b12c      	cbz	r4, d4f6c <__cxa_atexit+0x14>
   d4f60:	460a      	mov	r2, r1
   d4f62:	4601      	mov	r1, r0
   d4f64:	2002      	movs	r0, #2
   d4f66:	f3af 8000 	nop.w
   d4f6a:	bd10      	pop	{r4, pc}
   d4f6c:	4620      	mov	r0, r4
   d4f6e:	e7fc      	b.n	d4f6a <__cxa_atexit+0x12>
   d4f70:	00000000 	.word	0x00000000

000d4f74 <memcpy>:
   d4f74:	440a      	add	r2, r1
   d4f76:	4291      	cmp	r1, r2
   d4f78:	f100 33ff 	add.w	r3, r0, #4294967295
   d4f7c:	d100      	bne.n	d4f80 <memcpy+0xc>
   d4f7e:	4770      	bx	lr
   d4f80:	b510      	push	{r4, lr}
   d4f82:	f811 4b01 	ldrb.w	r4, [r1], #1
   d4f86:	f803 4f01 	strb.w	r4, [r3, #1]!
   d4f8a:	4291      	cmp	r1, r2
   d4f8c:	d1f9      	bne.n	d4f82 <memcpy+0xe>
   d4f8e:	bd10      	pop	{r4, pc}

000d4f90 <memset>:
   d4f90:	4402      	add	r2, r0
   d4f92:	4603      	mov	r3, r0
   d4f94:	4293      	cmp	r3, r2
   d4f96:	d100      	bne.n	d4f9a <memset+0xa>
   d4f98:	4770      	bx	lr
   d4f9a:	f803 1b01 	strb.w	r1, [r3], #1
   d4f9e:	e7f9      	b.n	d4f94 <memset+0x4>

000d4fa0 <srand>:
   d4fa0:	b538      	push	{r3, r4, r5, lr}
   d4fa2:	4b0d      	ldr	r3, [pc, #52]	; (d4fd8 <srand+0x38>)
   d4fa4:	681d      	ldr	r5, [r3, #0]
   d4fa6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d4fa8:	4604      	mov	r4, r0
   d4faa:	b97b      	cbnz	r3, d4fcc <srand+0x2c>
   d4fac:	2018      	movs	r0, #24
   d4fae:	f7ff fad1 	bl	d4554 <malloc>
   d4fb2:	4a0a      	ldr	r2, [pc, #40]	; (d4fdc <srand+0x3c>)
   d4fb4:	4b0a      	ldr	r3, [pc, #40]	; (d4fe0 <srand+0x40>)
   d4fb6:	63a8      	str	r0, [r5, #56]	; 0x38
   d4fb8:	e9c0 2300 	strd	r2, r3, [r0]
   d4fbc:	4b09      	ldr	r3, [pc, #36]	; (d4fe4 <srand+0x44>)
   d4fbe:	6083      	str	r3, [r0, #8]
   d4fc0:	230b      	movs	r3, #11
   d4fc2:	8183      	strh	r3, [r0, #12]
   d4fc4:	2201      	movs	r2, #1
   d4fc6:	2300      	movs	r3, #0
   d4fc8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d4fcc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d4fce:	2200      	movs	r2, #0
   d4fd0:	611c      	str	r4, [r3, #16]
   d4fd2:	615a      	str	r2, [r3, #20]
   d4fd4:	bd38      	pop	{r3, r4, r5, pc}
   d4fd6:	bf00      	nop
   d4fd8:	2003e5cc 	.word	0x2003e5cc
   d4fdc:	abcd330e 	.word	0xabcd330e
   d4fe0:	e66d1234 	.word	0xe66d1234
   d4fe4:	0005deec 	.word	0x0005deec

000d4fe8 <strlen>:
   d4fe8:	4603      	mov	r3, r0
   d4fea:	f813 2b01 	ldrb.w	r2, [r3], #1
   d4fee:	2a00      	cmp	r2, #0
   d4ff0:	d1fb      	bne.n	d4fea <strlen+0x2>
   d4ff2:	1a18      	subs	r0, r3, r0
   d4ff4:	3801      	subs	r0, #1
   d4ff6:	4770      	bx	lr

000d4ff8 <dynalib_user>:
   d4ff8:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5008:	0000 0000 655a 6f72 7320 656c 7065 7420     ....Zero sleep t
   d5018:	6d69 2c65 6120 6a64 7375 6974 676e 7420     ime, adjusting t
   d5028:	206f 3031 7320 6365 6e6f 7364 7320 656c     o 10 seconds sle
   d5038:	7065 7420 6d69 2e65 4700 696f 676e 7420     ep time..Going t
   d5048:	206f 6c73 6565 2070 6f66 2072 6425 6d20     o sleep for %d m
   d5058:	6e69 7475 7365 2520 2064 6573 6f63 646e     inutes %d second
   d5068:	2e73 3d00 3d3d 203d 4f4c 504f 3d20 3d3d     s..==== LOOP ===
   d5078:	003d 7473 7261 0074 6150 7472 6369 656c     =.start.Particle
   d5088:	5220 7465 7275 656e 3a64 2520 0069 7574      Returned: %i.tu
   d5098:	6e72 6520 6576 7972 6874 6e69 2067 666f     rn everything of
   d50a8:	0066 0000                                   f...

000d50ac <_ZTVN5spark13EthernetClassE>:
	...
   d50b4:	45f3 000d 45e9 000d 45df 000d 45d5 000d     .E...E...E...E..
   d50c4:	45c9 000d 45bd 000d 45b1 000d 45a9 000d     .E...E...E...E..
   d50d4:	459f 000d 4595 000d 4e5d 000d 6977 6972     .E...E..]N..wiri
   d50e4:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   d50f4:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   d5104:	6920 766e 6c61 6469 002e 7061 0070 5925      invalid..app.%Y
   d5114:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
   d5124:	007a 7361 7463 6d69 0065 0000               z.asctime...

000d5130 <_ZTV9IPAddress>:
	...
   d5138:	4a8b 000d 4a7b 000d 4a7d 000d               .J..{J..}J..

000d5144 <_ZTV9USBSerial>:
	...
   d514c:	4b63 000d 4bcb 000d 4ba1 000d 47b9 000d     cK...K...K...G..
   d515c:	4b93 000d 4b65 000d 4b75 000d 4bc5 000d     .K..eK..uK...K..
   d516c:	4b85 000d 4b5f 000d                         .K.._K..

000d5174 <_ZTVN5spark13CellularClassE>:
	...
   d517c:	4cbf 000d 4cb5 000d 4cab 000d 4c6d 000d     .L...L...L..mL..
   d518c:	4c9f 000d 40d7 000d 4c93 000d 4c8b 000d     .L...@...L...L..
   d519c:	4c81 000d 4c77 000d 4e5d 000d               .L..wL..]N..

000d51a8 <_ZTV11USARTSerial>:
	...
   d51b0:	4cf9 000d 4d65 000d 4d3d 000d 47b9 000d     .L..eM..=M...G..
   d51c0:	4d0d 000d 4d29 000d 4d1b 000d 4d37 000d     .M..)M...M..7M..
   d51d0:	4cfb 000d 4cff 000d                         .L...L..

000d51d8 <_ZTVN5spark12NetworkClassE>:
	...
   d51e0:	4df5 000d 4dff 000d 4e09 000d 4e13 000d     .M...M...N...N..
   d51f0:	4e1d 000d 4e29 000d 4e35 000d 4e41 000d     .N..)N..5N..AN..
   d5200:	4e49 000d 4e53 000d 4e5d 000d               IN..SN..]N..

000d520c <_ZSt7nothrow>:
	...

000d520d <link_const_variable_data_end>:
   d520d:	00          	.byte	0x00
	...

000d5210 <link_constructors_location>:
   d5210:	000d4285 	.word	0x000d4285
   d5214:	000d45fd 	.word	0x000d45fd
   d5218:	000d4745 	.word	0x000d4745
   d521c:	000d4791 	.word	0x000d4791
   d5220:	000d48cd 	.word	0x000d48cd
   d5224:	000d48dd 	.word	0x000d48dd
   d5228:	000d4915 	.word	0x000d4915
   d522c:	000d4cc9 	.word	0x000d4cc9
   d5230:	000d4f31 	.word	0x000d4f31

000d5234 <link_constructors_end>:
	...
