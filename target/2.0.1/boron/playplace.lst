
c:/Users/karaw/Documents/aquarealtime/resdev/software/playplace/target/2.0.1/boron/playplace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001d14  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5d30  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e5c4  000d5d34  0001e5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001c4  2003e62c  2003e62c  0002e62c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5d9c  000d5d9c  00025d9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5dc4  000d5dc4  00025dc4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f7aff  00000000  00000000  00025dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010ed7  00000000  00000000  0011d8c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00026ac0  00000000  00000000  0012e79e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000020e0  00000000  00000000  0015525e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006e10  00000000  00000000  0015733e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00031e31  00000000  00000000  0015e14e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002bd4f  00000000  00000000  0018ff7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105d6a  00000000  00000000  001bbcce  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000059b8  00000000  00000000  002c1a38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fca3 	bl	d5978 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fcab 	bl	d5994 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5c4 	.word	0x2003e5c4
   d4048:	000d5d34 	.word	0x000d5d34
   d404c:	2003e62c 	.word	0x2003e62c
   d4050:	2003e62c 	.word	0x2003e62c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 ff17 	bl	d4e90 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5d00 	.word	0x000d5d00
   d407c:	000d5d24 	.word	0x000d5d24

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b83d 	b.w	d40fe <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f931 	bl	d42ec <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bec1 	b.w	d4e14 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bb39 	b.w	d4708 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 bb3f 	b.w	d4718 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40aa:	b510      	push	{r4, lr}
   d40ac:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40ae:	6800      	ldr	r0, [r0, #0]
   d40b0:	b108      	cbz	r0, d40b6 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b2:	f000 fb31 	bl	d4718 <free>
class SystemClass {
   d40b6:	4620      	mov	r0, r4
   d40b8:	bd10      	pop	{r4, pc}

000d40ba <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ba:	b40e      	push	{r1, r2, r3}
   d40bc:	b503      	push	{r0, r1, lr}
   d40be:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40c0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40c2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40c6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40c8:	f000 fe0d 	bl	d4ce6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40cc:	b002      	add	sp, #8
   d40ce:	f85d eb04 	ldr.w	lr, [sp], #4
   d40d2:	b003      	add	sp, #12
   d40d4:	4770      	bx	lr

000d40d6 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40d6:	b40e      	push	{r1, r2, r3}
   d40d8:	b503      	push	{r0, r1, lr}
   d40da:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d40dc:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40de:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40e2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d40e4:	f000 fdff 	bl	d4ce6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40e8:	b002      	add	sp, #8
   d40ea:	f85d eb04 	ldr.w	lr, [sp], #4
   d40ee:	b003      	add	sp, #12
   d40f0:	4770      	bx	lr

000d40f2 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d40f2:	2300      	movs	r3, #0
   d40f4:	6840      	ldr	r0, [r0, #4]
   d40f6:	461a      	mov	r2, r3
   d40f8:	4619      	mov	r1, r3
   d40fa:	f000 baad 	b.w	d4658 <network_off>

000d40fe <setup>:
#define CELL_CONNECT_SECONDS 20 // time to attempt to connect to cellular
#define CLOUD_CONNECT_SECONDS 20 // time to attempt to connect cloud
#define CLOUD_WAIT 30

// setup() runs once, when the device is first turned on.
void setup() {
   d40fe:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d4100:	f001 fa76 	bl	d55f0 <_Z16_fetch_usbserialv>

}
   d4104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
   d4108:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d410c:	f001 ba64 	b.w	d55d8 <_ZN9USBSerial5beginEl>

000d4110 <_Z8ULPSleepi>:
  ULPSleep(60);
}

// Sleep ULP way
int ULPSleep(int seconds)
{
   d4110:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (seconds <= 0)
   d4112:	1e05      	subs	r5, r0, #0
{
   d4114:	b08b      	sub	sp, #44	; 0x2c
  if (seconds <= 0)
   d4116:	dc05      	bgt.n	d4124 <_Z8ULPSleepi+0x14>
  {
    seconds = 10;
    Serial.printlnf("Zero sleep time, adjusting to 10 seconds sleep time.");
   d4118:	f001 fa6a 	bl	d55f0 <_Z16_fetch_usbserialv>
   d411c:	4924      	ldr	r1, [pc, #144]	; (d41b0 <_Z8ULPSleepi+0xa0>)
   d411e:	f7ff ffda 	bl	d40d6 <_ZN5Print8printlnfEPKcz>
    seconds = 10;
   d4122:	250a      	movs	r5, #10
  }
  Serial.printlnf("Going to sleep for %d minutes %d seconds.", seconds / 60, seconds % 60);
   d4124:	f001 fa64 	bl	d55f0 <_Z16_fetch_usbserialv>
   d4128:	233c      	movs	r3, #60	; 0x3c
   d412a:	4922      	ldr	r1, [pc, #136]	; (d41b4 <_Z8ULPSleepi+0xa4>)
   d412c:	fbb5 f2f3 	udiv	r2, r5, r3
   d4130:	fb03 5312 	mls	r3, r3, r2, r5
   d4134:	f7ff ffcf 	bl	d40d6 <_ZN5Print8printlnfEPKcz>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d4138:	ab05      	add	r3, sp, #20
   d413a:	9304      	str	r3, [sp, #16]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d413c:	2301      	movs	r3, #1
   d413e:	2600      	movs	r6, #0
   d4140:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        config_.size = sizeof(hal_sleep_config_t);
   d4144:	4f1c      	ldr	r7, [pc, #112]	; (d41b8 <_Z8ULPSleepi+0xa8>)
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4146:	491d      	ldr	r1, [pc, #116]	; (d41bc <_Z8ULPSleepi+0xac>)
              valid_(true) {
   d4148:	f8ad 6019 	strh.w	r6, [sp, #25]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d414c:	2302      	movs	r3, #2
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d414e:	2010      	movs	r0, #16
        config_.wakeup_sources = nullptr;
   d4150:	e9cd 6607 	strd	r6, r6, [sp, #28]
              valid_(true) {
   d4154:	f88d 601b 	strb.w	r6, [sp, #27]
        config_.size = sizeof(hal_sleep_config_t);
   d4158:	9705      	str	r7, [sp, #20]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d415a:	f88d 3018 	strb.w	r3, [sp, #24]
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d415e:	f001 fbf8 	bl	d5952 <_ZnwjRKSt9nothrow_t>
   d4162:	4604      	mov	r4, r0
   d4164:	b1e8      	cbz	r0, d41a2 <_Z8ULPSleepi+0x92>
   d4166:	2210      	movs	r2, #16
   d4168:	4631      	mov	r1, r6
   d416a:	f001 fc13 	bl	d5994 <memset>
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d416e:	2304      	movs	r3, #4
  SystemSleepConfiguration config;
  config.mode(SystemSleepMode::ULTRA_LOW_POWER)
        .duration(seconds * 1000);  // Takes msec
   d4170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4174:	80a3      	strh	r3, [r4, #4]
   d4176:	4345      	muls	r5, r0
            wakeupSource->base.next = config_.wakeup_sources;
   d4178:	9b08      	ldr	r3, [sp, #32]
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d417a:	6027      	str	r7, [r4, #0]
            wakeupSource->base.next = config_.wakeup_sources;
   d417c:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   d417e:	60e5      	str	r5, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4180:	9408      	str	r4, [sp, #32]
  System.sleep(config);
   d4182:	a801      	add	r0, sp, #4
   d4184:	a904      	add	r1, sp, #16
   d4186:	f000 fb6b 	bl	d4860 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d418a:	9801      	ldr	r0, [sp, #4]
   d418c:	b108      	cbz	r0, d4192 <_Z8ULPSleepi+0x82>
            free(wakeupSource_);
   d418e:	f000 fac3 	bl	d4718 <free>
        auto wakeupSource = config_.wakeup_sources;
   d4192:	9808      	ldr	r0, [sp, #32]
        while (wakeupSource) {
   d4194:	b140      	cbz	r0, d41a8 <_Z8ULPSleepi+0x98>
            auto next = wakeupSource->next;
   d4196:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
   d4198:	210c      	movs	r1, #12
   d419a:	f001 fbd8 	bl	d594e <_ZdlPvj>
            wakeupSource = next;
   d419e:	4620      	mov	r0, r4
        while (wakeupSource) {
   d41a0:	e7f8      	b.n	d4194 <_Z8ULPSleepi+0x84>
                valid_ = false;
   d41a2:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
                return *this;
   d41a6:	e7ec      	b.n	d4182 <_Z8ULPSleepi+0x72>
  return 1;
}
   d41a8:	2001      	movs	r0, #1
   d41aa:	b00b      	add	sp, #44	; 0x2c
   d41ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d41ae:	bf00      	nop
   d41b0:	000d5a5c 	.word	0x000d5a5c
   d41b4:	000d5a91 	.word	0x000d5a91
   d41b8:	00030010 	.word	0x00030010
   d41bc:	000d5cfc 	.word	0x000d5cfc

000d41c0 <_Z13connectToCelli>:

// Connect to cellular
// Returns 1 if fail, 0 if success. Pass it seconds
int connectToCell(int timeoutSec)
{
   d41c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        network_on(*this, 0, 0, NULL);
   d41c4:	4d23      	ldr	r5, [pc, #140]	; (d4254 <_Z13connectToCelli+0x94>)
  Cellular.connect();
  Serial.printf("  - Cell Connect");
  while (Cellular.ready() == false)
  {
    secondCounter ++;
    Serial.printlnf("%i",secondCounter);
   d41c6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d426c <_Z13connectToCelli+0xac>
{
   d41ca:	4607      	mov	r7, r0
  Serial.printf("Connecting to cellular ... ");
   d41cc:	f001 fa10 	bl	d55f0 <_Z16_fetch_usbserialv>
   d41d0:	4921      	ldr	r1, [pc, #132]	; (d4258 <_Z13connectToCelli+0x98>)
   d41d2:	f7ff ff72 	bl	d40ba <_ZN5Print6printfEPKcz>
   d41d6:	2300      	movs	r3, #0
   d41d8:	461a      	mov	r2, r3
   d41da:	4619      	mov	r1, r3
   d41dc:	6868      	ldr	r0, [r5, #4]
   d41de:	f000 fa33 	bl	d4648 <network_on>
  Serial.printf("Cell On");
   d41e2:	f001 fa05 	bl	d55f0 <_Z16_fetch_usbserialv>
   d41e6:	491d      	ldr	r1, [pc, #116]	; (d425c <_Z13connectToCelli+0x9c>)
   d41e8:	f7ff ff67 	bl	d40ba <_ZN5Print6printfEPKcz>
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d41ec:	2300      	movs	r3, #0
   d41ee:	4619      	mov	r1, r3
   d41f0:	461a      	mov	r2, r3
   d41f2:	6868      	ldr	r0, [r5, #4]
   d41f4:	f000 fa08 	bl	d4608 <network_connect>
  Serial.printf("  - Cell Connect");
   d41f8:	f001 f9fa 	bl	d55f0 <_Z16_fetch_usbserialv>
   d41fc:	4918      	ldr	r1, [pc, #96]	; (d4260 <_Z13connectToCelli+0xa0>)
   d41fe:	f7ff ff5c 	bl	d40ba <_ZN5Print6printfEPKcz>
  int secondCounter = 0;
   d4202:	2400      	movs	r4, #0
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4204:	2200      	movs	r2, #0
   d4206:	6868      	ldr	r0, [r5, #4]
   d4208:	4611      	mov	r1, r2
   d420a:	f000 fa15 	bl	d4638 <network_ready>
  while (Cellular.ready() == false)
   d420e:	4606      	mov	r6, r0
   d4210:	b9c8      	cbnz	r0, d4246 <_Z13connectToCelli+0x86>
    secondCounter ++;
   d4212:	3401      	adds	r4, #1
    Serial.printlnf("%i",secondCounter);
   d4214:	f001 f9ec 	bl	d55f0 <_Z16_fetch_usbserialv>
   d4218:	4622      	mov	r2, r4
   d421a:	4641      	mov	r1, r8
   d421c:	f7ff ff5b 	bl	d40d6 <_ZN5Print8printlnfEPKcz>
    if (secondCounter >= timeoutSec)
   d4220:	42bc      	cmp	r4, r7
   d4222:	db0b      	blt.n	d423c <_Z13connectToCelli+0x7c>
    {
      Serial.printlnf("FAILED.  Couldn't connect to cellular.");
   d4224:	f001 f9e4 	bl	d55f0 <_Z16_fetch_usbserialv>
   d4228:	490e      	ldr	r1, [pc, #56]	; (d4264 <_Z13connectToCelli+0xa4>)
   d422a:	f7ff ff54 	bl	d40d6 <_ZN5Print8printlnfEPKcz>
      Cellular.off();
   d422e:	4809      	ldr	r0, [pc, #36]	; (d4254 <_Z13connectToCelli+0x94>)
   d4230:	f7ff ff5f 	bl	d40f2 <_ZN5spark13CellularClass3offEv>
      return 0;
   d4234:	4634      	mov	r4, r6
    }
    delay(1000);
  }
  Serial.printlnf("OK.");
  return secondCounter;
}
   d4236:	4620      	mov	r0, r4
   d4238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    delay(1000);
   d423c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4240:	f000 fd94 	bl	d4d6c <delay>
  while (Cellular.ready() == false)
   d4244:	e7de      	b.n	d4204 <_Z13connectToCelli+0x44>
  Serial.printlnf("OK.");
   d4246:	f001 f9d3 	bl	d55f0 <_Z16_fetch_usbserialv>
   d424a:	4907      	ldr	r1, [pc, #28]	; (d4268 <_Z13connectToCelli+0xa8>)
   d424c:	f7ff ff43 	bl	d40d6 <_ZN5Print8printlnfEPKcz>
  return secondCounter;
   d4250:	e7f1      	b.n	d4236 <_Z13connectToCelli+0x76>
   d4252:	bf00      	nop
   d4254:	2003e694 	.word	0x2003e694
   d4258:	000d5abb 	.word	0x000d5abb
   d425c:	000d5ad7 	.word	0x000d5ad7
   d4260:	000d5adf 	.word	0x000d5adf
   d4264:	000d5af3 	.word	0x000d5af3
   d4268:	000d5b1a 	.word	0x000d5b1a
   d426c:	000d5af0 	.word	0x000d5af0

000d4270 <_Z14connectToCloudi>:

//
int connectToCloud(int timeoutSec)
{
   d4270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4272:	4606      	mov	r6, r0
  Serial.printf("Connecting to cloud ... ");
   d4274:	f001 f9bc 	bl	d55f0 <_Z16_fetch_usbserialv>
   d4278:	4917      	ldr	r1, [pc, #92]	; (d42d8 <_Z14connectToCloudi+0x68>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d427a:	4f18      	ldr	r7, [pc, #96]	; (d42dc <_Z14connectToCloudi+0x6c>)
   d427c:	f7ff ff1d 	bl	d40ba <_ZN5Print6printfEPKcz>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4280:	f000 fa1a 	bl	d46b8 <spark_cloud_flag_connect>
  int secondCounter = 0;
   d4284:	2400      	movs	r4, #0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4286:	f000 fa1f 	bl	d46c8 <spark_cloud_flag_connected>
  Particle.connect();
  while (Particle.connected() == false)
   d428a:	4605      	mov	r5, r0
   d428c:	b9e8      	cbnz	r0, d42ca <_Z14connectToCloudi+0x5a>
		return HAL_Timer_Get_Milli_Seconds();
   d428e:	f000 f8e5 	bl	d445c <HAL_Timer_Get_Milli_Seconds>
  {
    secondCounter ++;
   d4292:	3401      	adds	r4, #1
		last_checkin = current_time();
   d4294:	6038      	str	r0, [r7, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4296:	f000 fa07 	bl	d46a8 <spark_process>
    Particle.process();
    if (secondCounter >= timeoutSec)
   d429a:	42b4      	cmp	r4, r6
   d429c:	db10      	blt.n	d42c0 <_Z14connectToCloudi+0x50>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d429e:	4c10      	ldr	r4, [pc, #64]	; (d42e0 <_Z14connectToCloudi+0x70>)
    {
      Serial.printlnf("Couldn't connect to Cloud.");
   d42a0:	f001 f9a6 	bl	d55f0 <_Z16_fetch_usbserialv>
   d42a4:	490f      	ldr	r1, [pc, #60]	; (d42e4 <_Z14connectToCloudi+0x74>)
   d42a6:	f7ff ff16 	bl	d40d6 <_ZN5Print8printlnfEPKcz>
   d42aa:	6860      	ldr	r0, [r4, #4]
   d42ac:	462a      	mov	r2, r5
   d42ae:	2102      	movs	r1, #2
   d42b0:	f000 f9ba 	bl	d4628 <network_disconnect>
      Cellular.disconnect();
      Cellular.off();
   d42b4:	4620      	mov	r0, r4
   d42b6:	f7ff ff1c 	bl	d40f2 <_ZN5spark13CellularClass3offEv>
   d42ba:	462c      	mov	r4, r5
    }
    delay(1000);
  }
  Serial.printlnf("OK.");
  return secondCounter;
   d42bc:	4620      	mov	r0, r4
   d42be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    delay(1000);
   d42c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d42c4:	f000 fd52 	bl	d4d6c <delay>
  while (Particle.connected() == false)
   d42c8:	e7dd      	b.n	d4286 <_Z14connectToCloudi+0x16>
  Serial.printlnf("OK.");
   d42ca:	f001 f991 	bl	d55f0 <_Z16_fetch_usbserialv>
   d42ce:	4906      	ldr	r1, [pc, #24]	; (d42e8 <_Z14connectToCloudi+0x78>)
   d42d0:	f7ff ff01 	bl	d40d6 <_ZN5Print8printlnfEPKcz>
  return secondCounter;
   d42d4:	e7f2      	b.n	d42bc <_Z14connectToCloudi+0x4c>
   d42d6:	bf00      	nop
   d42d8:	000d5b1e 	.word	0x000d5b1e
   d42dc:	2003e7ec 	.word	0x2003e7ec
   d42e0:	2003e694 	.word	0x2003e694
   d42e4:	000d5b37 	.word	0x000d5b37
   d42e8:	000d5b1a 	.word	0x000d5b1a

000d42ec <loop>:
void loop() {
   d42ec:	b530      	push	{r4, r5, lr}
  delay(1000);
   d42ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
void loop() {
   d42f2:	b093      	sub	sp, #76	; 0x4c
  delay(1000);
   d42f4:	f000 fd3a 	bl	d4d6c <delay>
  Serial.print("==== LOOP ====");
   d42f8:	f001 f97a 	bl	d55f0 <_Z16_fetch_usbserialv>
   d42fc:	4936      	ldr	r1, [pc, #216]	; (d43d8 <loop+0xec>)
   d42fe:	f000 fcc1 	bl	d4c84 <_ZN5Print5printEPKc>
  int cellConnectTime = connectToCell(CELL_CONNECT_SECONDS);
   d4302:	2014      	movs	r0, #20
   d4304:	f7ff ff5c 	bl	d41c0 <_Z13connectToCelli>
  if (cellConnectTime > 0)
   d4308:	1e05      	subs	r5, r0, #0
   d430a:	dd5f      	ble.n	d43cc <loop+0xe0>
    int cloudConnectTime = connectToCloud(CLOUD_CONNECT_SECONDS);
   d430c:	2014      	movs	r0, #20
   d430e:	f7ff ffaf 	bl	d4270 <_Z14connectToCloudi>
    if (cloudConnectTime > 0)
   d4312:	1e04      	subs	r4, r0, #0
   d4314:	dd5a      	ble.n	d43cc <loop+0xe0>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4316:	4931      	ldr	r1, [pc, #196]	; (d43dc <loop+0xf0>)
   d4318:	a80a      	add	r0, sp, #40	; 0x28
   d431a:	f000 fbc0 	bl	d4a9e <_ZN6StringC1EPKc>
      String outDat = "cell: " + (String) cellConnectTime + ",  cloud: " + (String) cloudConnectTime;
   d431e:	220a      	movs	r2, #10
   d4320:	4629      	mov	r1, r5
   d4322:	a806      	add	r0, sp, #24
   d4324:	f000 fbfb 	bl	d4b1e <_ZN6StringC1Eih>
   d4328:	a906      	add	r1, sp, #24
   d432a:	a80a      	add	r0, sp, #40	; 0x28
   d432c:	f000 fc21 	bl	d4b72 <_ZplRK15StringSumHelperRK6String>
   d4330:	492b      	ldr	r1, [pc, #172]	; (d43e0 <loop+0xf4>)
   d4332:	f000 fc2a 	bl	d4b8a <_ZplRK15StringSumHelperPKc>
   d4336:	220a      	movs	r2, #10
   d4338:	4621      	mov	r1, r4
   d433a:	4605      	mov	r5, r0
   d433c:	a80e      	add	r0, sp, #56	; 0x38
   d433e:	f000 fbee 	bl	d4b1e <_ZN6StringC1Eih>
   d4342:	a90e      	add	r1, sp, #56	; 0x38
   d4344:	4628      	mov	r0, r5
   d4346:	f000 fc14 	bl	d4b72 <_ZplRK15StringSumHelperRK6String>
   d434a:	4601      	mov	r1, r0
   d434c:	a802      	add	r0, sp, #8
   d434e:	f000 fbc9 	bl	d4ae4 <_ZN6StringC1ERKS_>
   d4352:	a80e      	add	r0, sp, #56	; 0x38
   d4354:	f000 fb58 	bl	d4a08 <_ZN6StringD1Ev>
   d4358:	a806      	add	r0, sp, #24
   d435a:	f000 fb55 	bl	d4a08 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d435e:	a80a      	add	r0, sp, #40	; 0x28
   d4360:	f000 fb52 	bl	d4a08 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4364:	4b1f      	ldr	r3, [pc, #124]	; (d43e4 <loop+0xf8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4366:	9a02      	ldr	r2, [sp, #8]
   d4368:	781b      	ldrb	r3, [r3, #0]
   d436a:	f88d 3000 	strb.w	r3, [sp]
   d436e:	491e      	ldr	r1, [pc, #120]	; (d43e8 <loop+0xfc>)
   d4370:	233c      	movs	r3, #60	; 0x3c
   d4372:	a80e      	add	r0, sp, #56	; 0x38
   d4374:	f000 fef8 	bl	d5168 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4378:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   d437a:	b17c      	cbz	r4, d439c <loop+0xb0>
      if (--_M_use_count == 0)
   d437c:	6863      	ldr	r3, [r4, #4]
   d437e:	3b01      	subs	r3, #1
   d4380:	6063      	str	r3, [r4, #4]
   d4382:	b95b      	cbnz	r3, d439c <loop+0xb0>
          _M_dispose();
   d4384:	6823      	ldr	r3, [r4, #0]
   d4386:	4620      	mov	r0, r4
   d4388:	689b      	ldr	r3, [r3, #8]
   d438a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d438c:	68a3      	ldr	r3, [r4, #8]
   d438e:	3b01      	subs	r3, #1
   d4390:	60a3      	str	r3, [r4, #8]
   d4392:	b91b      	cbnz	r3, d439c <loop+0xb0>
            _M_destroy();
   d4394:	6823      	ldr	r3, [r4, #0]
   d4396:	4620      	mov	r0, r4
   d4398:	68db      	ldr	r3, [r3, #12]
   d439a:	4798      	blx	r3
   d439c:	4d13      	ldr	r5, [pc, #76]	; (d43ec <loop+0x100>)
      delay(1000);
   d439e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d43a2:	f000 fce3 	bl	d4d6c <delay>
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d43a6:	2400      	movs	r4, #0
      Particle.disconnect();
   d43a8:	a80e      	add	r0, sp, #56	; 0x38
   d43aa:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
   d43ae:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
   d43b2:	f000 fde4 	bl	d4f7e <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
   d43b6:	6868      	ldr	r0, [r5, #4]
   d43b8:	4622      	mov	r2, r4
   d43ba:	2102      	movs	r1, #2
   d43bc:	f000 f934 	bl	d4628 <network_disconnect>
      Cellular.off();
   d43c0:	4628      	mov	r0, r5
   d43c2:	f7ff fe96 	bl	d40f2 <_ZN5spark13CellularClass3offEv>
      String outDat = "cell: " + (String) cellConnectTime + ",  cloud: " + (String) cloudConnectTime;
   d43c6:	a802      	add	r0, sp, #8
   d43c8:	f000 fb1e 	bl	d4a08 <_ZN6StringD1Ev>
  ULPSleep(60);
   d43cc:	203c      	movs	r0, #60	; 0x3c
   d43ce:	f7ff fe9f 	bl	d4110 <_Z8ULPSleepi>
}
   d43d2:	b013      	add	sp, #76	; 0x4c
   d43d4:	bd30      	pop	{r4, r5, pc}
   d43d6:	bf00      	nop
   d43d8:	000d5b52 	.word	0x000d5b52
   d43dc:	000d5b61 	.word	0x000d5b61
   d43e0:	000d5b68 	.word	0x000d5b68
   d43e4:	2003e63c 	.word	0x2003e63c
   d43e8:	000d5b73 	.word	0x000d5b73
   d43ec:	2003e694 	.word	0x2003e694

000d43f0 <_GLOBAL__sub_I_SystemMode>:
   d43f0:	b510      	push	{r4, lr}
        val_(val) {
   d43f2:	4b0a      	ldr	r3, [pc, #40]	; (d441c <_GLOBAL__sub_I_SystemMode+0x2c>)
              error_(SYSTEM_ERROR_NONE) {
   d43f4:	4c0a      	ldr	r4, [pc, #40]	; (d4420 <_GLOBAL__sub_I_SystemMode+0x30>)
   d43f6:	2201      	movs	r2, #1
   d43f8:	701a      	strb	r2, [r3, #0]
   d43fa:	2300      	movs	r3, #0
   d43fc:	6023      	str	r3, [r4, #0]
   d43fe:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d4400:	71a3      	strb	r3, [r4, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4402:	2003      	movs	r0, #3
    SleepResult() {}
   d4404:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   d4408:	60a3      	str	r3, [r4, #8]
        set_system_mode(mode);
   d440a:	f000 f8bf 	bl	d458c <set_system_mode>
SYSTEM_MODE(MANUAL);  
   d440e:	4620      	mov	r0, r4
   d4410:	4a04      	ldr	r2, [pc, #16]	; (d4424 <_GLOBAL__sub_I_SystemMode+0x34>)
   d4412:	4905      	ldr	r1, [pc, #20]	; (d4428 <_GLOBAL__sub_I_SystemMode+0x38>)
   d4414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_MODE(MANUAL);  
   d4418:	f001 ba94 	b.w	d5944 <__aeabi_atexit>
   d441c:	2003e63c 	.word	0x2003e63c
   d4420:	2003e630 	.word	0x2003e630
   d4424:	2003e62c 	.word	0x2003e62c
   d4428:	000d40ab 	.word	0x000d40ab

000d442c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <netdb_freeaddrinfo+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	689b      	ldr	r3, [r3, #8]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	00030268 	.word	0x00030268

000d443c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <netdb_getaddrinfo+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	68db      	ldr	r3, [r3, #12]
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	00030268 	.word	0x00030268

000d444c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <HAL_RNG_GetRandomNumber+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	685b      	ldr	r3, [r3, #4]
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	00030218 	.word	0x00030218

000d445c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	695b      	ldr	r3, [r3, #20]
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	00030218 	.word	0x00030218

000d446c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b02      	ldr	r3, [pc, #8]	; (d4478 <os_mutex_recursive_create+0xc>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4474:	9301      	str	r3, [sp, #4]
   d4476:	bd08      	pop	{r3, pc}
   d4478:	00030248 	.word	0x00030248

000d447c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b02      	ldr	r3, [pc, #8]	; (d4488 <os_mutex_recursive_destroy+0xc>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4484:	9301      	str	r3, [sp, #4]
   d4486:	bd08      	pop	{r3, pc}
   d4488:	00030248 	.word	0x00030248

000d448c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <inet_inet_ntop+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	695b      	ldr	r3, [r3, #20]
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	00030264 	.word	0x00030264

000d449c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <hal_usart_init+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	681b      	ldr	r3, [r3, #0]
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	0003023c 	.word	0x0003023c

000d44ac <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <hal_usart_write+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	68db      	ldr	r3, [r3, #12]
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	0003023c 	.word	0x0003023c

000d44bc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <hal_usart_available+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	691b      	ldr	r3, [r3, #16]
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	0003023c 	.word	0x0003023c

000d44cc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <hal_usart_read+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	695b      	ldr	r3, [r3, #20]
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	0003023c 	.word	0x0003023c

000d44dc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <hal_usart_peek+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	699b      	ldr	r3, [r3, #24]
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	0003023c 	.word	0x0003023c

000d44ec <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <hal_usart_flush+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	69db      	ldr	r3, [r3, #28]
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	0003023c 	.word	0x0003023c

000d44fc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <hal_usart_available_data_for_write+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	0003023c 	.word	0x0003023c

000d450c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <HAL_USB_USART_Init+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	681b      	ldr	r3, [r3, #0]
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	0003024c 	.word	0x0003024c

000d451c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <HAL_USB_USART_Begin+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	685b      	ldr	r3, [r3, #4]
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	0003024c 	.word	0x0003024c

000d452c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <HAL_USB_USART_Available_Data+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	691b      	ldr	r3, [r3, #16]
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	0003024c 	.word	0x0003024c

000d453c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	695b      	ldr	r3, [r3, #20]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	0003024c 	.word	0x0003024c

000d454c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <HAL_USB_USART_Receive_Data+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	699b      	ldr	r3, [r3, #24]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	0003024c 	.word	0x0003024c

000d455c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <HAL_USB_USART_Send_Data+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	69db      	ldr	r3, [r3, #28]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	0003024c 	.word	0x0003024c

000d456c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <HAL_USB_USART_Flush_Data+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	6a1b      	ldr	r3, [r3, #32]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	0003024c 	.word	0x0003024c

000d457c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <log_message+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030260 	.word	0x00030260

000d458c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <set_system_mode+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	685b      	ldr	r3, [r3, #4]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030220 	.word	0x00030220

000d459c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <system_delay_ms+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	695b      	ldr	r3, [r3, #20]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	00030220 	.word	0x00030220

000d45ac <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <application_thread_current+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	00030220 	.word	0x00030220

000d45bc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <application_thread_invoke+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	00030220 	.word	0x00030220

000d45cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b03      	ldr	r3, [pc, #12]	; (d45dc <system_ctrl_set_app_request_handler+0x10>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d45d6:	9301      	str	r3, [sp, #4]
   d45d8:	bd08      	pop	{r3, pc}
   d45da:	0000      	.short	0x0000
   d45dc:	00030220 	.word	0x00030220

000d45e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b03      	ldr	r3, [pc, #12]	; (d45f0 <system_ctrl_set_result+0x10>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d45ea:	9301      	str	r3, [sp, #4]
   d45ec:	bd08      	pop	{r3, pc}
   d45ee:	0000      	.short	0x0000
   d45f0:	00030220 	.word	0x00030220

000d45f4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b03      	ldr	r3, [pc, #12]	; (d4604 <system_sleep_ext+0x10>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d45fe:	9301      	str	r3, [sp, #4]
   d4600:	bd08      	pop	{r3, pc}
   d4602:	0000      	.short	0x0000
   d4604:	00030220 	.word	0x00030220

000d4608 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <network_connect+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	685b      	ldr	r3, [r3, #4]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	00030240 	.word	0x00030240

000d4618 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <network_connecting+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	689b      	ldr	r3, [r3, #8]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	00030240 	.word	0x00030240

000d4628 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <network_disconnect+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	68db      	ldr	r3, [r3, #12]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	00030240 	.word	0x00030240

000d4638 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <network_ready+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	691b      	ldr	r3, [r3, #16]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	00030240 	.word	0x00030240

000d4648 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <network_on+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	695b      	ldr	r3, [r3, #20]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	00030240 	.word	0x00030240

000d4658 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <network_off+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	699b      	ldr	r3, [r3, #24]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030240 	.word	0x00030240

000d4668 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <network_listen+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	69db      	ldr	r3, [r3, #28]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030240 	.word	0x00030240

000d4678 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <network_listening+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6a1b      	ldr	r3, [r3, #32]
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030240 	.word	0x00030240

000d4688 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <network_set_listen_timeout+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030240 	.word	0x00030240

000d4698 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <network_get_listen_timeout+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030240 	.word	0x00030240

000d46a8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <spark_process+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	689b      	ldr	r3, [r3, #8]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030244 	.word	0x00030244

000d46b8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <spark_cloud_flag_connect+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	68db      	ldr	r3, [r3, #12]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030244 	.word	0x00030244

000d46c8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <spark_cloud_flag_connected+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	695b      	ldr	r3, [r3, #20]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030244 	.word	0x00030244

000d46d8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <spark_send_event+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	6a1b      	ldr	r3, [r3, #32]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030244 	.word	0x00030244

000d46e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	00030244 	.word	0x00030244

000d46f8 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <spark_cloud_disconnect+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	00030244 	.word	0x00030244

000d4708 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <malloc+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	681b      	ldr	r3, [r3, #0]
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	0003021c 	.word	0x0003021c

000d4718 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <free+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	685b      	ldr	r3, [r3, #4]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	0003021c 	.word	0x0003021c

000d4728 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <realloc+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	689b      	ldr	r3, [r3, #8]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	0003021c 	.word	0x0003021c

000d4738 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <vsnprintf+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	0003021c 	.word	0x0003021c

000d4748 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <abort+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	0003021c 	.word	0x0003021c

000d4758 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <_malloc_r+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	0003021c 	.word	0x0003021c

000d4768 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <newlib_impure_ptr_callback+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	0003021c 	.word	0x0003021c

000d4778 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4778:	2200      	movs	r2, #0
   d477a:	6840      	ldr	r0, [r0, #4]
   d477c:	4611      	mov	r1, r2
   d477e:	f7ff bf7b 	b.w	d4678 <network_listening>

000d4782 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4782:	2200      	movs	r2, #0
   d4784:	6840      	ldr	r0, [r0, #4]
   d4786:	4611      	mov	r1, r2
   d4788:	f7ff bf86 	b.w	d4698 <network_get_listen_timeout>

000d478c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d478c:	6840      	ldr	r0, [r0, #4]
   d478e:	2200      	movs	r2, #0
   d4790:	f7ff bf7a 	b.w	d4688 <network_set_listen_timeout>

000d4794 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4794:	6840      	ldr	r0, [r0, #4]
   d4796:	2200      	movs	r2, #0
   d4798:	f081 0101 	eor.w	r1, r1, #1
   d479c:	f7ff bf64 	b.w	d4668 <network_listen>

000d47a0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d47a0:	2300      	movs	r3, #0
   d47a2:	6840      	ldr	r0, [r0, #4]
   d47a4:	461a      	mov	r2, r3
   d47a6:	4619      	mov	r1, r3
   d47a8:	f7ff bf56 	b.w	d4658 <network_off>

000d47ac <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d47ac:	2300      	movs	r3, #0
   d47ae:	6840      	ldr	r0, [r0, #4]
   d47b0:	461a      	mov	r2, r3
   d47b2:	4619      	mov	r1, r3
   d47b4:	f7ff bf48 	b.w	d4648 <network_on>

000d47b8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d47b8:	2200      	movs	r2, #0
   d47ba:	6840      	ldr	r0, [r0, #4]
   d47bc:	4611      	mov	r1, r2
   d47be:	f7ff bf3b 	b.w	d4638 <network_ready>

000d47c2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d47c2:	2200      	movs	r2, #0
   d47c4:	6840      	ldr	r0, [r0, #4]
   d47c6:	4611      	mov	r1, r2
   d47c8:	f7ff bf26 	b.w	d4618 <network_connecting>

000d47cc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d47cc:	6840      	ldr	r0, [r0, #4]
   d47ce:	2200      	movs	r2, #0
   d47d0:	2102      	movs	r1, #2
   d47d2:	f7ff bf29 	b.w	d4628 <network_disconnect>

000d47d6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d47d6:	2300      	movs	r3, #0
   d47d8:	6840      	ldr	r0, [r0, #4]
   d47da:	461a      	mov	r2, r3
   d47dc:	f7ff bf14 	b.w	d4608 <network_connect>

000d47e0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d47e0:	4b02      	ldr	r3, [pc, #8]	; (d47ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d47e2:	2203      	movs	r2, #3
   d47e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d47e6:	4a02      	ldr	r2, [pc, #8]	; (d47f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d47e8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d47ea:	4770      	bx	lr
   d47ec:	2003e640 	.word	0x2003e640
   d47f0:	000d5b88 	.word	0x000d5b88

000d47f4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d47f4:	b510      	push	{r4, lr}
   d47f6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d47f8:	6800      	ldr	r0, [r0, #0]
   d47fa:	b118      	cbz	r0, d4804 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d47fc:	f7ff ff8c 	bl	d4718 <free>
            wakeupSource_ = nullptr;
   d4800:	2300      	movs	r3, #0
   d4802:	6023      	str	r3, [r4, #0]
        }
    }
   d4804:	bd10      	pop	{r4, pc}

000d4806 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4806:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d4808:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d480c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d480e:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4810:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d4812:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d4816:	f8c0 2006 	str.w	r2, [r0, #6]
   d481a:	889b      	ldrh	r3, [r3, #4]
   d481c:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d481e:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4820:	f7ff ffe8 	bl	d47f4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d4824:	682b      	ldr	r3, [r5, #0]
   d4826:	b113      	cbz	r3, d482e <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d4828:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d482a:	2300      	movs	r3, #0
   d482c:	602b      	str	r3, [r5, #0]
    }
   d482e:	4620      	mov	r0, r4
   d4830:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4834 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d4834:	b538      	push	{r3, r4, r5, lr}
   d4836:	460c      	mov	r4, r1
   d4838:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d483a:	f7ff ffdb 	bl	d47f4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d483e:	b144      	cbz	r4, d4852 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d4840:	8820      	ldrh	r0, [r4, #0]
   d4842:	f7ff ff61 	bl	d4708 <malloc>
   d4846:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d4848:	b128      	cbz	r0, d4856 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d484a:	8822      	ldrh	r2, [r4, #0]
   d484c:	4621      	mov	r1, r4
   d484e:	f001 f893 	bl	d5978 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d4852:	2000      	movs	r0, #0
    }
   d4854:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d4856:	4801      	ldr	r0, [pc, #4]	; (d485c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d4858:	e7fc      	b.n	d4854 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d485a:	bf00      	nop
   d485c:	fffffefc 	.word	0xfffffefc

000d4860 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d4860:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4862:	4d2d      	ldr	r5, [pc, #180]	; (d4918 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d4864:	7d0b      	ldrb	r3, [r1, #20]
   d4866:	4604      	mov	r4, r0
   d4868:	b08b      	sub	sp, #44	; 0x2c
   d486a:	4608      	mov	r0, r1
   d486c:	1daf      	adds	r7, r5, #6
   d486e:	2b00      	cmp	r3, #0
   d4870:	d038      	beq.n	d48e4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d4872:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d4874:	791b      	ldrb	r3, [r3, #4]
   d4876:	2b00      	cmp	r3, #0
   d4878:	d034      	beq.n	d48e4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d487a:	2200      	movs	r2, #0
    SleepResult() {}
   d487c:	4b27      	ldr	r3, [pc, #156]	; (d491c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d487e:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d4880:	a902      	add	r1, sp, #8
   d4882:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d4884:	9202      	str	r2, [sp, #8]
   d4886:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d488a:	f88d 200e 	strb.w	r2, [sp, #14]
   d488e:	f7ff feb1 	bl	d45f4 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d4892:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d4896:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d489a:	b200      	sxth	r0, r0
   d489c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d48a0:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d48a4:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d48a6:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d48a8:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d48aa:	4628      	mov	r0, r5
   d48ac:	f7ff ffc2 	bl	d4834 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d48b0:	a802      	add	r0, sp, #8
   d48b2:	f7ff ff9f 	bl	d47f4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d48b6:	2300      	movs	r3, #0
   d48b8:	6023      	str	r3, [r4, #0]
   d48ba:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d48bc:	71a3      	strb	r3, [r4, #6]
   d48be:	8123      	strh	r3, [r4, #8]
   d48c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d48c4:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d48c6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d48ca:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d48cc:	683b      	ldr	r3, [r7, #0]
   d48ce:	f8c4 3006 	str.w	r3, [r4, #6]
   d48d2:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d48d4:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d48d6:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d48d8:	4620      	mov	r0, r4
   d48da:	f7ff ffab 	bl	d4834 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d48de:	4620      	mov	r0, r4
   d48e0:	b00b      	add	sp, #44	; 0x2c
   d48e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d48e4:	2600      	movs	r6, #0
   d48e6:	2320      	movs	r3, #32
   d48e8:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d48ec:	4b0c      	ldr	r3, [pc, #48]	; (d4920 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d48ee:	9300      	str	r3, [sp, #0]
   d48f0:	490c      	ldr	r1, [pc, #48]	; (d4924 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d48f2:	4633      	mov	r3, r6
   d48f4:	aa02      	add	r2, sp, #8
   d48f6:	2032      	movs	r0, #50	; 0x32
   d48f8:	f7ff fe40 	bl	d457c <log_message>
    SleepResult() {}
   d48fc:	4b07      	ldr	r3, [pc, #28]	; (d491c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d48fe:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d4900:	a902      	add	r1, sp, #8
        error_ = error;
   d4902:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d4906:	4804      	ldr	r0, [pc, #16]	; (d4918 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d4908:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d490a:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d490e:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4912:	f7ff ff78 	bl	d4806 <_ZN17SystemSleepResultaSEOS_>
   d4916:	e7cb      	b.n	d48b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d4918:	2003e648 	.word	0x2003e648
   d491c:	ffff0000 	.word	0xffff0000
   d4920:	000d5bbb 	.word	0x000d5bbb
   d4924:	000d5bb4 	.word	0x000d5bb4

000d4928 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4928:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d492a:	4b09      	ldr	r3, [pc, #36]	; (d4950 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d492c:	4c09      	ldr	r4, [pc, #36]	; (d4954 <_GLOBAL__sub_I_System+0x2c>)
   d492e:	2202      	movs	r2, #2
   d4930:	2000      	movs	r0, #0
   d4932:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4934:	4b08      	ldr	r3, [pc, #32]	; (d4958 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4936:	6020      	str	r0, [r4, #0]
   d4938:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d493a:	71a0      	strb	r0, [r4, #6]
   d493c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d493e:	f7ff fe25 	bl	d458c <set_system_mode>
SystemClass System;
   d4942:	4620      	mov	r0, r4
   d4944:	4a05      	ldr	r2, [pc, #20]	; (d495c <_GLOBAL__sub_I_System+0x34>)
   d4946:	4906      	ldr	r1, [pc, #24]	; (d4960 <_GLOBAL__sub_I_System+0x38>)
   d4948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d494c:	f000 bffa 	b.w	d5944 <__aeabi_atexit>
   d4950:	2003e654 	.word	0x2003e654
   d4954:	2003e648 	.word	0x2003e648
   d4958:	ffff0000 	.word	0xffff0000
   d495c:	2003e62c 	.word	0x2003e62c
   d4960:	000d40ab 	.word	0x000d40ab

000d4964 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4964:	b510      	push	{r4, lr}
   d4966:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4968:	f001 f865 	bl	d5a36 <strlen>
   d496c:	3801      	subs	r0, #1
   d496e:	1823      	adds	r3, r4, r0
   d4970:	4620      	mov	r0, r4
	while(i<j){
   d4972:	4283      	cmp	r3, r0
   d4974:	d906      	bls.n	d4984 <_Z11str_reversePc+0x20>
		c = *i;
   d4976:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4978:	7819      	ldrb	r1, [r3, #0]
   d497a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d497e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d4982:	e7f6      	b.n	d4972 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d4984:	bd10      	pop	{r4, pc}

000d4986 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4986:	b570      	push	{r4, r5, r6, lr}
   d4988:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d498a:	1e91      	subs	r1, r2, #2
   d498c:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d498e:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d4990:	d822      	bhi.n	d49d8 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d4992:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d4994:	b16d      	cbz	r5, d49b2 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4996:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d499a:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d499e:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d49a0:	2d09      	cmp	r5, #9
                *ptr += '0';
   d49a2:	bf94      	ite	ls
   d49a4:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d49a6:	3157      	addhi	r1, #87	; 0x57
   d49a8:	b2c9      	uxtb	r1, r1
   d49aa:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d49ae:	4635      	mov	r5, r6
	while(a){
   d49b0:	e7f0      	b.n	d4994 <ultoa+0xe>
   d49b2:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d49b4:	4423      	add	r3, r4
            *ptr++ = '0';
   d49b6:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d49b8:	4293      	cmp	r3, r2
   d49ba:	d902      	bls.n	d49c2 <ultoa+0x3c>
            *ptr++ = '0';
   d49bc:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d49c0:	e7fa      	b.n	d49b8 <ultoa+0x32>
   d49c2:	1a1a      	subs	r2, r3, r0
   d49c4:	4283      	cmp	r3, r0
   d49c6:	bf38      	it	cc
   d49c8:	2200      	movcc	r2, #0

	*ptr = '\0';
   d49ca:	2300      	movs	r3, #0
   d49cc:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d49ce:	4620      	mov	r0, r4
   d49d0:	f7ff ffc8 	bl	d4964 <_Z11str_reversePc>
	return buffer;
   d49d4:	4620      	mov	r0, r4
}
   d49d6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d49d8:	2000      	movs	r0, #0
   d49da:	e7fc      	b.n	d49d6 <ultoa+0x50>

000d49dc <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d49dc:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d49de:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d49e0:	460c      	mov	r4, r1
   d49e2:	4615      	mov	r5, r2
	if(a<0){
   d49e4:	da0e      	bge.n	d4a04 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d49e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d49ea:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d49ee:	bf14      	ite	ne
   d49f0:	4258      	negne	r0, r3
   d49f2:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d49f4:	2301      	movs	r3, #1
		*buffer = '-';
   d49f6:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d49f8:	462a      	mov	r2, r5
   d49fa:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d49fc:	f7ff ffc3 	bl	d4986 <ultoa>
	}
	return buffer;
}
   d4a00:	4620      	mov	r0, r4
   d4a02:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d4a04:	2301      	movs	r3, #1
   d4a06:	e7f9      	b.n	d49fc <itoa+0x20>

000d4a08 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4a08:	b510      	push	{r4, lr}
   d4a0a:	4604      	mov	r4, r0
{
	free(buffer);
   d4a0c:	6800      	ldr	r0, [r0, #0]
   d4a0e:	f7ff fe83 	bl	d4718 <free>
}
   d4a12:	4620      	mov	r0, r4
   d4a14:	bd10      	pop	{r4, pc}

000d4a16 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4a16:	b510      	push	{r4, lr}
   d4a18:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4a1a:	6800      	ldr	r0, [r0, #0]
   d4a1c:	b108      	cbz	r0, d4a22 <_ZN6String10invalidateEv+0xc>
   d4a1e:	f7ff fe7b 	bl	d4718 <free>
	buffer = NULL;
   d4a22:	2300      	movs	r3, #0
	capacity = len = 0;
   d4a24:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4a28:	6023      	str	r3, [r4, #0]
}
   d4a2a:	bd10      	pop	{r4, pc}

000d4a2c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4a2c:	b538      	push	{r3, r4, r5, lr}
   d4a2e:	4604      	mov	r4, r0
   d4a30:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4a32:	6800      	ldr	r0, [r0, #0]
   d4a34:	3101      	adds	r1, #1
   d4a36:	f7ff fe77 	bl	d4728 <realloc>
	if (newbuffer) {
   d4a3a:	b110      	cbz	r0, d4a42 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4a3c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4a40:	2001      	movs	r0, #1
	}
	return 0;
}
   d4a42:	bd38      	pop	{r3, r4, r5, pc}

000d4a44 <_ZN6String7reserveEj>:
{
   d4a44:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4a46:	6803      	ldr	r3, [r0, #0]
{
   d4a48:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4a4a:	b123      	cbz	r3, d4a56 <_ZN6String7reserveEj+0x12>
   d4a4c:	6843      	ldr	r3, [r0, #4]
   d4a4e:	428b      	cmp	r3, r1
   d4a50:	d301      	bcc.n	d4a56 <_ZN6String7reserveEj+0x12>
   d4a52:	2001      	movs	r0, #1
}
   d4a54:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4a56:	4620      	mov	r0, r4
   d4a58:	f7ff ffe8 	bl	d4a2c <_ZN6String12changeBufferEj>
   d4a5c:	2800      	cmp	r0, #0
   d4a5e:	d0f9      	beq.n	d4a54 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4a60:	68a3      	ldr	r3, [r4, #8]
   d4a62:	2b00      	cmp	r3, #0
   d4a64:	d1f5      	bne.n	d4a52 <_ZN6String7reserveEj+0xe>
   d4a66:	6822      	ldr	r2, [r4, #0]
   d4a68:	7013      	strb	r3, [r2, #0]
   d4a6a:	e7f2      	b.n	d4a52 <_ZN6String7reserveEj+0xe>

000d4a6c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4a6e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4a70:	4611      	mov	r1, r2
   d4a72:	9201      	str	r2, [sp, #4]
{
   d4a74:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4a76:	f7ff ffe5 	bl	d4a44 <_ZN6String7reserveEj>
   d4a7a:	9a01      	ldr	r2, [sp, #4]
   d4a7c:	b928      	cbnz	r0, d4a8a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4a7e:	4620      	mov	r0, r4
   d4a80:	f7ff ffc9 	bl	d4a16 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4a84:	4620      	mov	r0, r4
   d4a86:	b003      	add	sp, #12
   d4a88:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4a8a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4a8c:	4629      	mov	r1, r5
   d4a8e:	6820      	ldr	r0, [r4, #0]
   d4a90:	f000 ff72 	bl	d5978 <memcpy>
	buffer[len] = 0;
   d4a94:	6822      	ldr	r2, [r4, #0]
   d4a96:	68a3      	ldr	r3, [r4, #8]
   d4a98:	2100      	movs	r1, #0
   d4a9a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4a9c:	e7f2      	b.n	d4a84 <_ZN6String4copyEPKcj+0x18>

000d4a9e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4a9e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4aa0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4aa2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4aa6:	4604      	mov	r4, r0
	len = 0;
   d4aa8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4aaa:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4aac:	b141      	cbz	r1, d4ac0 <_ZN6StringC1EPKc+0x22>
   d4aae:	4608      	mov	r0, r1
   d4ab0:	9101      	str	r1, [sp, #4]
   d4ab2:	f000 ffc0 	bl	d5a36 <strlen>
   d4ab6:	9901      	ldr	r1, [sp, #4]
   d4ab8:	4602      	mov	r2, r0
   d4aba:	4620      	mov	r0, r4
   d4abc:	f7ff ffd6 	bl	d4a6c <_ZN6String4copyEPKcj>
}
   d4ac0:	4620      	mov	r0, r4
   d4ac2:	b002      	add	sp, #8
   d4ac4:	bd10      	pop	{r4, pc}

000d4ac6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4ac6:	4288      	cmp	r0, r1
{
   d4ac8:	b510      	push	{r4, lr}
   d4aca:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4acc:	d005      	beq.n	d4ada <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4ace:	680b      	ldr	r3, [r1, #0]
   d4ad0:	b12b      	cbz	r3, d4ade <_ZN6StringaSERKS_+0x18>
   d4ad2:	688a      	ldr	r2, [r1, #8]
   d4ad4:	4619      	mov	r1, r3
   d4ad6:	f7ff ffc9 	bl	d4a6c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4ada:	4620      	mov	r0, r4
   d4adc:	bd10      	pop	{r4, pc}
	else invalidate();
   d4ade:	f7ff ff9a 	bl	d4a16 <_ZN6String10invalidateEv>
   d4ae2:	e7fa      	b.n	d4ada <_ZN6StringaSERKS_+0x14>

000d4ae4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4ae4:	b510      	push	{r4, lr}
	buffer = NULL;
   d4ae6:	2300      	movs	r3, #0
String::String(const String &value)
   d4ae8:	4604      	mov	r4, r0
	capacity = 0;
   d4aea:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4aee:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4af0:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4af2:	f7ff ffe8 	bl	d4ac6 <_ZN6StringaSERKS_>
}
   d4af6:	4620      	mov	r0, r4
   d4af8:	bd10      	pop	{r4, pc}

000d4afa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4afa:	b513      	push	{r0, r1, r4, lr}
   d4afc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4afe:	b159      	cbz	r1, d4b18 <_ZN6StringaSEPKc+0x1e>
   d4b00:	4608      	mov	r0, r1
   d4b02:	9101      	str	r1, [sp, #4]
   d4b04:	f000 ff97 	bl	d5a36 <strlen>
   d4b08:	9901      	ldr	r1, [sp, #4]
   d4b0a:	4602      	mov	r2, r0
   d4b0c:	4620      	mov	r0, r4
   d4b0e:	f7ff ffad 	bl	d4a6c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4b12:	4620      	mov	r0, r4
   d4b14:	b002      	add	sp, #8
   d4b16:	bd10      	pop	{r4, pc}
	else invalidate();
   d4b18:	f7ff ff7d 	bl	d4a16 <_ZN6String10invalidateEv>
   d4b1c:	e7f9      	b.n	d4b12 <_ZN6StringaSEPKc+0x18>

000d4b1e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d4b1e:	b510      	push	{r4, lr}
   d4b20:	4604      	mov	r4, r0
   d4b22:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d4b24:	2300      	movs	r3, #0
	capacity = 0;
   d4b26:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d4b2a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d4b2c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d4b2e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d4b30:	a901      	add	r1, sp, #4
   d4b32:	f7ff ff53 	bl	d49dc <itoa>
	*this = buf;
   d4b36:	a901      	add	r1, sp, #4
   d4b38:	4620      	mov	r0, r4
   d4b3a:	f7ff ffde 	bl	d4afa <_ZN6StringaSEPKc>
}
   d4b3e:	4620      	mov	r0, r4
   d4b40:	b00a      	add	sp, #40	; 0x28
   d4b42:	bd10      	pop	{r4, pc}

000d4b44 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d4b44:	b570      	push	{r4, r5, r6, lr}
   d4b46:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d4b48:	460e      	mov	r6, r1
   d4b4a:	b909      	cbnz	r1, d4b50 <_ZN6String6concatEPKcj+0xc>
   d4b4c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d4b4e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d4b50:	b16a      	cbz	r2, d4b6e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d4b52:	6884      	ldr	r4, [r0, #8]
   d4b54:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d4b56:	4621      	mov	r1, r4
   d4b58:	f7ff ff74 	bl	d4a44 <_ZN6String7reserveEj>
   d4b5c:	2800      	cmp	r0, #0
   d4b5e:	d0f5      	beq.n	d4b4c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d4b60:	6828      	ldr	r0, [r5, #0]
   d4b62:	68ab      	ldr	r3, [r5, #8]
   d4b64:	4631      	mov	r1, r6
   d4b66:	4418      	add	r0, r3
   d4b68:	f000 ff40 	bl	d59ec <strcpy>
	len = newlen;
   d4b6c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d4b6e:	2001      	movs	r0, #1
   d4b70:	e7ed      	b.n	d4b4e <_ZN6String6concatEPKcj+0xa>

000d4b72 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d4b72:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d4b74:	688a      	ldr	r2, [r1, #8]
   d4b76:	6809      	ldr	r1, [r1, #0]
{
   d4b78:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d4b7a:	f7ff ffe3 	bl	d4b44 <_ZN6String6concatEPKcj>
   d4b7e:	b910      	cbnz	r0, d4b86 <_ZplRK15StringSumHelperRK6String+0x14>
   d4b80:	4620      	mov	r0, r4
   d4b82:	f7ff ff48 	bl	d4a16 <_ZN6String10invalidateEv>
	return a;
}
   d4b86:	4620      	mov	r0, r4
   d4b88:	bd10      	pop	{r4, pc}

000d4b8a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d4b8a:	b513      	push	{r0, r1, r4, lr}
   d4b8c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d4b8e:	b929      	cbnz	r1, d4b9c <_ZplRK15StringSumHelperPKc+0x12>
   d4b90:	4620      	mov	r0, r4
   d4b92:	f7ff ff40 	bl	d4a16 <_ZN6String10invalidateEv>
	return a;
}
   d4b96:	4620      	mov	r0, r4
   d4b98:	b002      	add	sp, #8
   d4b9a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d4b9c:	4608      	mov	r0, r1
   d4b9e:	9101      	str	r1, [sp, #4]
   d4ba0:	f000 ff49 	bl	d5a36 <strlen>
   d4ba4:	9901      	ldr	r1, [sp, #4]
   d4ba6:	4602      	mov	r2, r0
   d4ba8:	4620      	mov	r0, r4
   d4baa:	f7ff ffcb 	bl	d4b44 <_ZN6String6concatEPKcj>
   d4bae:	2800      	cmp	r0, #0
   d4bb0:	d0ee      	beq.n	d4b90 <_ZplRK15StringSumHelperPKc+0x6>
   d4bb2:	e7f0      	b.n	d4b96 <_ZplRK15StringSumHelperPKc+0xc>

000d4bb4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4bb4:	b510      	push	{r4, lr}
          _M_dispose();
   d4bb6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4bb8:	4604      	mov	r4, r0
          _M_dispose();
   d4bba:	689b      	ldr	r3, [r3, #8]
   d4bbc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4bbe:	68a3      	ldr	r3, [r4, #8]
   d4bc0:	3b01      	subs	r3, #1
   d4bc2:	60a3      	str	r3, [r4, #8]
   d4bc4:	b92b      	cbnz	r3, d4bd2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4bc6:	6823      	ldr	r3, [r4, #0]
   d4bc8:	4620      	mov	r0, r4
   d4bca:	68db      	ldr	r3, [r3, #12]
    }
   d4bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4bd0:	4718      	bx	r3
    }
   d4bd2:	bd10      	pop	{r4, pc}

000d4bd4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4bd4:	b510      	push	{r4, lr}
   d4bd6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4bd8:	6800      	ldr	r0, [r0, #0]
   d4bda:	b108      	cbz	r0, d4be0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4bdc:	f7ff fc4e 	bl	d447c <os_mutex_recursive_destroy>
    }
   d4be0:	4620      	mov	r0, r4
   d4be2:	bd10      	pop	{r4, pc}

000d4be4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4be4:	680b      	ldr	r3, [r1, #0]
   d4be6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4be8:	b113      	cbz	r3, d4bf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4bea:	685a      	ldr	r2, [r3, #4]
   d4bec:	3201      	adds	r2, #1
   d4bee:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4bf0:	4770      	bx	lr

000d4bf2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4bf2:	b510      	push	{r4, lr}
   d4bf4:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4bf6:	6800      	ldr	r0, [r0, #0]
   d4bf8:	b128      	cbz	r0, d4c06 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4bfa:	6843      	ldr	r3, [r0, #4]
   d4bfc:	3b01      	subs	r3, #1
   d4bfe:	6043      	str	r3, [r0, #4]
   d4c00:	b90b      	cbnz	r3, d4c06 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4c02:	f7ff ffd7 	bl	d4bb4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4c06:	4620      	mov	r0, r4
   d4c08:	bd10      	pop	{r4, pc}
	...

000d4c0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4c0c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4c0e:	4c06      	ldr	r4, [pc, #24]	; (d4c28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4c10:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4c12:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4c14:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4c16:	f7ff fc29 	bl	d446c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4c1a:	4620      	mov	r0, r4
   d4c1c:	4a03      	ldr	r2, [pc, #12]	; (d4c2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4c1e:	4904      	ldr	r1, [pc, #16]	; (d4c30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4c24:	f000 be8e 	b.w	d5944 <__aeabi_atexit>
   d4c28:	2003e658 	.word	0x2003e658
   d4c2c:	2003e62c 	.word	0x2003e62c
   d4c30:	000d4bd5 	.word	0x000d4bd5

000d4c34 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c36:	4606      	mov	r6, r0
   d4c38:	460d      	mov	r5, r1
  size_t n = 0;
   d4c3a:	188f      	adds	r7, r1, r2
   d4c3c:	2400      	movs	r4, #0
  while (size--) {
   d4c3e:	42bd      	cmp	r5, r7
   d4c40:	d00c      	beq.n	d4c5c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4c42:	6833      	ldr	r3, [r6, #0]
   d4c44:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4c48:	689b      	ldr	r3, [r3, #8]
   d4c4a:	4630      	mov	r0, r6
   d4c4c:	4798      	blx	r3
     if (chunk>=0)
   d4c4e:	1e03      	subs	r3, r0, #0
   d4c50:	db01      	blt.n	d4c56 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4c52:	441c      	add	r4, r3
  while (size--) {
   d4c54:	e7f3      	b.n	d4c3e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4c56:	2c00      	cmp	r4, #0
   d4c58:	bf08      	it	eq
   d4c5a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4c5c:	4620      	mov	r0, r4
   d4c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c60 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4c60:	b513      	push	{r0, r1, r4, lr}
   d4c62:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4c64:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4c66:	b159      	cbz	r1, d4c80 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4c68:	9101      	str	r1, [sp, #4]
   d4c6a:	f000 fee4 	bl	d5a36 <strlen>
   d4c6e:	6823      	ldr	r3, [r4, #0]
   d4c70:	9901      	ldr	r1, [sp, #4]
   d4c72:	68db      	ldr	r3, [r3, #12]
   d4c74:	4602      	mov	r2, r0
   d4c76:	4620      	mov	r0, r4
    }
   d4c78:	b002      	add	sp, #8
   d4c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4c7e:	4718      	bx	r3
    }
   d4c80:	b002      	add	sp, #8
   d4c82:	bd10      	pop	{r4, pc}

000d4c84 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d4c84:	b508      	push	{r3, lr}
  return write(str);
   d4c86:	f7ff ffeb 	bl	d4c60 <_ZN5Print5writeEPKc>
}
   d4c8a:	bd08      	pop	{r3, pc}

000d4c8c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d4c8c:	6803      	ldr	r3, [r0, #0]
   d4c8e:	689b      	ldr	r3, [r3, #8]
   d4c90:	4718      	bx	r3

000d4c92 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4c92:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4c94:	210d      	movs	r1, #13
{
   d4c96:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4c98:	f7ff fff8 	bl	d4c8c <_ZN5Print5printEc>
  n += print('\n');
   d4c9c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4c9e:	4604      	mov	r4, r0
  n += print('\n');
   d4ca0:	4628      	mov	r0, r5
   d4ca2:	f7ff fff3 	bl	d4c8c <_ZN5Print5printEc>
  return n;
}
   d4ca6:	4420      	add	r0, r4
   d4ca8:	bd38      	pop	{r3, r4, r5, pc}

000d4caa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4caa:	b530      	push	{r4, r5, lr}
   d4cac:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4cae:	2300      	movs	r3, #0
   d4cb0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4cb4:	2a01      	cmp	r2, #1
   d4cb6:	bf98      	it	ls
   d4cb8:	220a      	movls	r2, #10
   d4cba:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4cbc:	460d      	mov	r5, r1
   d4cbe:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4cc2:	fb01 5312 	mls	r3, r1, r2, r5
   d4cc6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4cca:	2b09      	cmp	r3, #9
   d4ccc:	bf94      	ite	ls
   d4cce:	3330      	addls	r3, #48	; 0x30
   d4cd0:	3337      	addhi	r3, #55	; 0x37
   d4cd2:	b2db      	uxtb	r3, r3
  } while(n);
   d4cd4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4cd6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4cda:	d9ef      	bls.n	d4cbc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4cdc:	4621      	mov	r1, r4
   d4cde:	f7ff ffbf 	bl	d4c60 <_ZN5Print5writeEPKc>
}
   d4ce2:	b00b      	add	sp, #44	; 0x2c
   d4ce4:	bd30      	pop	{r4, r5, pc}

000d4ce6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d4ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4cea:	b086      	sub	sp, #24
   d4cec:	af00      	add	r7, sp, #0
   d4cee:	4605      	mov	r5, r0
   d4cf0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d4cf2:	1d38      	adds	r0, r7, #4
   d4cf4:	2114      	movs	r1, #20
{
   d4cf6:	4614      	mov	r4, r2
    va_copy(args2, args);
   d4cf8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d4cfa:	f7ff fd1d 	bl	d4738 <vsnprintf>

    if (n<bufsize)
   d4cfe:	2813      	cmp	r0, #19
   d4d00:	d80e      	bhi.n	d4d20 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d4d02:	1d39      	adds	r1, r7, #4
   d4d04:	4628      	mov	r0, r5
   d4d06:	f7ff ffab 	bl	d4c60 <_ZN5Print5writeEPKc>
   d4d0a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d4d0c:	b11e      	cbz	r6, d4d16 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d4d0e:	4628      	mov	r0, r5
   d4d10:	f7ff ffbf 	bl	d4c92 <_ZN5Print7printlnEv>
   d4d14:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d4d16:	4620      	mov	r0, r4
   d4d18:	3718      	adds	r7, #24
   d4d1a:	46bd      	mov	sp, r7
   d4d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d4d20:	f100 0308 	add.w	r3, r0, #8
   d4d24:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d4d28:	46e8      	mov	r8, sp
        char bigger[n+1];
   d4d2a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d4d2e:	4622      	mov	r2, r4
   d4d30:	1c41      	adds	r1, r0, #1
   d4d32:	683b      	ldr	r3, [r7, #0]
   d4d34:	4668      	mov	r0, sp
   d4d36:	f7ff fcff 	bl	d4738 <vsnprintf>
  return write(str);
   d4d3a:	4669      	mov	r1, sp
   d4d3c:	4628      	mov	r0, r5
   d4d3e:	f7ff ff8f 	bl	d4c60 <_ZN5Print5writeEPKc>
   d4d42:	4604      	mov	r4, r0
   d4d44:	46c5      	mov	sp, r8
   d4d46:	e7e1      	b.n	d4d0c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d4d48 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4d48:	4b01      	ldr	r3, [pc, #4]	; (d4d50 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4d4a:	4a02      	ldr	r2, [pc, #8]	; (d4d54 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4d4c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4d4e:	4770      	bx	lr
   d4d50:	2003e65c 	.word	0x2003e65c
   d4d54:	000d5be2 	.word	0x000d5be2

000d4d58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4d58:	4b02      	ldr	r3, [pc, #8]	; (d4d64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4d5a:	681a      	ldr	r2, [r3, #0]
   d4d5c:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4d5e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4d60:	4770      	bx	lr
   d4d62:	bf00      	nop
   d4d64:	2003e5c4 	.word	0x2003e5c4
   d4d68:	2003e660 	.word	0x2003e660

000d4d6c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4d6c:	2100      	movs	r1, #0
   d4d6e:	f7ff bc15 	b.w	d459c <system_delay_ms>

000d4d72 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4d72:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4d74:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4d76:	4604      	mov	r4, r0
      if (_M_manager)
   d4d78:	b113      	cbz	r3, d4d80 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4d7a:	2203      	movs	r2, #3
   d4d7c:	4601      	mov	r1, r0
   d4d7e:	4798      	blx	r3
    }
   d4d80:	4620      	mov	r0, r4
   d4d82:	bd10      	pop	{r4, pc}

000d4d84 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4d84:	b510      	push	{r4, lr}
   d4d86:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d88:	f7ff fff3 	bl	d4d72 <_ZNSt14_Function_baseD1Ev>
   d4d8c:	4620      	mov	r0, r4
   d4d8e:	bd10      	pop	{r4, pc}

000d4d90 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4d90:	b513      	push	{r0, r1, r4, lr}
   d4d92:	460b      	mov	r3, r1
   d4d94:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d96:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4d9a:	466c      	mov	r4, sp
   d4d9c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4da0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4da4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4da8:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4dac:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4db0:	b002      	add	sp, #8
   d4db2:	bd10      	pop	{r4, pc}

000d4db4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4db4:	4803      	ldr	r0, [pc, #12]	; (d4dc4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4db6:	4a04      	ldr	r2, [pc, #16]	; (d4dc8 <_GLOBAL__sub_I_RGB+0x14>)
   d4db8:	4904      	ldr	r1, [pc, #16]	; (d4dcc <_GLOBAL__sub_I_RGB+0x18>)
   d4dba:	2300      	movs	r3, #0
   d4dbc:	6083      	str	r3, [r0, #8]
   d4dbe:	f000 bdc1 	b.w	d5944 <__aeabi_atexit>
   d4dc2:	bf00      	nop
   d4dc4:	2003e664 	.word	0x2003e664
   d4dc8:	2003e62c 	.word	0x2003e62c
   d4dcc:	000d4d85 	.word	0x000d4d85

000d4dd0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4dd0:	4b01      	ldr	r3, [pc, #4]	; (d4dd8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4dd2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4dd4:	4770      	bx	lr
   d4dd6:	bf00      	nop
   d4dd8:	2003e5c8 	.word	0x2003e5c8

000d4ddc <serialEventRun>:
{
   d4ddc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4dde:	4b0b      	ldr	r3, [pc, #44]	; (d4e0c <serialEventRun+0x30>)
   d4de0:	b143      	cbz	r3, d4df4 <serialEventRun+0x18>
   d4de2:	f000 fc05 	bl	d55f0 <_Z16_fetch_usbserialv>
   d4de6:	6803      	ldr	r3, [r0, #0]
   d4de8:	691b      	ldr	r3, [r3, #16]
   d4dea:	4798      	blx	r3
   d4dec:	2800      	cmp	r0, #0
   d4dee:	dd01      	ble.n	d4df4 <serialEventRun+0x18>
        serialEvent();
   d4df0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4df4:	4b06      	ldr	r3, [pc, #24]	; (d4e10 <serialEventRun+0x34>)
   d4df6:	b143      	cbz	r3, d4e0a <serialEventRun+0x2e>
   d4df8:	f000 fcbe 	bl	d5778 <_Z22__fetch_global_Serial1v>
   d4dfc:	6803      	ldr	r3, [r0, #0]
   d4dfe:	691b      	ldr	r3, [r3, #16]
   d4e00:	4798      	blx	r3
   d4e02:	2800      	cmp	r0, #0
   d4e04:	dd01      	ble.n	d4e0a <serialEventRun+0x2e>
        serialEvent1();
   d4e06:	f3af 8000 	nop.w
}
   d4e0a:	bd08      	pop	{r3, pc}
	...

000d4e14 <_post_loop>:
{
   d4e14:	b508      	push	{r3, lr}
	serialEventRun();
   d4e16:	f7ff ffe1 	bl	d4ddc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4e1a:	f7ff fb1f 	bl	d445c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4e1e:	4b01      	ldr	r3, [pc, #4]	; (d4e24 <_post_loop+0x10>)
   d4e20:	6018      	str	r0, [r3, #0]
}
   d4e22:	bd08      	pop	{r3, pc}
   d4e24:	2003e7ec 	.word	0x2003e7ec

000d4e28 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4e28:	4802      	ldr	r0, [pc, #8]	; (d4e34 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4e2a:	4a03      	ldr	r2, [pc, #12]	; (d4e38 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4e2c:	4903      	ldr	r1, [pc, #12]	; (d4e3c <_Z33system_initialize_user_backup_ramv+0x14>)
   d4e2e:	1a12      	subs	r2, r2, r0
   d4e30:	f000 bda2 	b.w	d5978 <memcpy>
   d4e34:	2003f400 	.word	0x2003f400
   d4e38:	2003f404 	.word	0x2003f404
   d4e3c:	000d5d30 	.word	0x000d5d30

000d4e40 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4e40:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4e42:	2300      	movs	r3, #0
   d4e44:	9300      	str	r3, [sp, #0]
   d4e46:	461a      	mov	r2, r3
   d4e48:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e4c:	f7ff fbc8 	bl	d45e0 <system_ctrl_set_result>
}
   d4e50:	b003      	add	sp, #12
   d4e52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4e58 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4e58:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4e5a:	8843      	ldrh	r3, [r0, #2]
   d4e5c:	2b0a      	cmp	r3, #10
   d4e5e:	d008      	beq.n	d4e72 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4e60:	2b50      	cmp	r3, #80	; 0x50
   d4e62:	d10b      	bne.n	d4e7c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4e64:	4b09      	ldr	r3, [pc, #36]	; (d4e8c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4e66:	681b      	ldr	r3, [r3, #0]
   d4e68:	b14b      	cbz	r3, d4e7e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4e6a:	b003      	add	sp, #12
   d4e6c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4e70:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4e72:	f7ff ffe5 	bl	d4e40 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4e76:	b003      	add	sp, #12
   d4e78:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4e7c:	2300      	movs	r3, #0
   d4e7e:	9300      	str	r3, [sp, #0]
   d4e80:	461a      	mov	r2, r3
   d4e82:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e86:	f7ff fbab 	bl	d45e0 <system_ctrl_set_result>
}
   d4e8a:	e7f4      	b.n	d4e76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4e8c:	2003e678 	.word	0x2003e678

000d4e90 <module_user_init_hook>:
{
   d4e90:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4e92:	4c12      	ldr	r4, [pc, #72]	; (d4edc <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4e94:	4812      	ldr	r0, [pc, #72]	; (d4ee0 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4e96:	4d13      	ldr	r5, [pc, #76]	; (d4ee4 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4e98:	2100      	movs	r1, #0
   d4e9a:	f7ff fc65 	bl	d4768 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4e9e:	6823      	ldr	r3, [r4, #0]
   d4ea0:	42ab      	cmp	r3, r5
   d4ea2:	4b11      	ldr	r3, [pc, #68]	; (d4ee8 <module_user_init_hook+0x58>)
   d4ea4:	bf0c      	ite	eq
   d4ea6:	2201      	moveq	r2, #1
   d4ea8:	2200      	movne	r2, #0
   d4eaa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4eac:	d002      	beq.n	d4eb4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4eae:	f7ff ffbb 	bl	d4e28 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4eb2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4eb4:	f7ff faca 	bl	d444c <HAL_RNG_GetRandomNumber>
   d4eb8:	4604      	mov	r4, r0
    srand(seed);
   d4eba:	f000 fd73 	bl	d59a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4ebe:	4b0b      	ldr	r3, [pc, #44]	; (d4eec <module_user_init_hook+0x5c>)
   d4ec0:	b113      	cbz	r3, d4ec8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4ec2:	4620      	mov	r0, r4
   d4ec4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4ec8:	2100      	movs	r1, #0
   d4eca:	4808      	ldr	r0, [pc, #32]	; (d4eec <module_user_init_hook+0x5c>)
   d4ecc:	f7ff fc0c 	bl	d46e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4ed4:	4806      	ldr	r0, [pc, #24]	; (d4ef0 <module_user_init_hook+0x60>)
   d4ed6:	2100      	movs	r1, #0
   d4ed8:	f7ff bb78 	b.w	d45cc <system_ctrl_set_app_request_handler>
   d4edc:	2003f400 	.word	0x2003f400
   d4ee0:	000d4dd1 	.word	0x000d4dd1
   d4ee4:	9a271c1e 	.word	0x9a271c1e
   d4ee8:	2003e674 	.word	0x2003e674
   d4eec:	00000000 	.word	0x00000000
   d4ef0:	000d4e59 	.word	0x000d4e59

000d4ef4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4ef4:	4770      	bx	lr

000d4ef6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4ef6:	2000      	movs	r0, #0
   d4ef8:	4770      	bx	lr

000d4efa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4efa:	b510      	push	{r4, lr}
   d4efc:	2110      	movs	r1, #16
   d4efe:	4604      	mov	r4, r0
   d4f00:	f000 fd25 	bl	d594e <_ZdlPvj>
   d4f04:	4620      	mov	r0, r4
   d4f06:	bd10      	pop	{r4, pc}

000d4f08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4f08:	b508      	push	{r3, lr}
      { delete this; }
   d4f0a:	f7ff fff6 	bl	d4efa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4f0e:	bd08      	pop	{r3, pc}

000d4f10 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4f10:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4f12:	2200      	movs	r2, #0
   d4f14:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4f18:	6002      	str	r2, [r0, #0]
   d4f1a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4f1c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f1e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4f20:	680c      	ldr	r4, [r1, #0]
   d4f22:	8085      	strh	r5, [r0, #4]
   d4f24:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f26:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4f28:	bd30      	pop	{r4, r5, pc}

000d4f2a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4f2a:	b510      	push	{r4, lr}
   d4f2c:	4604      	mov	r4, r0
    free((void*)msg_);
   d4f2e:	6800      	ldr	r0, [r0, #0]
   d4f30:	f7ff fbf2 	bl	d4718 <free>
}
   d4f34:	4620      	mov	r0, r4
   d4f36:	bd10      	pop	{r4, pc}

000d4f38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4f38:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4f3a:	68c4      	ldr	r4, [r0, #12]
   d4f3c:	b1f4      	cbz	r4, d4f7c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4f3e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4f40:	2b02      	cmp	r3, #2
   d4f42:	d103      	bne.n	d4f4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4f44:	f104 000c 	add.w	r0, r4, #12
   d4f48:	f7ff ffef 	bl	d4f2a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4f4c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4f4e:	b135      	cbz	r5, d4f5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d4f50:	4628      	mov	r0, r5
   d4f52:	f7ff ff0e 	bl	d4d72 <_ZNSt14_Function_baseD1Ev>
   d4f56:	2110      	movs	r1, #16
   d4f58:	4628      	mov	r0, r5
   d4f5a:	f000 fcf8 	bl	d594e <_ZdlPvj>
   d4f5e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4f60:	b135      	cbz	r5, d4f70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4f62:	4628      	mov	r0, r5
   d4f64:	f7ff ff05 	bl	d4d72 <_ZNSt14_Function_baseD1Ev>
   d4f68:	2110      	movs	r1, #16
   d4f6a:	4628      	mov	r0, r5
   d4f6c:	f000 fcef 	bl	d594e <_ZdlPvj>
   d4f70:	4620      	mov	r0, r4
   d4f72:	2114      	movs	r1, #20
   d4f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4f78:	f000 bce9 	b.w	d594e <_ZdlPvj>
   d4f7c:	bd38      	pop	{r3, r4, r5, pc}

000d4f7e <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d4f7e:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d4f80:	2308      	movs	r3, #8
   d4f82:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d4f86:	6803      	ldr	r3, [r0, #0]
   d4f88:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d4f8c:	7a03      	ldrb	r3, [r0, #8]
   d4f8e:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d4f92:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d4f94:	6843      	ldr	r3, [r0, #4]
   d4f96:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d4f98:	4668      	mov	r0, sp
   d4f9a:	f7ff fbad 	bl	d46f8 <spark_cloud_disconnect>
}
   d4f9e:	b003      	add	sp, #12
   d4fa0:	f85d fb04 	ldr.w	pc, [sp], #4

000d4fa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4fa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fa6:	460e      	mov	r6, r1
   d4fa8:	4604      	mov	r4, r0
   d4faa:	f856 3b04 	ldr.w	r3, [r6], #4
   d4fae:	9300      	str	r3, [sp, #0]
   d4fb0:	460d      	mov	r5, r1
   d4fb2:	a801      	add	r0, sp, #4
   d4fb4:	4631      	mov	r1, r6
   d4fb6:	f7ff fe15 	bl	d4be4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4fba:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4fbc:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d4fbe:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4fc0:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d4fc2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d4fc4:	2300      	movs	r3, #0
   d4fc6:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4fc8:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d4fca:	f7ff fe12 	bl	d4bf2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fce:	4630      	mov	r0, r6
   d4fd0:	f7ff fe0f 	bl	d4bf2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d4fd4:	4628      	mov	r0, r5
   d4fd6:	2108      	movs	r1, #8
   d4fd8:	f000 fcb9 	bl	d594e <_ZdlPvj>
        return p;
    }
   d4fdc:	4620      	mov	r0, r4
   d4fde:	b002      	add	sp, #8
   d4fe0:	bd70      	pop	{r4, r5, r6, pc}

000d4fe2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4fe2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4fe4:	b510      	push	{r4, lr}
      if (_M_empty())
   d4fe6:	b90a      	cbnz	r2, d4fec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4fe8:	f000 fcb5 	bl	d5956 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d4fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ff0:	68c3      	ldr	r3, [r0, #12]
   d4ff2:	4718      	bx	r3

000d4ff4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4ff4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4ff6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d4ff8:	f100 0110 	add.w	r1, r0, #16
   d4ffc:	f7ff fff1 	bl	d4fe2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d5000:	bd08      	pop	{r3, pc}

000d5002 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5002:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5004:	b510      	push	{r4, lr}
      if (_M_empty())
   d5006:	b90a      	cbnz	r2, d500c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5008:	f000 fca5 	bl	d5956 <_ZSt25__throw_bad_function_callv>
    }
   d500c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5010:	68c3      	ldr	r3, [r0, #12]
   d5012:	4718      	bx	r3

000d5014 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5014:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5016:	6800      	ldr	r0, [r0, #0]
   d5018:	f100 0110 	add.w	r1, r0, #16
   d501c:	f7ff fff1 	bl	d5002 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d5020:	bd08      	pop	{r3, pc}
	...

000d5024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5024:	b538      	push	{r3, r4, r5, lr}
   d5026:	2300      	movs	r3, #0
   d5028:	4604      	mov	r4, r0
   d502a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d502c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d502e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5030:	f7ff f82f 	bl	d4092 <_Znwj>
   d5034:	b128      	cbz	r0, d5042 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5036:	2301      	movs	r3, #1
   d5038:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d503c:	4b02      	ldr	r3, [pc, #8]	; (d5048 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d503e:	6003      	str	r3, [r0, #0]
   d5040:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5042:	6020      	str	r0, [r4, #0]
	}
   d5044:	4620      	mov	r0, r4
   d5046:	bd38      	pop	{r3, r4, r5, pc}
   d5048:	000d5c0c 	.word	0x000d5c0c

000d504c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d504c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d504e:	2300      	movs	r3, #0
   d5050:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5052:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5054:	4604      	mov	r4, r0
   d5056:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5058:	b12b      	cbz	r3, d5066 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d505a:	2202      	movs	r2, #2
   d505c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d505e:	68eb      	ldr	r3, [r5, #12]
   d5060:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5062:	68ab      	ldr	r3, [r5, #8]
   d5064:	60a3      	str	r3, [r4, #8]
    }
   d5066:	4620      	mov	r0, r4
   d5068:	bd38      	pop	{r3, r4, r5, pc}
	...

000d506c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d506c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d506e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5070:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5072:	4668      	mov	r0, sp
   d5074:	f7ff ff4c 	bl	d4f10 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5078:	f04f 0302 	mov.w	r3, #2
   d507c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5080:	2a00      	cmp	r2, #0
   d5082:	d103      	bne.n	d508c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5084:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5088:	2900      	cmp	r1, #0
   d508a:	d1f7      	bne.n	d507c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d508c:	d125      	bne.n	d50da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d508e:	f104 050c 	add.w	r5, r4, #12
   d5092:	4669      	mov	r1, sp
   d5094:	4628      	mov	r0, r5
   d5096:	f7ff ff3b 	bl	d4f10 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d509a:	f3bf 8f5b 	dmb	ish
   d509e:	2301      	movs	r3, #1
   d50a0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d50a2:	2000      	movs	r0, #0
   d50a4:	f104 0308 	add.w	r3, r4, #8
   d50a8:	f3bf 8f5b 	dmb	ish
   d50ac:	e853 6f00 	ldrex	r6, [r3]
   d50b0:	e843 0200 	strex	r2, r0, [r3]
   d50b4:	2a00      	cmp	r2, #0
   d50b6:	d1f9      	bne.n	d50ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d50b8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d50bc:	b16e      	cbz	r6, d50da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d50be:	f7ff fa75 	bl	d45ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d50c2:	b178      	cbz	r0, d50e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d50c4:	4629      	mov	r1, r5
   d50c6:	4630      	mov	r0, r6
   d50c8:	f7ff ff8b 	bl	d4fe2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d50cc:	4630      	mov	r0, r6
   d50ce:	f7ff fe50 	bl	d4d72 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d50d2:	2110      	movs	r1, #16
   d50d4:	4630      	mov	r0, r6
   d50d6:	f000 fc3a 	bl	d594e <_ZdlPvj>
        p_->setError(std::move(error));
   d50da:	4668      	mov	r0, sp
   d50dc:	f7ff ff25 	bl	d4f2a <_ZN8particle5ErrorD1Ev>
    }
   d50e0:	b009      	add	sp, #36	; 0x24
   d50e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d50e4:	4631      	mov	r1, r6
   d50e6:	a802      	add	r0, sp, #8
   d50e8:	f7ff ffb0 	bl	d504c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d50ec:	68e0      	ldr	r0, [r4, #12]
   d50ee:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d50f2:	b108      	cbz	r0, d50f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d50f4:	f000 fc82 	bl	d59fc <strdup>
        type_(type) {
   d50f8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d50fa:	2010      	movs	r0, #16
   d50fc:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5100:	f7fe ffc7 	bl	d4092 <_Znwj>
   d5104:	4605      	mov	r5, r0
   d5106:	b1e8      	cbz	r0, d5144 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d5108:	2700      	movs	r7, #0
   d510a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d510c:	2018      	movs	r0, #24
   d510e:	f7fe ffc0 	bl	d4092 <_Znwj>
   d5112:	4604      	mov	r4, r0
   d5114:	b188      	cbz	r0, d513a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d5116:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d5118:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d511a:	a802      	add	r0, sp, #8
   d511c:	f7ff fe38 	bl	d4d90 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5120:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5122:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5124:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5126:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5128:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d512a:	a906      	add	r1, sp, #24
   d512c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d512e:	60e3      	str	r3, [r4, #12]
   d5130:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d5134:	9205      	str	r2, [sp, #20]
   d5136:	f7ff feeb 	bl	d4f10 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d513a:	4b08      	ldr	r3, [pc, #32]	; (d515c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d513c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d513e:	4b08      	ldr	r3, [pc, #32]	; (d5160 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5140:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5142:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d5144:	a806      	add	r0, sp, #24
   d5146:	f7ff fef0 	bl	d4f2a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d514a:	a802      	add	r0, sp, #8
   d514c:	f7ff fe11 	bl	d4d72 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5150:	2200      	movs	r2, #0
   d5152:	4629      	mov	r1, r5
   d5154:	4803      	ldr	r0, [pc, #12]	; (d5164 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d5156:	f7ff fa31 	bl	d45bc <application_thread_invoke>
   d515a:	e7b7      	b.n	d50cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d515c:	000d4ff5 	.word	0x000d4ff5
   d5160:	000d528d 	.word	0x000d528d
   d5164:	000d57cd 	.word	0x000d57cd

000d5168 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d516c:	b08a      	sub	sp, #40	; 0x28
   d516e:	4605      	mov	r5, r0
   d5170:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5174:	460c      	mov	r4, r1
   d5176:	4617      	mov	r7, r2
   d5178:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d517a:	f7ff faa5 	bl	d46c8 <spark_cloud_flag_connected>
   d517e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5180:	4682      	mov	sl, r0
   d5182:	bb38      	cbnz	r0, d51d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5184:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5188:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d518a:	a905      	add	r1, sp, #20
   d518c:	4630      	mov	r0, r6
   d518e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5192:	f7ff febd 	bl	d4f10 <_ZN8particle5ErrorC1EOS0_>
   d5196:	2014      	movs	r0, #20
   d5198:	f7fe ff7b 	bl	d4092 <_Znwj>
   d519c:	4604      	mov	r4, r0
   d519e:	b148      	cbz	r0, d51b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d51a0:	2302      	movs	r3, #2
   d51a2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51a4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d51a6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51aa:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d51ac:	4631      	mov	r1, r6
   d51ae:	300c      	adds	r0, #12
   d51b0:	f7ff feae 	bl	d4f10 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d51b4:	4628      	mov	r0, r5
	: __shared_count(__p)
   d51b6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d51b8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d51bc:	f7ff ff32 	bl	d5024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d51c0:	4630      	mov	r0, r6
   d51c2:	f7ff feb2 	bl	d4f2a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d51c6:	a805      	add	r0, sp, #20
   d51c8:	f7ff feaf 	bl	d4f2a <_ZN8particle5ErrorD1Ev>
}
   d51cc:	4628      	mov	r0, r5
   d51ce:	b00a      	add	sp, #40	; 0x28
   d51d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d51d4:	230c      	movs	r3, #12
   d51d6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d51da:	2014      	movs	r0, #20
   d51dc:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d51e0:	9307      	str	r3, [sp, #28]
   d51e2:	f7fe ff56 	bl	d4092 <_Znwj>
   d51e6:	4601      	mov	r1, r0
   d51e8:	b128      	cbz	r0, d51f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d51ea:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d51ee:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51f2:	f880 a001 	strb.w	sl, [r0, #1]
   d51f6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d51f8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d51fa:	f7ff ff13 	bl	d5024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d51fe:	4b22      	ldr	r3, [pc, #136]	; (d5288 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d5200:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5202:	2008      	movs	r0, #8
   d5204:	f7fe ff45 	bl	d4092 <_Znwj>
   d5208:	4682      	mov	sl, r0
   d520a:	b128      	cbz	r0, d5218 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d520c:	9b03      	ldr	r3, [sp, #12]
   d520e:	f840 3b04 	str.w	r3, [r0], #4
   d5212:	a904      	add	r1, sp, #16
   d5214:	f7ff fce6 	bl	d4be4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5218:	9600      	str	r6, [sp, #0]
   d521a:	fa5f f389 	uxtb.w	r3, r9
   d521e:	4642      	mov	r2, r8
   d5220:	4639      	mov	r1, r7
   d5222:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d5224:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5228:	f7ff fa56 	bl	d46d8 <spark_send_event>
   d522c:	b9b8      	cbnz	r0, d525e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d522e:	9b03      	ldr	r3, [sp, #12]
   d5230:	785b      	ldrb	r3, [r3, #1]
   d5232:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5236:	b993      	cbnz	r3, d525e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5238:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d523c:	a905      	add	r1, sp, #20
   d523e:	a803      	add	r0, sp, #12
   d5240:	9205      	str	r2, [sp, #20]
   d5242:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5246:	f7ff ff11 	bl	d506c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d524a:	a805      	add	r0, sp, #20
   d524c:	f7ff fe6d 	bl	d4f2a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5250:	a805      	add	r0, sp, #20
   d5252:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5254:	f7ff fea6 	bl	d4fa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5258:	a806      	add	r0, sp, #24
   d525a:	f7ff fcca 	bl	d4bf2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d525e:	9b03      	ldr	r3, [sp, #12]
   d5260:	9305      	str	r3, [sp, #20]
   d5262:	a904      	add	r1, sp, #16
   d5264:	a806      	add	r0, sp, #24
   d5266:	f7ff fcbd 	bl	d4be4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d526a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d526c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d526e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5270:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d5272:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5274:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5276:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5278:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d527a:	f7ff fcba 	bl	d4bf2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d527e:	a804      	add	r0, sp, #16
   d5280:	f7ff fcb7 	bl	d4bf2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5284:	e7a2      	b.n	d51cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5286:	bf00      	nop
   d5288:	000d5351 	.word	0x000d5351

000d528c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d528c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d528e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5290:	4605      	mov	r5, r0
	  switch (__op)
   d5292:	d007      	beq.n	d52a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5294:	2a03      	cmp	r2, #3
   d5296:	d018      	beq.n	d52ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5298:	2a01      	cmp	r2, #1
   d529a:	d101      	bne.n	d52a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d529c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d529e:	6003      	str	r3, [r0, #0]
	}
   d52a0:	2000      	movs	r0, #0
   d52a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d52a4:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d52a6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d52a8:	f7fe fef3 	bl	d4092 <_Znwj>
   d52ac:	4604      	mov	r4, r0
   d52ae:	b150      	cbz	r0, d52c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d52b0:	4631      	mov	r1, r6
   d52b2:	f7ff fecb 	bl	d504c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d52b6:	6930      	ldr	r0, [r6, #16]
   d52b8:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d52bc:	b108      	cbz	r0, d52c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d52be:	f000 fb9d 	bl	d59fc <strdup>
        type_(type) {
   d52c2:	6120      	str	r0, [r4, #16]
   d52c4:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d52c6:	602c      	str	r4, [r5, #0]
	}
   d52c8:	e7ea      	b.n	d52a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d52ca:	6804      	ldr	r4, [r0, #0]
   d52cc:	2c00      	cmp	r4, #0
   d52ce:	d0e7      	beq.n	d52a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d52d0:	f104 0010 	add.w	r0, r4, #16
   d52d4:	f7ff fe29 	bl	d4f2a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d52d8:	4620      	mov	r0, r4
   d52da:	f7ff fd4a 	bl	d4d72 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d52de:	2118      	movs	r1, #24
   d52e0:	4620      	mov	r0, r4
   d52e2:	f000 fb34 	bl	d594e <_ZdlPvj>
   d52e6:	e7db      	b.n	d52a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d52e8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d52e8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d52ea:	2300      	movs	r3, #0
   d52ec:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d52ee:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d52f0:	4604      	mov	r4, r0
   d52f2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d52f4:	b12b      	cbz	r3, d5302 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d52f6:	2202      	movs	r2, #2
   d52f8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d52fa:	68eb      	ldr	r3, [r5, #12]
   d52fc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d52fe:	68ab      	ldr	r3, [r5, #8]
   d5300:	60a3      	str	r3, [r4, #8]
    }
   d5302:	4620      	mov	r0, r4
   d5304:	bd38      	pop	{r3, r4, r5, pc}

000d5306 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d5306:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5308:	b570      	push	{r4, r5, r6, lr}
   d530a:	4604      	mov	r4, r0
	  switch (__op)
   d530c:	d007      	beq.n	d531e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d530e:	2a03      	cmp	r2, #3
   d5310:	d012      	beq.n	d5338 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d5312:	2a01      	cmp	r2, #1
   d5314:	d101      	bne.n	d531a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5316:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5318:	6003      	str	r3, [r0, #0]
	}
   d531a:	2000      	movs	r0, #0
   d531c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d531e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d5320:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5322:	f7fe feb6 	bl	d4092 <_Znwj>
   d5326:	4605      	mov	r5, r0
   d5328:	b120      	cbz	r0, d5334 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d532a:	4631      	mov	r1, r6
   d532c:	f7ff ffdc 	bl	d52e8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5330:	7c33      	ldrb	r3, [r6, #16]
   d5332:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5334:	6025      	str	r5, [r4, #0]
	}
   d5336:	e7f0      	b.n	d531a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5338:	6804      	ldr	r4, [r0, #0]
   d533a:	2c00      	cmp	r4, #0
   d533c:	d0ed      	beq.n	d531a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d533e:	4620      	mov	r0, r4
   d5340:	f7ff fd17 	bl	d4d72 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5344:	2114      	movs	r1, #20
   d5346:	4620      	mov	r0, r4
   d5348:	f000 fb01 	bl	d594e <_ZdlPvj>
   d534c:	e7e5      	b.n	d531a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5350 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5350:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5352:	b089      	sub	sp, #36	; 0x24
   d5354:	4604      	mov	r4, r0
   d5356:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5358:	a801      	add	r0, sp, #4
   d535a:	4611      	mov	r1, r2
   d535c:	f7ff fe22 	bl	d4fa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5360:	b1a4      	cbz	r4, d538c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5362:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5364:	b11d      	cbz	r5, d536e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5366:	4628      	mov	r0, r5
   d5368:	f000 fb48 	bl	d59fc <strdup>
   d536c:	4605      	mov	r5, r0
   d536e:	a801      	add	r0, sp, #4
   d5370:	a903      	add	r1, sp, #12
        type_(type) {
   d5372:	9503      	str	r5, [sp, #12]
   d5374:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5378:	f7ff fe78 	bl	d506c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d537c:	a803      	add	r0, sp, #12
   d537e:	f7ff fdd4 	bl	d4f2a <_ZN8particle5ErrorD1Ev>
   d5382:	a802      	add	r0, sp, #8
   d5384:	f7ff fc35 	bl	d4bf2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5388:	b009      	add	sp, #36	; 0x24
   d538a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d538c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d538e:	2301      	movs	r3, #1
   d5390:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5394:	2a00      	cmp	r2, #0
   d5396:	d103      	bne.n	d53a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5398:	e8c5 3f41 	strexb	r1, r3, [r5]
   d539c:	2900      	cmp	r1, #0
   d539e:	d1f7      	bne.n	d5390 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d53a0:	d1ef      	bne.n	d5382 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d53a2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d53a4:	f3bf 8f5b 	dmb	ish
   d53a8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d53aa:	1d2b      	adds	r3, r5, #4
   d53ac:	f3bf 8f5b 	dmb	ish
   d53b0:	e853 6f00 	ldrex	r6, [r3]
   d53b4:	e843 4200 	strex	r2, r4, [r3]
   d53b8:	2a00      	cmp	r2, #0
   d53ba:	d1f9      	bne.n	d53b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d53bc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d53c0:	2e00      	cmp	r6, #0
   d53c2:	d0de      	beq.n	d5382 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d53c4:	4620      	mov	r0, r4
   d53c6:	f7ff f8f1 	bl	d45ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d53ca:	4607      	mov	r7, r0
   d53cc:	b160      	cbz	r0, d53e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d53ce:	f105 010c 	add.w	r1, r5, #12
   d53d2:	4630      	mov	r0, r6
   d53d4:	f7ff fe15 	bl	d5002 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d53d8:	4630      	mov	r0, r6
   d53da:	f7ff fcca 	bl	d4d72 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d53de:	2110      	movs	r1, #16
   d53e0:	4630      	mov	r0, r6
   d53e2:	f000 fab4 	bl	d594e <_ZdlPvj>
   d53e6:	e7cc      	b.n	d5382 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d53e8:	4631      	mov	r1, r6
   d53ea:	a803      	add	r0, sp, #12
   d53ec:	f7ff ff7c 	bl	d52e8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d53f0:	7b2b      	ldrb	r3, [r5, #12]
   d53f2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d53f6:	2010      	movs	r0, #16
   d53f8:	f7fe fe4b 	bl	d4092 <_Znwj>
   d53fc:	4605      	mov	r5, r0
   d53fe:	b1d0      	cbz	r0, d5436 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5400:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5402:	2014      	movs	r0, #20
   d5404:	f7fe fe45 	bl	d4092 <_Znwj>
   d5408:	4604      	mov	r4, r0
   d540a:	b178      	cbz	r0, d542c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d540c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d540e:	4601      	mov	r1, r0
   d5410:	a803      	add	r0, sp, #12
   d5412:	f7ff fcbd 	bl	d4d90 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5416:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5418:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d541a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d541c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d541e:	9205      	str	r2, [sp, #20]
   d5420:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5422:	60e3      	str	r3, [r4, #12]
   d5424:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5428:	9206      	str	r2, [sp, #24]
   d542a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d542c:	4b06      	ldr	r3, [pc, #24]	; (d5448 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d542e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5430:	4b06      	ldr	r3, [pc, #24]	; (d544c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5432:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5434:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5436:	a803      	add	r0, sp, #12
   d5438:	f7ff fc9b 	bl	d4d72 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d543c:	2200      	movs	r2, #0
   d543e:	4629      	mov	r1, r5
   d5440:	4803      	ldr	r0, [pc, #12]	; (d5450 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d5442:	f7ff f8bb 	bl	d45bc <application_thread_invoke>
   d5446:	e7c7      	b.n	d53d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5448:	000d5015 	.word	0x000d5015
   d544c:	000d5307 	.word	0x000d5307
   d5450:	000d57cd 	.word	0x000d57cd

000d5454 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5454:	4770      	bx	lr

000d5456 <_ZN9IPAddressD0Ev>:
   d5456:	b510      	push	{r4, lr}
   d5458:	2118      	movs	r1, #24
   d545a:	4604      	mov	r4, r0
   d545c:	f000 fa77 	bl	d594e <_ZdlPvj>
   d5460:	4620      	mov	r0, r4
   d5462:	bd10      	pop	{r4, pc}

000d5464 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5464:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5466:	7d03      	ldrb	r3, [r0, #20]
   d5468:	2b06      	cmp	r3, #6
{
   d546a:	b08d      	sub	sp, #52	; 0x34
   d546c:	460e      	mov	r6, r1
   d546e:	f100 0704 	add.w	r7, r0, #4
   d5472:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5476:	d012      	beq.n	d549e <_ZNK9IPAddress7printToER5Print+0x3a>
   d5478:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d547c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5480:	220a      	movs	r2, #10
   d5482:	4630      	mov	r0, r6
   d5484:	f7ff fc11 	bl	d4caa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5488:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d548a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d548c:	d019      	beq.n	d54c2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d548e:	2c00      	cmp	r4, #0
   d5490:	d0f4      	beq.n	d547c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5492:	212e      	movs	r1, #46	; 0x2e
   d5494:	4630      	mov	r0, r6
   d5496:	f7ff fbf9 	bl	d4c8c <_ZN5Print5printEc>
   d549a:	4404      	add	r4, r0
   d549c:	e7ee      	b.n	d547c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d549e:	232f      	movs	r3, #47	; 0x2f
   d54a0:	466a      	mov	r2, sp
   d54a2:	4639      	mov	r1, r7
   d54a4:	200a      	movs	r0, #10
		buf[0] = 0;
   d54a6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54aa:	f7fe ffef 	bl	d448c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d54ae:	4668      	mov	r0, sp
   d54b0:	f000 fac1 	bl	d5a36 <strlen>
   d54b4:	6833      	ldr	r3, [r6, #0]
   d54b6:	4602      	mov	r2, r0
   d54b8:	68db      	ldr	r3, [r3, #12]
   d54ba:	4669      	mov	r1, sp
   d54bc:	4630      	mov	r0, r6
   d54be:	4798      	blx	r3
   d54c0:	4604      	mov	r4, r0
    }
    return n;
}
   d54c2:	4620      	mov	r0, r4
   d54c4:	b00d      	add	sp, #52	; 0x34
   d54c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d54c8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d54c8:	b510      	push	{r4, lr}
   d54ca:	4b05      	ldr	r3, [pc, #20]	; (d54e0 <_ZN9IPAddressC1Ev+0x18>)
   d54cc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d54ce:	2211      	movs	r2, #17
   d54d0:	f840 3b04 	str.w	r3, [r0], #4
   d54d4:	2100      	movs	r1, #0
   d54d6:	f000 fa5d 	bl	d5994 <memset>
}
   d54da:	4620      	mov	r0, r4
   d54dc:	bd10      	pop	{r4, pc}
   d54de:	bf00      	nop
   d54e0:	000d5c28 	.word	0x000d5c28

000d54e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d54e4:	4603      	mov	r3, r0
   d54e6:	4a07      	ldr	r2, [pc, #28]	; (d5504 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d54e8:	b510      	push	{r4, lr}
   d54ea:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d54ee:	f101 0210 	add.w	r2, r1, #16
   d54f2:	f851 4b04 	ldr.w	r4, [r1], #4
   d54f6:	f843 4b04 	str.w	r4, [r3], #4
   d54fa:	4291      	cmp	r1, r2
   d54fc:	d1f9      	bne.n	d54f2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d54fe:	780a      	ldrb	r2, [r1, #0]
   d5500:	701a      	strb	r2, [r3, #0]
}
   d5502:	bd10      	pop	{r4, pc}
   d5504:	000d5c28 	.word	0x000d5c28

000d5508 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5508:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d550a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d550e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5512:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5516:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d551a:	2304      	movs	r3, #4
   d551c:	6041      	str	r1, [r0, #4]
   d551e:	7503      	strb	r3, [r0, #20]
}
   d5520:	bd10      	pop	{r4, pc}

000d5522 <_ZN9IPAddressaSEPKh>:
{
   d5522:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5524:	78cb      	ldrb	r3, [r1, #3]
   d5526:	9300      	str	r3, [sp, #0]
   d5528:	788b      	ldrb	r3, [r1, #2]
   d552a:	784a      	ldrb	r2, [r1, #1]
   d552c:	7809      	ldrb	r1, [r1, #0]
   d552e:	f7ff ffeb 	bl	d5508 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5532:	b002      	add	sp, #8
   d5534:	bd10      	pop	{r4, pc}

000d5536 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5536:	7441      	strb	r1, [r0, #17]
}
   d5538:	4770      	bx	lr

000d553a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d553a:	4770      	bx	lr

000d553c <_ZN9USBSerial4readEv>:
{
   d553c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d553e:	2100      	movs	r1, #0
   d5540:	7c00      	ldrb	r0, [r0, #16]
   d5542:	f7ff f803 	bl	d454c <HAL_USB_USART_Receive_Data>
}
   d5546:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d554a:	bd08      	pop	{r3, pc}

000d554c <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d554c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d554e:	2101      	movs	r1, #1
   d5550:	7c00      	ldrb	r0, [r0, #16]
   d5552:	f7fe fffb 	bl	d454c <HAL_USB_USART_Receive_Data>
}
   d5556:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d555a:	bd08      	pop	{r3, pc}

000d555c <_ZN9USBSerial17availableForWriteEv>:
{
   d555c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d555e:	7c00      	ldrb	r0, [r0, #16]
   d5560:	f7fe ffec 	bl	d453c <HAL_USB_USART_Available_Data_For_Write>
}
   d5564:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5568:	bd08      	pop	{r3, pc}

000d556a <_ZN9USBSerial9availableEv>:
{
   d556a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d556c:	7c00      	ldrb	r0, [r0, #16]
   d556e:	f7fe ffdd 	bl	d452c <HAL_USB_USART_Available_Data>
}
   d5572:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5576:	bd08      	pop	{r3, pc}

000d5578 <_ZN9USBSerial5writeEh>:
{
   d5578:	b513      	push	{r0, r1, r4, lr}
   d557a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d557c:	7c00      	ldrb	r0, [r0, #16]
{
   d557e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5580:	f7fe ffdc 	bl	d453c <HAL_USB_USART_Available_Data_For_Write>
   d5584:	2800      	cmp	r0, #0
   d5586:	9901      	ldr	r1, [sp, #4]
   d5588:	dc01      	bgt.n	d558e <_ZN9USBSerial5writeEh+0x16>
   d558a:	7c60      	ldrb	r0, [r4, #17]
   d558c:	b120      	cbz	r0, d5598 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d558e:	7c20      	ldrb	r0, [r4, #16]
   d5590:	f7fe ffe4 	bl	d455c <HAL_USB_USART_Send_Data>
   d5594:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5598:	b002      	add	sp, #8
   d559a:	bd10      	pop	{r4, pc}

000d559c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d559c:	7c00      	ldrb	r0, [r0, #16]
   d559e:	f7fe bfe5 	b.w	d456c <HAL_USB_USART_Flush_Data>

000d55a2 <_ZN9USBSerialD0Ev>:
   d55a2:	b510      	push	{r4, lr}
   d55a4:	2114      	movs	r1, #20
   d55a6:	4604      	mov	r4, r0
   d55a8:	f000 f9d1 	bl	d594e <_ZdlPvj>
   d55ac:	4620      	mov	r0, r4
   d55ae:	bd10      	pop	{r4, pc}

000d55b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d55b0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d55b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d55b6:	4604      	mov	r4, r0
   d55b8:	4608      	mov	r0, r1
   d55ba:	2100      	movs	r1, #0
   d55bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d55c0:	4b04      	ldr	r3, [pc, #16]	; (d55d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d55c2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d55c4:	2301      	movs	r3, #1
  _serial = serial;
   d55c6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d55c8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d55ca:	4611      	mov	r1, r2
   d55cc:	f7fe ff9e 	bl	d450c <HAL_USB_USART_Init>
}
   d55d0:	4620      	mov	r0, r4
   d55d2:	bd10      	pop	{r4, pc}
   d55d4:	000d5c3c 	.word	0x000d5c3c

000d55d8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d55d8:	7c00      	ldrb	r0, [r0, #16]
   d55da:	2200      	movs	r2, #0
   d55dc:	f7fe bf9e 	b.w	d451c <HAL_USB_USART_Begin>

000d55e0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d55e0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d55e2:	2214      	movs	r2, #20
{
   d55e4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d55e6:	2100      	movs	r1, #0
   d55e8:	f000 f9d4 	bl	d5994 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d55ec:	4620      	mov	r0, r4
   d55ee:	bd10      	pop	{r4, pc}

000d55f0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d55f0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55f2:	4c10      	ldr	r4, [pc, #64]	; (d5634 <_Z16_fetch_usbserialv+0x44>)
{
   d55f4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d55f6:	a803      	add	r0, sp, #12
   d55f8:	f7ff fff2 	bl	d55e0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55fc:	7821      	ldrb	r1, [r4, #0]
   d55fe:	f3bf 8f5b 	dmb	ish
   d5602:	f011 0101 	ands.w	r1, r1, #1
   d5606:	d111      	bne.n	d562c <_Z16_fetch_usbserialv+0x3c>
   d5608:	4620      	mov	r0, r4
   d560a:	9101      	str	r1, [sp, #4]
   d560c:	f7fe fd45 	bl	d409a <__cxa_guard_acquire>
   d5610:	9901      	ldr	r1, [sp, #4]
   d5612:	b158      	cbz	r0, d562c <_Z16_fetch_usbserialv+0x3c>
   d5614:	aa03      	add	r2, sp, #12
   d5616:	4808      	ldr	r0, [pc, #32]	; (d5638 <_Z16_fetch_usbserialv+0x48>)
   d5618:	f7ff ffca 	bl	d55b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d561c:	4620      	mov	r0, r4
   d561e:	f7fe fd41 	bl	d40a4 <__cxa_guard_release>
   d5622:	4a06      	ldr	r2, [pc, #24]	; (d563c <_Z16_fetch_usbserialv+0x4c>)
   d5624:	4906      	ldr	r1, [pc, #24]	; (d5640 <_Z16_fetch_usbserialv+0x50>)
   d5626:	4804      	ldr	r0, [pc, #16]	; (d5638 <_Z16_fetch_usbserialv+0x48>)
   d5628:	f000 f98c 	bl	d5944 <__aeabi_atexit>
	return _usbserial;
}
   d562c:	4802      	ldr	r0, [pc, #8]	; (d5638 <_Z16_fetch_usbserialv+0x48>)
   d562e:	b008      	add	sp, #32
   d5630:	bd10      	pop	{r4, pc}
   d5632:	bf00      	nop
   d5634:	2003e67c 	.word	0x2003e67c
   d5638:	2003e680 	.word	0x2003e680
   d563c:	2003e62c 	.word	0x2003e62c
   d5640:	000d553b 	.word	0x000d553b

000d5644 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5644:	2200      	movs	r2, #0
   d5646:	6840      	ldr	r0, [r0, #4]
   d5648:	4611      	mov	r1, r2
   d564a:	f7fe bff5 	b.w	d4638 <network_ready>

000d564e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d564e:	2200      	movs	r2, #0
   d5650:	6840      	ldr	r0, [r0, #4]
   d5652:	4611      	mov	r1, r2
   d5654:	f7ff b810 	b.w	d4678 <network_listening>

000d5658 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5658:	2200      	movs	r2, #0
   d565a:	6840      	ldr	r0, [r0, #4]
   d565c:	4611      	mov	r1, r2
   d565e:	f7ff b81b 	b.w	d4698 <network_get_listen_timeout>

000d5662 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5662:	6840      	ldr	r0, [r0, #4]
   d5664:	2200      	movs	r2, #0
   d5666:	f7ff b80f 	b.w	d4688 <network_set_listen_timeout>

000d566a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d566a:	6840      	ldr	r0, [r0, #4]
   d566c:	2200      	movs	r2, #0
   d566e:	f081 0101 	eor.w	r1, r1, #1
   d5672:	f7fe bff9 	b.w	d4668 <network_listen>

000d5676 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5676:	2300      	movs	r3, #0
   d5678:	6840      	ldr	r0, [r0, #4]
   d567a:	461a      	mov	r2, r3
   d567c:	4619      	mov	r1, r3
   d567e:	f7fe bfe3 	b.w	d4648 <network_on>

000d5682 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5682:	2200      	movs	r2, #0
   d5684:	6840      	ldr	r0, [r0, #4]
   d5686:	4611      	mov	r1, r2
   d5688:	f7fe bfc6 	b.w	d4618 <network_connecting>

000d568c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d568c:	6840      	ldr	r0, [r0, #4]
   d568e:	2200      	movs	r2, #0
   d5690:	2102      	movs	r1, #2
   d5692:	f7fe bfc9 	b.w	d4628 <network_disconnect>

000d5696 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5696:	2300      	movs	r3, #0
   d5698:	6840      	ldr	r0, [r0, #4]
   d569a:	461a      	mov	r2, r3
   d569c:	f7fe bfb4 	b.w	d4608 <network_connect>

000d56a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d56a0:	4b08      	ldr	r3, [pc, #32]	; (d56c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d56a2:	b510      	push	{r4, lr}
   d56a4:	2428      	movs	r4, #40	; 0x28
   d56a6:	4622      	mov	r2, r4
   d56a8:	4618      	mov	r0, r3
   d56aa:	2100      	movs	r1, #0
   d56ac:	f000 f972 	bl	d5994 <memset>
   d56b0:	4b05      	ldr	r3, [pc, #20]	; (d56c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d56b2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d56b4:	f04f 32ff 	mov.w	r2, #4294967295
   d56b8:	6042      	str	r2, [r0, #4]
   d56ba:	2204      	movs	r2, #4
   d56bc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d56be:	4a03      	ldr	r2, [pc, #12]	; (d56cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d56c0:	601a      	str	r2, [r3, #0]
   d56c2:	bd10      	pop	{r4, pc}
   d56c4:	2003e69c 	.word	0x2003e69c
   d56c8:	2003e694 	.word	0x2003e694
   d56cc:	000d5c6c 	.word	0x000d5c6c

000d56d0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d56d0:	4770      	bx	lr

000d56d2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d56d2:	7441      	strb	r1, [r0, #17]
}
   d56d4:	4770      	bx	lr

000d56d6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d56d6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d56d8:	7c00      	ldrb	r0, [r0, #16]
   d56da:	f7fe ff0f 	bl	d44fc <hal_usart_available_data_for_write>
}
   d56de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56e2:	bd08      	pop	{r3, pc}

000d56e4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d56e4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d56e6:	7c00      	ldrb	r0, [r0, #16]
   d56e8:	f7fe fee8 	bl	d44bc <hal_usart_available>
}
   d56ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56f0:	bd08      	pop	{r3, pc}

000d56f2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d56f2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d56f4:	7c00      	ldrb	r0, [r0, #16]
   d56f6:	f7fe fef1 	bl	d44dc <hal_usart_peek>
}
   d56fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d56fe:	bd08      	pop	{r3, pc}

000d5700 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5700:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5702:	7c00      	ldrb	r0, [r0, #16]
   d5704:	f7fe fee2 	bl	d44cc <hal_usart_read>
}
   d5708:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d570c:	bd08      	pop	{r3, pc}

000d570e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d570e:	7c00      	ldrb	r0, [r0, #16]
   d5710:	f7fe beec 	b.w	d44ec <hal_usart_flush>

000d5714 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5714:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5716:	7c45      	ldrb	r5, [r0, #17]
{
   d5718:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d571a:	b12d      	cbz	r5, d5728 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d571c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d571e:	b003      	add	sp, #12
   d5720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5724:	f7fe bec2 	b.w	d44ac <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5728:	7c00      	ldrb	r0, [r0, #16]
   d572a:	9101      	str	r1, [sp, #4]
   d572c:	f7fe fee6 	bl	d44fc <hal_usart_available_data_for_write>
   d5730:	2800      	cmp	r0, #0
   d5732:	9901      	ldr	r1, [sp, #4]
   d5734:	dcf2      	bgt.n	d571c <_ZN11USARTSerial5writeEh+0x8>
}
   d5736:	4628      	mov	r0, r5
   d5738:	b003      	add	sp, #12
   d573a:	bd30      	pop	{r4, r5, pc}

000d573c <_ZN11USARTSerialD0Ev>:
   d573c:	b510      	push	{r4, lr}
   d573e:	2114      	movs	r1, #20
   d5740:	4604      	mov	r4, r0
   d5742:	f000 f904 	bl	d594e <_ZdlPvj>
   d5746:	4620      	mov	r0, r4
   d5748:	bd10      	pop	{r4, pc}
	...

000d574c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d574c:	b510      	push	{r4, lr}
   d574e:	f04f 0c00 	mov.w	ip, #0
   d5752:	4604      	mov	r4, r0
   d5754:	4608      	mov	r0, r1
   d5756:	4611      	mov	r1, r2
   d5758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d575c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5760:	4a04      	ldr	r2, [pc, #16]	; (d5774 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5762:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5764:	2201      	movs	r2, #1
  _serial = serial;
   d5766:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5768:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d576a:	461a      	mov	r2, r3
   d576c:	f7fe fe96 	bl	d449c <hal_usart_init>
}
   d5770:	4620      	mov	r0, r4
   d5772:	bd10      	pop	{r4, pc}
   d5774:	000d5ca0 	.word	0x000d5ca0

000d5778 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5778:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d577a:	4c0e      	ldr	r4, [pc, #56]	; (d57b4 <_Z22__fetch_global_Serial1v+0x3c>)
   d577c:	7821      	ldrb	r1, [r4, #0]
   d577e:	f3bf 8f5b 	dmb	ish
   d5782:	f011 0101 	ands.w	r1, r1, #1
   d5786:	d112      	bne.n	d57ae <_Z22__fetch_global_Serial1v+0x36>
   d5788:	4620      	mov	r0, r4
   d578a:	9101      	str	r1, [sp, #4]
   d578c:	f7fe fc85 	bl	d409a <__cxa_guard_acquire>
   d5790:	9901      	ldr	r1, [sp, #4]
   d5792:	b160      	cbz	r0, d57ae <_Z22__fetch_global_Serial1v+0x36>
   d5794:	4a08      	ldr	r2, [pc, #32]	; (d57b8 <_Z22__fetch_global_Serial1v+0x40>)
   d5796:	4b09      	ldr	r3, [pc, #36]	; (d57bc <_Z22__fetch_global_Serial1v+0x44>)
   d5798:	4809      	ldr	r0, [pc, #36]	; (d57c0 <_Z22__fetch_global_Serial1v+0x48>)
   d579a:	f7ff ffd7 	bl	d574c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d579e:	4620      	mov	r0, r4
   d57a0:	f7fe fc80 	bl	d40a4 <__cxa_guard_release>
   d57a4:	4a07      	ldr	r2, [pc, #28]	; (d57c4 <_Z22__fetch_global_Serial1v+0x4c>)
   d57a6:	4908      	ldr	r1, [pc, #32]	; (d57c8 <_Z22__fetch_global_Serial1v+0x50>)
   d57a8:	4805      	ldr	r0, [pc, #20]	; (d57c0 <_Z22__fetch_global_Serial1v+0x48>)
   d57aa:	f000 f8cb 	bl	d5944 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d57ae:	4804      	ldr	r0, [pc, #16]	; (d57c0 <_Z22__fetch_global_Serial1v+0x48>)
   d57b0:	b002      	add	sp, #8
   d57b2:	bd10      	pop	{r4, pc}
   d57b4:	2003e6c4 	.word	0x2003e6c4
   d57b8:	2003e6c8 	.word	0x2003e6c8
   d57bc:	2003e74c 	.word	0x2003e74c
   d57c0:	2003e7d0 	.word	0x2003e7d0
   d57c4:	2003e62c 	.word	0x2003e62c
   d57c8:	000d56d1 	.word	0x000d56d1

000d57cc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d57cc:	b510      	push	{r4, lr}
      if (_M_empty())
   d57ce:	6883      	ldr	r3, [r0, #8]
   d57d0:	4604      	mov	r4, r0
   d57d2:	b90b      	cbnz	r3, d57d8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d57d4:	f000 f8bf 	bl	d5956 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d57d8:	68c3      	ldr	r3, [r0, #12]
   d57da:	4798      	blx	r3
      if (_M_manager)
   d57dc:	68a3      	ldr	r3, [r4, #8]
   d57de:	b11b      	cbz	r3, d57e8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d57e0:	2203      	movs	r2, #3
   d57e2:	4621      	mov	r1, r4
   d57e4:	4620      	mov	r0, r4
   d57e6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d57e8:	4620      	mov	r0, r4
   d57ea:	2110      	movs	r1, #16
}
   d57ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d57f0:	f000 b8ad 	b.w	d594e <_ZdlPvj>

000d57f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d57f4:	2300      	movs	r3, #0
   d57f6:	6840      	ldr	r0, [r0, #4]
   d57f8:	461a      	mov	r2, r3
   d57fa:	f7fe bf05 	b.w	d4608 <network_connect>

000d57fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d57fe:	6840      	ldr	r0, [r0, #4]
   d5800:	2200      	movs	r2, #0
   d5802:	2102      	movs	r1, #2
   d5804:	f7fe bf10 	b.w	d4628 <network_disconnect>

000d5808 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5808:	2200      	movs	r2, #0
   d580a:	6840      	ldr	r0, [r0, #4]
   d580c:	4611      	mov	r1, r2
   d580e:	f7fe bf03 	b.w	d4618 <network_connecting>

000d5812 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5812:	2200      	movs	r2, #0
   d5814:	6840      	ldr	r0, [r0, #4]
   d5816:	4611      	mov	r1, r2
   d5818:	f7fe bf0e 	b.w	d4638 <network_ready>

000d581c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d581c:	2300      	movs	r3, #0
   d581e:	6840      	ldr	r0, [r0, #4]
   d5820:	461a      	mov	r2, r3
   d5822:	4619      	mov	r1, r3
   d5824:	f7fe bf10 	b.w	d4648 <network_on>

000d5828 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5828:	2300      	movs	r3, #0
   d582a:	6840      	ldr	r0, [r0, #4]
   d582c:	461a      	mov	r2, r3
   d582e:	4619      	mov	r1, r3
   d5830:	f7fe bf12 	b.w	d4658 <network_off>

000d5834 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5834:	6840      	ldr	r0, [r0, #4]
   d5836:	2200      	movs	r2, #0
   d5838:	f081 0101 	eor.w	r1, r1, #1
   d583c:	f7fe bf14 	b.w	d4668 <network_listen>

000d5840 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5840:	6840      	ldr	r0, [r0, #4]
   d5842:	2200      	movs	r2, #0
   d5844:	f7fe bf20 	b.w	d4688 <network_set_listen_timeout>

000d5848 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5848:	2200      	movs	r2, #0
   d584a:	6840      	ldr	r0, [r0, #4]
   d584c:	4611      	mov	r1, r2
   d584e:	f7fe bf23 	b.w	d4698 <network_get_listen_timeout>

000d5852 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5852:	2200      	movs	r2, #0
   d5854:	6840      	ldr	r0, [r0, #4]
   d5856:	4611      	mov	r1, r2
   d5858:	f7fe bf0e 	b.w	d4678 <network_listening>

000d585c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d585c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5860:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5862:	b095      	sub	sp, #84	; 0x54
   d5864:	4616      	mov	r6, r2
   d5866:	460d      	mov	r5, r1
   d5868:	4607      	mov	r7, r0
    IPAddress addr;
   d586a:	f7ff fe2d 	bl	d54c8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d586e:	4621      	mov	r1, r4
   d5870:	2218      	movs	r2, #24
   d5872:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5874:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5876:	f000 f88d 	bl	d5994 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d587a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d587c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5880:	4621      	mov	r1, r4
   d5882:	466b      	mov	r3, sp
   d5884:	aa0c      	add	r2, sp, #48	; 0x30
   d5886:	4630      	mov	r0, r6
   d5888:	f7fe fdd8 	bl	d443c <netdb_getaddrinfo>
    if (!r) {
   d588c:	4604      	mov	r4, r0
   d588e:	2800      	cmp	r0, #0
   d5890:	d146      	bne.n	d5920 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5892:	4602      	mov	r2, r0
   d5894:	2101      	movs	r1, #1
   d5896:	6868      	ldr	r0, [r5, #4]
   d5898:	f7fe fece 	bl	d4638 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d589c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d589e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58a0:	4622      	mov	r2, r4
   d58a2:	6868      	ldr	r0, [r5, #4]
   d58a4:	f7fe fec8 	bl	d4638 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58a8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58aa:	4681      	mov	r9, r0
        bool ok = false;
   d58ac:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58ae:	2e00      	cmp	r6, #0
   d58b0:	d036      	beq.n	d5920 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d58b2:	2900      	cmp	r1, #0
   d58b4:	d134      	bne.n	d5920 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d58b6:	6873      	ldr	r3, [r6, #4]
   d58b8:	2b02      	cmp	r3, #2
   d58ba:	d003      	beq.n	d58c4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d58bc:	2b0a      	cmp	r3, #10
   d58be:	d00b      	beq.n	d58d8 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58c0:	69f6      	ldr	r6, [r6, #28]
   d58c2:	e7f4      	b.n	d58ae <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d58c4:	f1b8 0f00 	cmp.w	r8, #0
   d58c8:	d004      	beq.n	d58d4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d58ca:	6971      	ldr	r1, [r6, #20]
   d58cc:	4638      	mov	r0, r7
   d58ce:	3104      	adds	r1, #4
   d58d0:	f7ff fe27 	bl	d5522 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d58d4:	4641      	mov	r1, r8
   d58d6:	e7f3      	b.n	d58c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d58d8:	f1b9 0f00 	cmp.w	r9, #0
   d58dc:	d101      	bne.n	d58e2 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d58de:	4649      	mov	r1, r9
   d58e0:	e7ee      	b.n	d58c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d58e2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d58e4:	2210      	movs	r2, #16
   d58e6:	a801      	add	r0, sp, #4
   d58e8:	f000 f854 	bl	d5994 <memset>
                    a.v = 6;
   d58ec:	2306      	movs	r3, #6
   d58ee:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d58f2:	ad01      	add	r5, sp, #4
   d58f4:	f104 0308 	add.w	r3, r4, #8
   d58f8:	3418      	adds	r4, #24
   d58fa:	6818      	ldr	r0, [r3, #0]
   d58fc:	6859      	ldr	r1, [r3, #4]
   d58fe:	462a      	mov	r2, r5
   d5900:	c203      	stmia	r2!, {r0, r1}
   d5902:	3308      	adds	r3, #8
   d5904:	42a3      	cmp	r3, r4
   d5906:	4615      	mov	r5, r2
   d5908:	d1f7      	bne.n	d58fa <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d590a:	a901      	add	r1, sp, #4
   d590c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d590e:	ad07      	add	r5, sp, #28
   d5910:	f7ff fde8 	bl	d54e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5916:	1d3c      	adds	r4, r7, #4
   d5918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d591a:	682b      	ldr	r3, [r5, #0]
   d591c:	7023      	strb	r3, [r4, #0]
   d591e:	e7de      	b.n	d58de <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5920:	9800      	ldr	r0, [sp, #0]
   d5922:	f7fe fd83 	bl	d442c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5926:	4638      	mov	r0, r7
   d5928:	b015      	add	sp, #84	; 0x54
   d592a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5930 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5930:	4b02      	ldr	r3, [pc, #8]	; (d593c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5932:	4a03      	ldr	r2, [pc, #12]	; (d5940 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5934:	601a      	str	r2, [r3, #0]
   d5936:	2200      	movs	r2, #0
   d5938:	605a      	str	r2, [r3, #4]

} // spark
   d593a:	4770      	bx	lr
   d593c:	2003e7e4 	.word	0x2003e7e4
   d5940:	000d5cd0 	.word	0x000d5cd0

000d5944 <__aeabi_atexit>:
   d5944:	460b      	mov	r3, r1
   d5946:	4601      	mov	r1, r0
   d5948:	4618      	mov	r0, r3
   d594a:	f000 b807 	b.w	d595c <__cxa_atexit>

000d594e <_ZdlPvj>:
   d594e:	f7fe bba2 	b.w	d4096 <_ZdlPv>

000d5952 <_ZnwjRKSt9nothrow_t>:
   d5952:	f7fe bb9e 	b.w	d4092 <_Znwj>

000d5956 <_ZSt25__throw_bad_function_callv>:
   d5956:	b508      	push	{r3, lr}
   d5958:	f7fe fef6 	bl	d4748 <abort>

000d595c <__cxa_atexit>:
   d595c:	b510      	push	{r4, lr}
   d595e:	4c05      	ldr	r4, [pc, #20]	; (d5974 <__cxa_atexit+0x18>)
   d5960:	4613      	mov	r3, r2
   d5962:	b12c      	cbz	r4, d5970 <__cxa_atexit+0x14>
   d5964:	460a      	mov	r2, r1
   d5966:	4601      	mov	r1, r0
   d5968:	2002      	movs	r0, #2
   d596a:	f3af 8000 	nop.w
   d596e:	bd10      	pop	{r4, pc}
   d5970:	4620      	mov	r0, r4
   d5972:	e7fc      	b.n	d596e <__cxa_atexit+0x12>
   d5974:	00000000 	.word	0x00000000

000d5978 <memcpy>:
   d5978:	440a      	add	r2, r1
   d597a:	4291      	cmp	r1, r2
   d597c:	f100 33ff 	add.w	r3, r0, #4294967295
   d5980:	d100      	bne.n	d5984 <memcpy+0xc>
   d5982:	4770      	bx	lr
   d5984:	b510      	push	{r4, lr}
   d5986:	f811 4b01 	ldrb.w	r4, [r1], #1
   d598a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d598e:	4291      	cmp	r1, r2
   d5990:	d1f9      	bne.n	d5986 <memcpy+0xe>
   d5992:	bd10      	pop	{r4, pc}

000d5994 <memset>:
   d5994:	4402      	add	r2, r0
   d5996:	4603      	mov	r3, r0
   d5998:	4293      	cmp	r3, r2
   d599a:	d100      	bne.n	d599e <memset+0xa>
   d599c:	4770      	bx	lr
   d599e:	f803 1b01 	strb.w	r1, [r3], #1
   d59a2:	e7f9      	b.n	d5998 <memset+0x4>

000d59a4 <srand>:
   d59a4:	b538      	push	{r3, r4, r5, lr}
   d59a6:	4b0d      	ldr	r3, [pc, #52]	; (d59dc <srand+0x38>)
   d59a8:	681d      	ldr	r5, [r3, #0]
   d59aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d59ac:	4604      	mov	r4, r0
   d59ae:	b97b      	cbnz	r3, d59d0 <srand+0x2c>
   d59b0:	2018      	movs	r0, #24
   d59b2:	f7fe fea9 	bl	d4708 <malloc>
   d59b6:	4a0a      	ldr	r2, [pc, #40]	; (d59e0 <srand+0x3c>)
   d59b8:	4b0a      	ldr	r3, [pc, #40]	; (d59e4 <srand+0x40>)
   d59ba:	63a8      	str	r0, [r5, #56]	; 0x38
   d59bc:	e9c0 2300 	strd	r2, r3, [r0]
   d59c0:	4b09      	ldr	r3, [pc, #36]	; (d59e8 <srand+0x44>)
   d59c2:	6083      	str	r3, [r0, #8]
   d59c4:	230b      	movs	r3, #11
   d59c6:	8183      	strh	r3, [r0, #12]
   d59c8:	2201      	movs	r2, #1
   d59ca:	2300      	movs	r3, #0
   d59cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d59d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d59d2:	2200      	movs	r2, #0
   d59d4:	611c      	str	r4, [r3, #16]
   d59d6:	615a      	str	r2, [r3, #20]
   d59d8:	bd38      	pop	{r3, r4, r5, pc}
   d59da:	bf00      	nop
   d59dc:	2003e5c8 	.word	0x2003e5c8
   d59e0:	abcd330e 	.word	0xabcd330e
   d59e4:	e66d1234 	.word	0xe66d1234
   d59e8:	0005deec 	.word	0x0005deec

000d59ec <strcpy>:
   d59ec:	4603      	mov	r3, r0
   d59ee:	f811 2b01 	ldrb.w	r2, [r1], #1
   d59f2:	f803 2b01 	strb.w	r2, [r3], #1
   d59f6:	2a00      	cmp	r2, #0
   d59f8:	d1f9      	bne.n	d59ee <strcpy+0x2>
   d59fa:	4770      	bx	lr

000d59fc <strdup>:
   d59fc:	4b02      	ldr	r3, [pc, #8]	; (d5a08 <strdup+0xc>)
   d59fe:	4601      	mov	r1, r0
   d5a00:	6818      	ldr	r0, [r3, #0]
   d5a02:	f000 b803 	b.w	d5a0c <_strdup_r>
   d5a06:	bf00      	nop
   d5a08:	2003e5c8 	.word	0x2003e5c8

000d5a0c <_strdup_r>:
   d5a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5a0e:	4604      	mov	r4, r0
   d5a10:	4608      	mov	r0, r1
   d5a12:	460d      	mov	r5, r1
   d5a14:	f000 f80f 	bl	d5a36 <strlen>
   d5a18:	1c42      	adds	r2, r0, #1
   d5a1a:	4611      	mov	r1, r2
   d5a1c:	4620      	mov	r0, r4
   d5a1e:	9201      	str	r2, [sp, #4]
   d5a20:	f7fe fe9a 	bl	d4758 <_malloc_r>
   d5a24:	4604      	mov	r4, r0
   d5a26:	b118      	cbz	r0, d5a30 <_strdup_r+0x24>
   d5a28:	9a01      	ldr	r2, [sp, #4]
   d5a2a:	4629      	mov	r1, r5
   d5a2c:	f7ff ffa4 	bl	d5978 <memcpy>
   d5a30:	4620      	mov	r0, r4
   d5a32:	b003      	add	sp, #12
   d5a34:	bd30      	pop	{r4, r5, pc}

000d5a36 <strlen>:
   d5a36:	4603      	mov	r3, r0
   d5a38:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5a3c:	2a00      	cmp	r2, #0
   d5a3e:	d1fb      	bne.n	d5a38 <strlen+0x2>
   d5a40:	1a18      	subs	r0, r3, r0
   d5a42:	3801      	subs	r0, #1
   d5a44:	4770      	bx	lr

000d5a46 <link_code_end>:
	...

000d5a48 <dynalib_user>:
   d5a48:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5a58:	0000 0000 655a 6f72 7320 656c 7065 7420     ....Zero sleep t
   d5a68:	6d69 2c65 6120 6a64 7375 6974 676e 7420     ime, adjusting t
   d5a78:	206f 3031 7320 6365 6e6f 7364 7320 656c     o 10 seconds sle
   d5a88:	7065 7420 6d69 2e65 4700 696f 676e 7420     ep time..Going t
   d5a98:	206f 6c73 6565 2070 6f66 2072 6425 6d20     o sleep for %d m
   d5aa8:	6e69 7475 7365 2520 2064 6573 6f63 646e     inutes %d second
   d5ab8:	2e73 4300 6e6f 656e 7463 6e69 2067 6f74     s..Connecting to
   d5ac8:	6320 6c65 756c 616c 2072 2e2e 202e 4300      cellular ... .C
   d5ad8:	6c65 206c 6e4f 2000 2d20 4320 6c65 206c     ell On.  - Cell 
   d5ae8:	6f43 6e6e 6365 0074 6925 4600 4941 454c     Connect.%i.FAILE
   d5af8:	2e44 2020 6f43 6c75 6e64 7427 6320 6e6f     D.  Couldn't con
   d5b08:	656e 7463 7420 206f 6563 6c6c 6c75 7261     nect to cellular
   d5b18:	002e 4b4f 002e 6f43 6e6e 6365 6974 676e     ..OK..Connecting
   d5b28:	7420 206f 6c63 756f 2064 2e2e 202e 4300      to cloud ... .C
   d5b38:	756f 646c 276e 2074 6f63 6e6e 6365 2074     ouldn't connect 
   d5b48:	6f74 4320 6f6c 6475 002e 3d3d 3d3d 4c20     to Cloud..==== L
   d5b58:	4f4f 2050 3d3d 3d3d 6300 6c65 3a6c 0020     OOP ====.cell: .
   d5b68:	202c 6320 6f6c 6475 203a 6300 6e6f 656e     ,  cloud: .conne
   d5b78:	7463 6954 656d 0000                         ctTime..

000d5b80 <_ZTVN5spark13EthernetClassE>:
	...
   d5b88:	47d7 000d 47cd 000d 47c3 000d 47b9 000d     .G...G...G...G..
   d5b98:	47ad 000d 47a1 000d 4795 000d 478d 000d     .G...G...G...G..
   d5ba8:	4783 000d 4779 000d 585d 000d 6977 6972     .G..yG..]X..wiri
   d5bb8:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   d5bc8:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   d5bd8:	6920 766e 6c61 6469 002e 7061 0070 5925      invalid..app.%Y
   d5be8:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
   d5bf8:	007a 7361 7463 6d69 0065 0000               z.asctime...

000d5c04 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5c0c:	4ef5 000d 4efb 000d 4f39 000d 4f09 000d     .N...N..9O...O..
   d5c1c:	4ef7 000d                                   .N..

000d5c20 <_ZTV9IPAddress>:
	...
   d5c28:	5465 000d 5455 000d 5457 000d               eT..UT..WT..

000d5c34 <_ZTV9USBSerial>:
	...
   d5c3c:	553b 000d 55a3 000d 5579 000d 4c35 000d     ;U...U..yU..5L..
   d5c4c:	556b 000d 553d 000d 554d 000d 559d 000d     kU..=U..MU...U..
   d5c5c:	555d 000d 5537 000d                         ]U..7U..

000d5c64 <_ZTVN5spark13CellularClassE>:
	...
   d5c6c:	5697 000d 568d 000d 5683 000d 5645 000d     .V...V...V..EV..
   d5c7c:	5677 000d 40f3 000d 566b 000d 5663 000d     wV...@..kV..cV..
   d5c8c:	5659 000d 564f 000d 585d 000d               YV..OV..]X..

000d5c98 <_ZTV11USARTSerial>:
	...
   d5ca0:	56d1 000d 573d 000d 5715 000d 4c35 000d     .V..=W...W..5L..
   d5cb0:	56e5 000d 5701 000d 56f3 000d 570f 000d     .V...W...V...W..
   d5cc0:	56d3 000d 56d7 000d                         .V...V..

000d5cc8 <_ZTVN5spark12NetworkClassE>:
	...
   d5cd0:	57f5 000d 57ff 000d 5809 000d 5813 000d     .W...W...X...X..
   d5ce0:	581d 000d 5829 000d 5835 000d 5841 000d     .X..)X..5X..AX..
   d5cf0:	5849 000d 5853 000d 585d 000d               IX..SX..]X..

000d5cfc <_ZSt7nothrow>:
	...

000d5cfd <link_const_variable_data_end>:
   d5cfd:	00          	.byte	0x00
	...

000d5d00 <link_constructors_location>:
   d5d00:	000d43f1 	.word	0x000d43f1
   d5d04:	000d47e1 	.word	0x000d47e1
   d5d08:	000d4929 	.word	0x000d4929
   d5d0c:	000d4c0d 	.word	0x000d4c0d
   d5d10:	000d4d49 	.word	0x000d4d49
   d5d14:	000d4d59 	.word	0x000d4d59
   d5d18:	000d4db5 	.word	0x000d4db5
   d5d1c:	000d56a1 	.word	0x000d56a1
   d5d20:	000d5931 	.word	0x000d5931

000d5d24 <link_constructors_end>:
	...
