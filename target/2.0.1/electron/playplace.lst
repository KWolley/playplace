
c:/Users/karaw/Documents/aquarealtime/resdev/software/playplace/target/2.0.1/electron/playplace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001ba4  0808001c  0808001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08081bc0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  08081bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004dc  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  08081c2c  08081c2c  00021c2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08081c54  08081c54  00021c54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c306b  00000000  00000000  00021c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f276  00000000  00000000  000e4cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016aa5  00000000  00000000  000f3f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001938  00000000  00000000  0010a9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000046b8  00000000  00000000  0010c316  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000212f0  00000000  00000000  001109ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00021c00  00000000  00000000  00131cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aefc1  00000000  00000000  001538be  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004134  00000000  00000000  00202880  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <link_dynalib_end+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <link_dynalib_end+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f001 fc29 	bl	8081884 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <link_dynalib_end+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <link_dynalib_end+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f001 fc31 	bl	80818a0 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <link_dynalib_end+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000000 	.word	0x20000000
 8080048:	08081bc4 	.word	0x08081bc4
 808004c:	20000068 	.word	0x20000068
 8080050:	20000068 	.word	0x20000068
 8080054:	20000544 	.word	0x20000544
 8080058:	20000544 	.word	0x20000544

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f000 fe89 	bl	8080d74 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080062:	2500      	movs	r5, #0
 8080064:	4e05      	ldr	r6, [pc, #20]	; (808007c <module_user_init+0x20>)
 8080066:	4c06      	ldr	r4, [pc, #24]	; (8080080 <module_user_init+0x24>)
 8080068:	1ba4      	subs	r4, r4, r6
 808006a:	08a4      	lsrs	r4, r4, #2
 808006c:	42a5      	cmp	r5, r4
 808006e:	d100      	bne.n	8080072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080072:	f856 3b04 	ldr.w	r3, [r6], #4
 8080076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f7      	b.n	808006c <module_user_init+0x10>
 808007c:	08081ba0 	.word	0x08081ba0
 8080080:	08081bc0 	.word	0x08081bc0

08080084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080084:	f000 b83d 	b.w	8080102 <setup>

08080088 <module_user_loop>:
}

void module_user_loop() {
 8080088:	b508      	push	{r3, lr}
    loop();
 808008a:	f000 f917 	bl	80802bc <loop>
    _post_loop();
}
 808008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 8080092:	f000 be31 	b.w	8080cf8 <_post_loop>

08080096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 8080096:	f000 baf7 	b.w	8080688 <malloc>

0808009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 808009a:	f000 bafd 	b.w	8080698 <free>

0808009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 808009e:	7800      	ldrb	r0, [r0, #0]
 80800a0:	fab0 f080 	clz	r0, r0
 80800a4:	0940      	lsrs	r0, r0, #5
 80800a6:	4770      	bx	lr

080800a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800a8:	2301      	movs	r3, #1
 80800aa:	7003      	strb	r3, [r0, #0]
 80800ac:	4770      	bx	lr

080800ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80800ae:	b510      	push	{r4, lr}
 80800b0:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80800b2:	6800      	ldr	r0, [r0, #0]
 80800b4:	b108      	cbz	r0, 80800ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80800b6:	f000 faef 	bl	8080698 <free>
class SystemClass {
 80800ba:	4620      	mov	r0, r4
 80800bc:	bd10      	pop	{r4, pc}

080800be <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80800be:	b40e      	push	{r1, r2, r3}
 80800c0:	b503      	push	{r0, r1, lr}
 80800c2:	ab03      	add	r3, sp, #12
 80800c4:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 80800c8:	2100      	movs	r1, #0
        va_start(args, format);
 80800ca:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80800cc:	f000 fd40 	bl	8080b50 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80800d0:	b002      	add	sp, #8
 80800d2:	f85d eb04 	ldr.w	lr, [sp], #4
 80800d6:	b003      	add	sp, #12
 80800d8:	4770      	bx	lr

080800da <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80800da:	b40e      	push	{r1, r2, r3}
 80800dc:	b503      	push	{r0, r1, lr}
 80800de:	ab03      	add	r3, sp, #12
 80800e0:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 80800e4:	2101      	movs	r1, #1
        va_start(args, format);
 80800e6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 80800e8:	f000 fd32 	bl	8080b50 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80800ec:	b002      	add	sp, #8
 80800ee:	f85d eb04 	ldr.w	lr, [sp], #4
 80800f2:	b003      	add	sp, #12
 80800f4:	4770      	bx	lr

080800f6 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80800f6:	2300      	movs	r3, #0
 80800f8:	6840      	ldr	r0, [r0, #4]
 80800fa:	461a      	mov	r2, r3
 80800fc:	4619      	mov	r1, r3
 80800fe:	f000 ba6b 	b.w	80805d8 <network_off>

08080102 <setup>:
#define CELL_CONNECT_SECONDS 90 // time to attempt to connect to cellular
#define CLOUD_CONNECT_SECONDS 60 // time to attempt to connect cloud
#define CLOUD_WAIT 30

// setup() runs once, when the device is first turned on.
void setup() {
 8080102:	b508      	push	{r3, lr}
  Serial.begin(9600);
 8080104:	f001 f9d2 	bl	80814ac <_Z16_fetch_usbserialv>

}
 8080108:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
 808010c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080110:	f001 b9b2 	b.w	8081478 <_ZN9USBSerial5beginEl>

08080114 <_Z8ULPSleepi>:
  ULPSleep(60);
}

// Sleep ULP way
int ULPSleep(int seconds)
{
 8080114:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (seconds <= 0)
 8080116:	1e05      	subs	r5, r0, #0
{
 8080118:	b08b      	sub	sp, #44	; 0x2c
  if (seconds <= 0)
 808011a:	dc05      	bgt.n	8080128 <_Z8ULPSleepi+0x14>
  {
    seconds = 10;
    Serial.printlnf("Zero sleep time, adjusting to 10 seconds sleep time.");
 808011c:	f001 f9c6 	bl	80814ac <_Z16_fetch_usbserialv>
 8080120:	4924      	ldr	r1, [pc, #144]	; (80801b4 <_Z8ULPSleepi+0xa0>)
 8080122:	f7ff ffda 	bl	80800da <_ZN5Print8printlnfEPKcz>
    seconds = 10;
 8080126:	250a      	movs	r5, #10
  }
  Serial.printlnf("Going to sleep for %d minutes %d seconds.", seconds / 60, seconds % 60);
 8080128:	f001 f9c0 	bl	80814ac <_Z16_fetch_usbserialv>
 808012c:	233c      	movs	r3, #60	; 0x3c
 808012e:	fbb5 f2f3 	udiv	r2, r5, r3
 8080132:	4921      	ldr	r1, [pc, #132]	; (80801b8 <_Z8ULPSleepi+0xa4>)
 8080134:	fb03 5312 	mls	r3, r3, r2, r5
 8080138:	f7ff ffcf 	bl	80800da <_ZN5Print8printlnfEPKcz>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
 808013c:	ab05      	add	r3, sp, #20
 808013e:	9304      	str	r3, [sp, #16]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 8080140:	2301      	movs	r3, #1
 8080142:	2600      	movs	r6, #0
 8080144:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 8080148:	2302      	movs	r3, #2
        config_.size = sizeof(hal_sleep_config_t);
 808014a:	4f1c      	ldr	r7, [pc, #112]	; (80801bc <_Z8ULPSleepi+0xa8>)
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
 808014c:	2010      	movs	r0, #16
 808014e:	491c      	ldr	r1, [pc, #112]	; (80801c0 <_Z8ULPSleepi+0xac>)
        config_.wakeup_sources = nullptr;
 8080150:	e9cd 6607 	strd	r6, r6, [sp, #28]
              valid_(true) {
 8080154:	f8ad 6019 	strh.w	r6, [sp, #25]
 8080158:	f88d 601b 	strb.w	r6, [sp, #27]
        config_.size = sizeof(hal_sleep_config_t);
 808015c:	9705      	str	r7, [sp, #20]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 808015e:	f88d 3018 	strb.w	r3, [sp, #24]
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
 8080162:	f001 fb7c 	bl	808185e <_ZnwjRKSt9nothrow_t>
 8080166:	4604      	mov	r4, r0
 8080168:	b1e8      	cbz	r0, 80801a6 <_Z8ULPSleepi+0x92>
 808016a:	2210      	movs	r2, #16
 808016c:	4631      	mov	r1, r6
 808016e:	f001 fb97 	bl	80818a0 <memset>
  SystemSleepConfiguration config;
  config.mode(SystemSleepMode::ULTRA_LOW_POWER)
        .duration(seconds * 1000);  // Takes msec
 8080172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
 8080176:	2304      	movs	r3, #4
 8080178:	4345      	muls	r5, r0
 808017a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 808017c:	9b08      	ldr	r3, [sp, #32]
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
 808017e:	6027      	str	r7, [r4, #0]
            wakeupSource->base.next = config_.wakeup_sources;
 8080180:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
 8080182:	60e5      	str	r5, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 8080184:	9408      	str	r4, [sp, #32]
  System.sleep(config);
 8080186:	a801      	add	r0, sp, #4
 8080188:	a904      	add	r1, sp, #16
 808018a:	f000 faeb 	bl	8080764 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
 808018e:	9801      	ldr	r0, [sp, #4]
 8080190:	b108      	cbz	r0, 8080196 <_Z8ULPSleepi+0x82>
            free(wakeupSource_);
 8080192:	f000 fa81 	bl	8080698 <free>
        auto wakeupSource = config_.wakeup_sources;
 8080196:	9808      	ldr	r0, [sp, #32]
        while (wakeupSource) {
 8080198:	b140      	cbz	r0, 80801ac <_Z8ULPSleepi+0x98>
            auto next = wakeupSource->next;
 808019a:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
 808019c:	210c      	movs	r1, #12
 808019e:	f001 fb5c 	bl	808185a <_ZdlPvj>
            wakeupSource = next;
 80801a2:	4620      	mov	r0, r4
        while (wakeupSource) {
 80801a4:	e7f8      	b.n	8080198 <_Z8ULPSleepi+0x84>
                valid_ = false;
 80801a6:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
                return *this;
 80801aa:	e7ec      	b.n	8080186 <_Z8ULPSleepi+0x72>
  return 1;
}
 80801ac:	2001      	movs	r0, #1
 80801ae:	b00b      	add	sp, #44	; 0x2c
 80801b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80801b2:	bf00      	nop
 80801b4:	08081964 	.word	0x08081964
 80801b8:	08081999 	.word	0x08081999
 80801bc:	00030010 	.word	0x00030010
 80801c0:	08081b9c 	.word	0x08081b9c

080801c4 <_Z13connectToCelli>:

// Connect to cellular
// Returns 1 if fail, 0 if success. Pass it seconds
int connectToCell(int timeoutSec)
{
 80801c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80801c6:	4607      	mov	r7, r0
  int secondCounter = 0;
  Serial.printf("Connecting to cellular ... ");
 80801c8:	f001 f970 	bl	80814ac <_Z16_fetch_usbserialv>
 80801cc:	4918      	ldr	r1, [pc, #96]	; (8080230 <_Z13connectToCelli+0x6c>)
 80801ce:	f7ff ff76 	bl	80800be <_ZN5Print6printfEPKcz>
        network_on(*this, 0, 0, NULL);
 80801d2:	2300      	movs	r3, #0
 80801d4:	4d17      	ldr	r5, [pc, #92]	; (8080234 <_Z13connectToCelli+0x70>)
 80801d6:	461a      	mov	r2, r3
 80801d8:	4619      	mov	r1, r3
 80801da:	6868      	ldr	r0, [r5, #4]
 80801dc:	f000 f9f4 	bl	80805c8 <network_on>
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80801e0:	2300      	movs	r3, #0
 80801e2:	6868      	ldr	r0, [r5, #4]
 80801e4:	461a      	mov	r2, r3
 80801e6:	4619      	mov	r1, r3
 80801e8:	f000 f9ce 	bl	8080588 <network_connect>
  int secondCounter = 0;
 80801ec:	2400      	movs	r4, #0
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80801ee:	2200      	movs	r2, #0
 80801f0:	6868      	ldr	r0, [r5, #4]
 80801f2:	4611      	mov	r1, r2
 80801f4:	f000 f9e0 	bl	80805b8 <network_ready>
  Cellular.on();
  Cellular.connect();
  while (Cellular.ready() == false)
 80801f8:	4606      	mov	r6, r0
 80801fa:	b990      	cbnz	r0, 8080222 <_Z13connectToCelli+0x5e>
  {
    secondCounter ++;
 80801fc:	3401      	adds	r4, #1
    if (secondCounter >= timeoutSec)
 80801fe:	42bc      	cmp	r4, r7
 8080200:	db0a      	blt.n	8080218 <_Z13connectToCelli+0x54>
    {
      Serial.printlnf("Couldn't connect to cellular.");
 8080202:	f001 f953 	bl	80814ac <_Z16_fetch_usbserialv>
 8080206:	490c      	ldr	r1, [pc, #48]	; (8080238 <_Z13connectToCelli+0x74>)
 8080208:	f7ff ff67 	bl	80800da <_ZN5Print8printlnfEPKcz>
      Cellular.off();
 808020c:	4809      	ldr	r0, [pc, #36]	; (8080234 <_Z13connectToCelli+0x70>)
 808020e:	f7ff ff72 	bl	80800f6 <_ZN5spark13CellularClass3offEv>
 8080212:	4634      	mov	r4, r6
    }
    delay(1000);
  }
  Serial.printlnf("OK.");
  return secondCounter;
}
 8080214:	4620      	mov	r0, r4
 8080216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    delay(1000);
 8080218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808021c:	f000 fcf8 	bl	8080c10 <delay>
  while (Cellular.ready() == false)
 8080220:	e7e5      	b.n	80801ee <_Z13connectToCelli+0x2a>
  Serial.printlnf("OK.");
 8080222:	f001 f943 	bl	80814ac <_Z16_fetch_usbserialv>
 8080226:	4905      	ldr	r1, [pc, #20]	; (808023c <_Z13connectToCelli+0x78>)
 8080228:	f7ff ff57 	bl	80800da <_ZN5Print8printlnfEPKcz>
  return secondCounter;
 808022c:	e7f2      	b.n	8080214 <_Z13connectToCelli+0x50>
 808022e:	bf00      	nop
 8080230:	080819c3 	.word	0x080819c3
 8080234:	200003e0 	.word	0x200003e0
 8080238:	080819df 	.word	0x080819df
 808023c:	080819fd 	.word	0x080819fd

08080240 <_Z14connectToCloudi>:

//
int connectToCloud(int timeoutSec)
{
 8080240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080242:	4606      	mov	r6, r0
  Serial.printf("Connecting to cloud ... ");
 8080244:	f001 f932 	bl	80814ac <_Z16_fetch_usbserialv>
 8080248:	4917      	ldr	r1, [pc, #92]	; (80802a8 <_Z14connectToCloudi+0x68>)
 808024a:	f7ff ff38 	bl	80800be <_ZN5Print6printfEPKcz>
  int secondCounter = 0;
 808024e:	2400      	movs	r4, #0
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080250:	f000 f9f2 	bl	8080638 <spark_cloud_flag_connect>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080254:	4f15      	ldr	r7, [pc, #84]	; (80802ac <_Z14connectToCloudi+0x6c>)
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080256:	f000 f9f7 	bl	8080648 <spark_cloud_flag_connected>
  Particle.connect();
  while (Particle.connected() == false)
 808025a:	4605      	mov	r5, r0
 808025c:	b9e8      	cbnz	r0, 808029a <_Z14connectToCloudi+0x5a>
		return HAL_Timer_Get_Milli_Seconds();
 808025e:	f000 f8cd 	bl	80803fc <HAL_Timer_Get_Milli_Seconds>
  {
    secondCounter ++;
 8080262:	3401      	adds	r4, #1
		last_checkin = current_time();
 8080264:	6038      	str	r0, [r7, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080266:	f000 f9df 	bl	8080628 <spark_process>
    Particle.process();
    if (secondCounter >= timeoutSec)
 808026a:	42b4      	cmp	r4, r6
 808026c:	db10      	blt.n	8080290 <_Z14connectToCloudi+0x50>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808026e:	4c10      	ldr	r4, [pc, #64]	; (80802b0 <_Z14connectToCloudi+0x70>)
    {
      Serial.printlnf("Couldn't connect to Cloud.");
 8080270:	f001 f91c 	bl	80814ac <_Z16_fetch_usbserialv>
 8080274:	490f      	ldr	r1, [pc, #60]	; (80802b4 <_Z14connectToCloudi+0x74>)
 8080276:	f7ff ff30 	bl	80800da <_ZN5Print8printlnfEPKcz>
 808027a:	6860      	ldr	r0, [r4, #4]
 808027c:	462a      	mov	r2, r5
 808027e:	2102      	movs	r1, #2
 8080280:	f000 f992 	bl	80805a8 <network_disconnect>
      Cellular.disconnect();
      Cellular.off();
 8080284:	4620      	mov	r0, r4
 8080286:	f7ff ff36 	bl	80800f6 <_ZN5spark13CellularClass3offEv>
 808028a:	462c      	mov	r4, r5
    }
    delay(1000);
  }
  Serial.printlnf("OK.");
  return secondCounter;
 808028c:	4620      	mov	r0, r4
 808028e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    delay(1000);
 8080290:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080294:	f000 fcbc 	bl	8080c10 <delay>
  while (Particle.connected() == false)
 8080298:	e7dd      	b.n	8080256 <_Z14connectToCloudi+0x16>
  Serial.printlnf("OK.");
 808029a:	f001 f907 	bl	80814ac <_Z16_fetch_usbserialv>
 808029e:	4906      	ldr	r1, [pc, #24]	; (80802b8 <_Z14connectToCloudi+0x78>)
 80802a0:	f7ff ff1b 	bl	80800da <_ZN5Print8printlnfEPKcz>
  return secondCounter;
 80802a4:	e7f2      	b.n	808028c <_Z14connectToCloudi+0x4c>
 80802a6:	bf00      	nop
 80802a8:	08081a01 	.word	0x08081a01
 80802ac:	20000538 	.word	0x20000538
 80802b0:	200003e0 	.word	0x200003e0
 80802b4:	08081a1a 	.word	0x08081a1a
 80802b8:	080819fd 	.word	0x080819fd

080802bc <loop>:
void loop() {
 80802bc:	b530      	push	{r4, r5, lr}
  delay(1000);
 80802be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
void loop() {
 80802c2:	b093      	sub	sp, #76	; 0x4c
  delay(1000);
 80802c4:	f000 fca4 	bl	8080c10 <delay>
  int cellConnectTime = connectToCell(CELL_CONNECT_SECONDS);
 80802c8:	205a      	movs	r0, #90	; 0x5a
 80802ca:	f7ff ff7b 	bl	80801c4 <_Z13connectToCelli>
  if (cellConnectTime > 0)
 80802ce:	1e05      	subs	r5, r0, #0
 80802d0:	dd5f      	ble.n	8080392 <loop+0xd6>
    int cloudConnectTime = connectToCloud(CLOUD_CONNECT_SECONDS);
 80802d2:	203c      	movs	r0, #60	; 0x3c
 80802d4:	f7ff ffb4 	bl	8080240 <_Z14connectToCloudi>
    if (cloudConnectTime > 0)
 80802d8:	1e04      	subs	r4, r0, #0
 80802da:	dd5a      	ble.n	8080392 <loop+0xd6>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80802dc:	492f      	ldr	r1, [pc, #188]	; (808039c <loop+0xe0>)
 80802de:	a80a      	add	r0, sp, #40	; 0x28
 80802e0:	f000 fb5c 	bl	808099c <_ZN6StringC1EPKc>
      String outDat = "cell: " + (String) cellConnectTime + ",  cloud: " + (String) cloudConnectTime;
 80802e4:	220a      	movs	r2, #10
 80802e6:	4629      	mov	r1, r5
 80802e8:	a806      	add	r0, sp, #24
 80802ea:	f000 fb95 	bl	8080a18 <_ZN6StringC1Eih>
 80802ee:	a906      	add	r1, sp, #24
 80802f0:	a80a      	add	r0, sp, #40	; 0x28
 80802f2:	f000 fbbb 	bl	8080a6c <_ZplRK15StringSumHelperRK6String>
 80802f6:	492a      	ldr	r1, [pc, #168]	; (80803a0 <loop+0xe4>)
 80802f8:	f000 fbc4 	bl	8080a84 <_ZplRK15StringSumHelperPKc>
 80802fc:	4605      	mov	r5, r0
 80802fe:	220a      	movs	r2, #10
 8080300:	4621      	mov	r1, r4
 8080302:	a80e      	add	r0, sp, #56	; 0x38
 8080304:	f000 fb88 	bl	8080a18 <_ZN6StringC1Eih>
 8080308:	a90e      	add	r1, sp, #56	; 0x38
 808030a:	4628      	mov	r0, r5
 808030c:	f000 fbae 	bl	8080a6c <_ZplRK15StringSumHelperRK6String>
 8080310:	4601      	mov	r1, r0
 8080312:	a802      	add	r0, sp, #8
 8080314:	f000 fb64 	bl	80809e0 <_ZN6StringC1ERKS_>
 8080318:	a80e      	add	r0, sp, #56	; 0x38
 808031a:	f000 faf5 	bl	8080908 <_ZN6StringD1Ev>
 808031e:	a806      	add	r0, sp, #24
 8080320:	f000 faf2 	bl	8080908 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8080324:	a80a      	add	r0, sp, #40	; 0x28
 8080326:	f000 faef 	bl	8080908 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 808032a:	4b1e      	ldr	r3, [pc, #120]	; (80803a4 <loop+0xe8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808032c:	9a02      	ldr	r2, [sp, #8]
 808032e:	781b      	ldrb	r3, [r3, #0]
 8080330:	491d      	ldr	r1, [pc, #116]	; (80803a8 <loop+0xec>)
 8080332:	f88d 3000 	strb.w	r3, [sp]
 8080336:	a80e      	add	r0, sp, #56	; 0x38
 8080338:	233c      	movs	r3, #60	; 0x3c
 808033a:	f000 fe87 	bl	808104c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 808033e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8080340:	b17c      	cbz	r4, 8080362 <loop+0xa6>
      if (--_M_use_count == 0)
 8080342:	6863      	ldr	r3, [r4, #4]
 8080344:	3b01      	subs	r3, #1
 8080346:	6063      	str	r3, [r4, #4]
 8080348:	b95b      	cbnz	r3, 8080362 <loop+0xa6>
          _M_dispose();
 808034a:	6823      	ldr	r3, [r4, #0]
 808034c:	4620      	mov	r0, r4
 808034e:	689b      	ldr	r3, [r3, #8]
 8080350:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080352:	68a3      	ldr	r3, [r4, #8]
 8080354:	3b01      	subs	r3, #1
 8080356:	60a3      	str	r3, [r4, #8]
 8080358:	b91b      	cbnz	r3, 8080362 <loop+0xa6>
            _M_destroy();
 808035a:	6823      	ldr	r3, [r4, #0]
 808035c:	4620      	mov	r0, r4
 808035e:	68db      	ldr	r3, [r3, #12]
 8080360:	4798      	blx	r3
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
 8080362:	2400      	movs	r4, #0
      delay(1000);
 8080364:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080368:	4d10      	ldr	r5, [pc, #64]	; (80803ac <loop+0xf0>)
 808036a:	f000 fc51 	bl	8080c10 <delay>
      Particle.disconnect();
 808036e:	a80e      	add	r0, sp, #56	; 0x38
 8080370:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8080374:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
 8080378:	f000 fd73 	bl	8080e62 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
 808037c:	4622      	mov	r2, r4
 808037e:	2102      	movs	r1, #2
 8080380:	6868      	ldr	r0, [r5, #4]
 8080382:	f000 f911 	bl	80805a8 <network_disconnect>
      Cellular.off();
 8080386:	4628      	mov	r0, r5
 8080388:	f7ff feb5 	bl	80800f6 <_ZN5spark13CellularClass3offEv>
      String outDat = "cell: " + (String) cellConnectTime + ",  cloud: " + (String) cloudConnectTime;
 808038c:	a802      	add	r0, sp, #8
 808038e:	f000 fabb 	bl	8080908 <_ZN6StringD1Ev>
  ULPSleep(60);
 8080392:	203c      	movs	r0, #60	; 0x3c
 8080394:	f7ff febe 	bl	8080114 <_Z8ULPSleepi>
}
 8080398:	b013      	add	sp, #76	; 0x4c
 808039a:	bd30      	pop	{r4, r5, pc}
 808039c:	08081a35 	.word	0x08081a35
 80803a0:	08081a3c 	.word	0x08081a3c
 80803a4:	20000078 	.word	0x20000078
 80803a8:	08081a47 	.word	0x08081a47
 80803ac:	200003e0 	.word	0x200003e0

080803b0 <_GLOBAL__sub_I_SystemMode>:
        val_(val) {
 80803b0:	2201      	movs	r2, #1
 80803b2:	4b0a      	ldr	r3, [pc, #40]	; (80803dc <_GLOBAL__sub_I_SystemMode+0x2c>)
 80803b4:	b510      	push	{r4, lr}
 80803b6:	701a      	strb	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
 80803b8:	2300      	movs	r3, #0
 80803ba:	4c09      	ldr	r4, [pc, #36]	; (80803e0 <_GLOBAL__sub_I_SystemMode+0x30>)
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80803bc:	2003      	movs	r0, #3
              error_(SYSTEM_ERROR_NONE) {
 80803be:	6023      	str	r3, [r4, #0]
 80803c0:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 80803c2:	71a3      	strb	r3, [r4, #6]
 80803c4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80803c8:	60a3      	str	r3, [r4, #8]
        set_system_mode(mode);
 80803ca:	f000 f89f 	bl	808050c <set_system_mode>
SYSTEM_MODE(MANUAL);  
 80803ce:	4620      	mov	r0, r4
 80803d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_MODE(MANUAL);  
 80803d4:	4a03      	ldr	r2, [pc, #12]	; (80803e4 <_GLOBAL__sub_I_SystemMode+0x34>)
 80803d6:	4904      	ldr	r1, [pc, #16]	; (80803e8 <_GLOBAL__sub_I_SystemMode+0x38>)
 80803d8:	f001 ba3a 	b.w	8081850 <__aeabi_atexit>
 80803dc:	20000078 	.word	0x20000078
 80803e0:	2000006c 	.word	0x2000006c
 80803e4:	20000068 	.word	0x20000068
 80803e8:	080800af 	.word	0x080800af

080803ec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80803ec:	b508      	push	{r3, lr}
 80803ee:	4b02      	ldr	r3, [pc, #8]	; (80803f8 <HAL_RNG_GetRandomNumber+0xc>)
 80803f0:	681b      	ldr	r3, [r3, #0]
 80803f2:	685b      	ldr	r3, [r3, #4]
 80803f4:	9301      	str	r3, [sp, #4]
 80803f6:	bd08      	pop	{r3, pc}
 80803f8:	0804019c 	.word	0x0804019c

080803fc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80803fc:	b508      	push	{r3, lr}
 80803fe:	4b02      	ldr	r3, [pc, #8]	; (8080408 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8080400:	681b      	ldr	r3, [r3, #0]
 8080402:	695b      	ldr	r3, [r3, #20]
 8080404:	9301      	str	r3, [sp, #4]
 8080406:	bd08      	pop	{r3, pc}
 8080408:	0804019c 	.word	0x0804019c

0808040c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 808040c:	b508      	push	{r3, lr}
 808040e:	4b02      	ldr	r3, [pc, #8]	; (8080418 <hal_usart_init+0xc>)
 8080410:	681b      	ldr	r3, [r3, #0]
 8080412:	699b      	ldr	r3, [r3, #24]
 8080414:	9301      	str	r3, [sp, #4]
 8080416:	bd08      	pop	{r3, pc}
 8080418:	080401c4 	.word	0x080401c4

0808041c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 808041c:	b508      	push	{r3, lr}
 808041e:	4b02      	ldr	r3, [pc, #8]	; (8080428 <hal_usart_write+0xc>)
 8080420:	681b      	ldr	r3, [r3, #0]
 8080422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080424:	9301      	str	r3, [sp, #4]
 8080426:	bd08      	pop	{r3, pc}
 8080428:	080401c4 	.word	0x080401c4

0808042c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 808042c:	b508      	push	{r3, lr}
 808042e:	4b02      	ldr	r3, [pc, #8]	; (8080438 <hal_usart_available+0xc>)
 8080430:	681b      	ldr	r3, [r3, #0]
 8080432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080434:	9301      	str	r3, [sp, #4]
 8080436:	bd08      	pop	{r3, pc}
 8080438:	080401c4 	.word	0x080401c4

0808043c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 808043c:	b508      	push	{r3, lr}
 808043e:	4b02      	ldr	r3, [pc, #8]	; (8080448 <hal_usart_read+0xc>)
 8080440:	681b      	ldr	r3, [r3, #0]
 8080442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080444:	9301      	str	r3, [sp, #4]
 8080446:	bd08      	pop	{r3, pc}
 8080448:	080401c4 	.word	0x080401c4

0808044c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 808044c:	b508      	push	{r3, lr}
 808044e:	4b02      	ldr	r3, [pc, #8]	; (8080458 <hal_usart_peek+0xc>)
 8080450:	681b      	ldr	r3, [r3, #0]
 8080452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080454:	9301      	str	r3, [sp, #4]
 8080456:	bd08      	pop	{r3, pc}
 8080458:	080401c4 	.word	0x080401c4

0808045c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 808045c:	b508      	push	{r3, lr}
 808045e:	4b02      	ldr	r3, [pc, #8]	; (8080468 <hal_usart_flush+0xc>)
 8080460:	681b      	ldr	r3, [r3, #0]
 8080462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080464:	9301      	str	r3, [sp, #4]
 8080466:	bd08      	pop	{r3, pc}
 8080468:	080401c4 	.word	0x080401c4

0808046c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 808046c:	b508      	push	{r3, lr}
 808046e:	4b02      	ldr	r3, [pc, #8]	; (8080478 <hal_usart_available_data_for_write+0xc>)
 8080470:	681b      	ldr	r3, [r3, #0]
 8080472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080474:	9301      	str	r3, [sp, #4]
 8080476:	bd08      	pop	{r3, pc}
 8080478:	080401c4 	.word	0x080401c4

0808047c <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 808047c:	b508      	push	{r3, lr}
 808047e:	4b02      	ldr	r3, [pc, #8]	; (8080488 <inet_gethostbyname+0xc>)
 8080480:	681b      	ldr	r3, [r3, #0]
 8080482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080484:	9301      	str	r3, [sp, #4]
 8080486:	bd08      	pop	{r3, pc}
 8080488:	08060020 	.word	0x08060020

0808048c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 808048c:	b508      	push	{r3, lr}
 808048e:	4b02      	ldr	r3, [pc, #8]	; (8080498 <HAL_USB_USART_Init+0xc>)
 8080490:	681b      	ldr	r3, [r3, #0]
 8080492:	681b      	ldr	r3, [r3, #0]
 8080494:	9301      	str	r3, [sp, #4]
 8080496:	bd08      	pop	{r3, pc}
 8080498:	0806001c 	.word	0x0806001c

0808049c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 808049c:	b508      	push	{r3, lr}
 808049e:	4b02      	ldr	r3, [pc, #8]	; (80804a8 <HAL_USB_USART_Begin+0xc>)
 80804a0:	681b      	ldr	r3, [r3, #0]
 80804a2:	685b      	ldr	r3, [r3, #4]
 80804a4:	9301      	str	r3, [sp, #4]
 80804a6:	bd08      	pop	{r3, pc}
 80804a8:	0806001c 	.word	0x0806001c

080804ac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80804ac:	b508      	push	{r3, lr}
 80804ae:	4b02      	ldr	r3, [pc, #8]	; (80804b8 <HAL_USB_USART_Available_Data+0xc>)
 80804b0:	681b      	ldr	r3, [r3, #0]
 80804b2:	691b      	ldr	r3, [r3, #16]
 80804b4:	9301      	str	r3, [sp, #4]
 80804b6:	bd08      	pop	{r3, pc}
 80804b8:	0806001c 	.word	0x0806001c

080804bc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80804bc:	b508      	push	{r3, lr}
 80804be:	4b02      	ldr	r3, [pc, #8]	; (80804c8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80804c0:	681b      	ldr	r3, [r3, #0]
 80804c2:	695b      	ldr	r3, [r3, #20]
 80804c4:	9301      	str	r3, [sp, #4]
 80804c6:	bd08      	pop	{r3, pc}
 80804c8:	0806001c 	.word	0x0806001c

080804cc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80804cc:	b508      	push	{r3, lr}
 80804ce:	4b02      	ldr	r3, [pc, #8]	; (80804d8 <HAL_USB_USART_Receive_Data+0xc>)
 80804d0:	681b      	ldr	r3, [r3, #0]
 80804d2:	699b      	ldr	r3, [r3, #24]
 80804d4:	9301      	str	r3, [sp, #4]
 80804d6:	bd08      	pop	{r3, pc}
 80804d8:	0806001c 	.word	0x0806001c

080804dc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80804dc:	b508      	push	{r3, lr}
 80804de:	4b02      	ldr	r3, [pc, #8]	; (80804e8 <HAL_USB_USART_Send_Data+0xc>)
 80804e0:	681b      	ldr	r3, [r3, #0]
 80804e2:	69db      	ldr	r3, [r3, #28]
 80804e4:	9301      	str	r3, [sp, #4]
 80804e6:	bd08      	pop	{r3, pc}
 80804e8:	0806001c 	.word	0x0806001c

080804ec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80804ec:	b508      	push	{r3, lr}
 80804ee:	4b02      	ldr	r3, [pc, #8]	; (80804f8 <HAL_USB_USART_Flush_Data+0xc>)
 80804f0:	681b      	ldr	r3, [r3, #0]
 80804f2:	6a1b      	ldr	r3, [r3, #32]
 80804f4:	9301      	str	r3, [sp, #4]
 80804f6:	bd08      	pop	{r3, pc}
 80804f8:	0806001c 	.word	0x0806001c

080804fc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80804fc:	b508      	push	{r3, lr}
 80804fe:	4b02      	ldr	r3, [pc, #8]	; (8080508 <log_message+0xc>)
 8080500:	681b      	ldr	r3, [r3, #0]
 8080502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8080504:	9301      	str	r3, [sp, #4]
 8080506:	bd08      	pop	{r3, pc}
 8080508:	080201a0 	.word	0x080201a0

0808050c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808050c:	b508      	push	{r3, lr}
 808050e:	4b02      	ldr	r3, [pc, #8]	; (8080518 <set_system_mode+0xc>)
 8080510:	681b      	ldr	r3, [r3, #0]
 8080512:	685b      	ldr	r3, [r3, #4]
 8080514:	9301      	str	r3, [sp, #4]
 8080516:	bd08      	pop	{r3, pc}
 8080518:	080401a4 	.word	0x080401a4

0808051c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808051c:	b508      	push	{r3, lr}
 808051e:	4b02      	ldr	r3, [pc, #8]	; (8080528 <system_delay_ms+0xc>)
 8080520:	681b      	ldr	r3, [r3, #0]
 8080522:	695b      	ldr	r3, [r3, #20]
 8080524:	9301      	str	r3, [sp, #4]
 8080526:	bd08      	pop	{r3, pc}
 8080528:	080401a4 	.word	0x080401a4

0808052c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 808052c:	b508      	push	{r3, lr}
 808052e:	4b02      	ldr	r3, [pc, #8]	; (8080538 <application_thread_current+0xc>)
 8080530:	681b      	ldr	r3, [r3, #0]
 8080532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080534:	9301      	str	r3, [sp, #4]
 8080536:	bd08      	pop	{r3, pc}
 8080538:	080401a4 	.word	0x080401a4

0808053c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 808053c:	b508      	push	{r3, lr}
 808053e:	4b02      	ldr	r3, [pc, #8]	; (8080548 <application_thread_invoke+0xc>)
 8080540:	681b      	ldr	r3, [r3, #0]
 8080542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8080544:	9301      	str	r3, [sp, #4]
 8080546:	bd08      	pop	{r3, pc}
 8080548:	080401a4 	.word	0x080401a4

0808054c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 808054c:	b508      	push	{r3, lr}
 808054e:	4b03      	ldr	r3, [pc, #12]	; (808055c <system_ctrl_set_app_request_handler+0x10>)
 8080550:	681b      	ldr	r3, [r3, #0]
 8080552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8080556:	9301      	str	r3, [sp, #4]
 8080558:	bd08      	pop	{r3, pc}
 808055a:	0000      	.short	0x0000
 808055c:	080401a4 	.word	0x080401a4

08080560 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8080560:	b508      	push	{r3, lr}
 8080562:	4b03      	ldr	r3, [pc, #12]	; (8080570 <system_ctrl_set_result+0x10>)
 8080564:	681b      	ldr	r3, [r3, #0]
 8080566:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808056a:	9301      	str	r3, [sp, #4]
 808056c:	bd08      	pop	{r3, pc}
 808056e:	0000      	.short	0x0000
 8080570:	080401a4 	.word	0x080401a4

08080574 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
 8080574:	b508      	push	{r3, lr}
 8080576:	4b03      	ldr	r3, [pc, #12]	; (8080584 <system_sleep_ext+0x10>)
 8080578:	681b      	ldr	r3, [r3, #0]
 808057a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 808057e:	9301      	str	r3, [sp, #4]
 8080580:	bd08      	pop	{r3, pc}
 8080582:	0000      	.short	0x0000
 8080584:	080401a4 	.word	0x080401a4

08080588 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8080588:	b508      	push	{r3, lr}
 808058a:	4b02      	ldr	r3, [pc, #8]	; (8080594 <network_connect+0xc>)
 808058c:	681b      	ldr	r3, [r3, #0]
 808058e:	685b      	ldr	r3, [r3, #4]
 8080590:	9301      	str	r3, [sp, #4]
 8080592:	bd08      	pop	{r3, pc}
 8080594:	080401c8 	.word	0x080401c8

08080598 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8080598:	b508      	push	{r3, lr}
 808059a:	4b02      	ldr	r3, [pc, #8]	; (80805a4 <network_connecting+0xc>)
 808059c:	681b      	ldr	r3, [r3, #0]
 808059e:	689b      	ldr	r3, [r3, #8]
 80805a0:	9301      	str	r3, [sp, #4]
 80805a2:	bd08      	pop	{r3, pc}
 80805a4:	080401c8 	.word	0x080401c8

080805a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80805a8:	b508      	push	{r3, lr}
 80805aa:	4b02      	ldr	r3, [pc, #8]	; (80805b4 <network_disconnect+0xc>)
 80805ac:	681b      	ldr	r3, [r3, #0]
 80805ae:	68db      	ldr	r3, [r3, #12]
 80805b0:	9301      	str	r3, [sp, #4]
 80805b2:	bd08      	pop	{r3, pc}
 80805b4:	080401c8 	.word	0x080401c8

080805b8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80805b8:	b508      	push	{r3, lr}
 80805ba:	4b02      	ldr	r3, [pc, #8]	; (80805c4 <network_ready+0xc>)
 80805bc:	681b      	ldr	r3, [r3, #0]
 80805be:	691b      	ldr	r3, [r3, #16]
 80805c0:	9301      	str	r3, [sp, #4]
 80805c2:	bd08      	pop	{r3, pc}
 80805c4:	080401c8 	.word	0x080401c8

080805c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80805c8:	b508      	push	{r3, lr}
 80805ca:	4b02      	ldr	r3, [pc, #8]	; (80805d4 <network_on+0xc>)
 80805cc:	681b      	ldr	r3, [r3, #0]
 80805ce:	695b      	ldr	r3, [r3, #20]
 80805d0:	9301      	str	r3, [sp, #4]
 80805d2:	bd08      	pop	{r3, pc}
 80805d4:	080401c8 	.word	0x080401c8

080805d8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80805d8:	b508      	push	{r3, lr}
 80805da:	4b02      	ldr	r3, [pc, #8]	; (80805e4 <network_off+0xc>)
 80805dc:	681b      	ldr	r3, [r3, #0]
 80805de:	699b      	ldr	r3, [r3, #24]
 80805e0:	9301      	str	r3, [sp, #4]
 80805e2:	bd08      	pop	{r3, pc}
 80805e4:	080401c8 	.word	0x080401c8

080805e8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80805e8:	b508      	push	{r3, lr}
 80805ea:	4b02      	ldr	r3, [pc, #8]	; (80805f4 <network_listen+0xc>)
 80805ec:	681b      	ldr	r3, [r3, #0]
 80805ee:	69db      	ldr	r3, [r3, #28]
 80805f0:	9301      	str	r3, [sp, #4]
 80805f2:	bd08      	pop	{r3, pc}
 80805f4:	080401c8 	.word	0x080401c8

080805f8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80805f8:	b508      	push	{r3, lr}
 80805fa:	4b02      	ldr	r3, [pc, #8]	; (8080604 <network_listening+0xc>)
 80805fc:	681b      	ldr	r3, [r3, #0]
 80805fe:	6a1b      	ldr	r3, [r3, #32]
 8080600:	9301      	str	r3, [sp, #4]
 8080602:	bd08      	pop	{r3, pc}
 8080604:	080401c8 	.word	0x080401c8

08080608 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8080608:	b508      	push	{r3, lr}
 808060a:	4b02      	ldr	r3, [pc, #8]	; (8080614 <network_set_listen_timeout+0xc>)
 808060c:	681b      	ldr	r3, [r3, #0]
 808060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080610:	9301      	str	r3, [sp, #4]
 8080612:	bd08      	pop	{r3, pc}
 8080614:	080401c8 	.word	0x080401c8

08080618 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8080618:	b508      	push	{r3, lr}
 808061a:	4b02      	ldr	r3, [pc, #8]	; (8080624 <network_get_listen_timeout+0xc>)
 808061c:	681b      	ldr	r3, [r3, #0]
 808061e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080620:	9301      	str	r3, [sp, #4]
 8080622:	bd08      	pop	{r3, pc}
 8080624:	080401c8 	.word	0x080401c8

08080628 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8080628:	b508      	push	{r3, lr}
 808062a:	4b02      	ldr	r3, [pc, #8]	; (8080634 <spark_process+0xc>)
 808062c:	681b      	ldr	r3, [r3, #0]
 808062e:	689b      	ldr	r3, [r3, #8]
 8080630:	9301      	str	r3, [sp, #4]
 8080632:	bd08      	pop	{r3, pc}
 8080634:	080401cc 	.word	0x080401cc

08080638 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8080638:	b508      	push	{r3, lr}
 808063a:	4b02      	ldr	r3, [pc, #8]	; (8080644 <spark_cloud_flag_connect+0xc>)
 808063c:	681b      	ldr	r3, [r3, #0]
 808063e:	68db      	ldr	r3, [r3, #12]
 8080640:	9301      	str	r3, [sp, #4]
 8080642:	bd08      	pop	{r3, pc}
 8080644:	080401cc 	.word	0x080401cc

08080648 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8080648:	b508      	push	{r3, lr}
 808064a:	4b02      	ldr	r3, [pc, #8]	; (8080654 <spark_cloud_flag_connected+0xc>)
 808064c:	681b      	ldr	r3, [r3, #0]
 808064e:	695b      	ldr	r3, [r3, #20]
 8080650:	9301      	str	r3, [sp, #4]
 8080652:	bd08      	pop	{r3, pc}
 8080654:	080401cc 	.word	0x080401cc

08080658 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8080658:	b508      	push	{r3, lr}
 808065a:	4b02      	ldr	r3, [pc, #8]	; (8080664 <spark_send_event+0xc>)
 808065c:	681b      	ldr	r3, [r3, #0]
 808065e:	6a1b      	ldr	r3, [r3, #32]
 8080660:	9301      	str	r3, [sp, #4]
 8080662:	bd08      	pop	{r3, pc}
 8080664:	080401cc 	.word	0x080401cc

08080668 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080668:	b508      	push	{r3, lr}
 808066a:	4b02      	ldr	r3, [pc, #8]	; (8080674 <spark_set_random_seed_from_cloud_handler+0xc>)
 808066c:	681b      	ldr	r3, [r3, #0]
 808066e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080670:	9301      	str	r3, [sp, #4]
 8080672:	bd08      	pop	{r3, pc}
 8080674:	080401cc 	.word	0x080401cc

08080678 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 8080678:	b508      	push	{r3, lr}
 808067a:	4b02      	ldr	r3, [pc, #8]	; (8080684 <spark_cloud_disconnect+0xc>)
 808067c:	681b      	ldr	r3, [r3, #0]
 808067e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080680:	9301      	str	r3, [sp, #4]
 8080682:	bd08      	pop	{r3, pc}
 8080684:	080401cc 	.word	0x080401cc

08080688 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8080688:	b508      	push	{r3, lr}
 808068a:	4b02      	ldr	r3, [pc, #8]	; (8080694 <malloc+0xc>)
 808068c:	681b      	ldr	r3, [r3, #0]
 808068e:	681b      	ldr	r3, [r3, #0]
 8080690:	9301      	str	r3, [sp, #4]
 8080692:	bd08      	pop	{r3, pc}
 8080694:	080401a0 	.word	0x080401a0

08080698 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8080698:	b508      	push	{r3, lr}
 808069a:	4b02      	ldr	r3, [pc, #8]	; (80806a4 <free+0xc>)
 808069c:	681b      	ldr	r3, [r3, #0]
 808069e:	685b      	ldr	r3, [r3, #4]
 80806a0:	9301      	str	r3, [sp, #4]
 80806a2:	bd08      	pop	{r3, pc}
 80806a4:	080401a0 	.word	0x080401a0

080806a8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80806a8:	b508      	push	{r3, lr}
 80806aa:	4b02      	ldr	r3, [pc, #8]	; (80806b4 <realloc+0xc>)
 80806ac:	681b      	ldr	r3, [r3, #0]
 80806ae:	689b      	ldr	r3, [r3, #8]
 80806b0:	9301      	str	r3, [sp, #4]
 80806b2:	bd08      	pop	{r3, pc}
 80806b4:	080401a0 	.word	0x080401a0

080806b8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80806b8:	b508      	push	{r3, lr}
 80806ba:	4b02      	ldr	r3, [pc, #8]	; (80806c4 <vsnprintf+0xc>)
 80806bc:	681b      	ldr	r3, [r3, #0]
 80806be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80806c0:	9301      	str	r3, [sp, #4]
 80806c2:	bd08      	pop	{r3, pc}
 80806c4:	080401a0 	.word	0x080401a0

080806c8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80806c8:	b508      	push	{r3, lr}
 80806ca:	4b02      	ldr	r3, [pc, #8]	; (80806d4 <abort+0xc>)
 80806cc:	681b      	ldr	r3, [r3, #0]
 80806ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80806d0:	9301      	str	r3, [sp, #4]
 80806d2:	bd08      	pop	{r3, pc}
 80806d4:	080401a0 	.word	0x080401a0

080806d8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80806d8:	b508      	push	{r3, lr}
 80806da:	4b02      	ldr	r3, [pc, #8]	; (80806e4 <_malloc_r+0xc>)
 80806dc:	681b      	ldr	r3, [r3, #0]
 80806de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80806e0:	9301      	str	r3, [sp, #4]
 80806e2:	bd08      	pop	{r3, pc}
 80806e4:	080401a0 	.word	0x080401a0

080806e8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80806e8:	b508      	push	{r3, lr}
 80806ea:	4b02      	ldr	r3, [pc, #8]	; (80806f4 <newlib_impure_ptr_callback+0xc>)
 80806ec:	681b      	ldr	r3, [r3, #0]
 80806ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80806f0:	9301      	str	r3, [sp, #4]
 80806f2:	bd08      	pop	{r3, pc}
 80806f4:	080401a0 	.word	0x080401a0

080806f8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80806f8:	b510      	push	{r4, lr}
 80806fa:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80806fc:	6800      	ldr	r0, [r0, #0]
 80806fe:	b118      	cbz	r0, 8080708 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 8080700:	f7ff ffca 	bl	8080698 <free>
            wakeupSource_ = nullptr;
 8080704:	2300      	movs	r3, #0
 8080706:	6023      	str	r3, [r4, #0]
        }
    }
 8080708:	bd10      	pop	{r4, pc}

0808070a <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808070a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 808070c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8080710:	460d      	mov	r5, r1
        error_ = result.error_;
 8080712:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8080714:	460b      	mov	r3, r1
 8080716:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808071a:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 808071c:	f8c0 2006 	str.w	r2, [r0, #6]
 8080720:	889b      	ldrh	r3, [r3, #4]
 8080722:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8080724:	f7ff ffe8 	bl	80806f8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 8080728:	682b      	ldr	r3, [r5, #0]
 808072a:	b113      	cbz	r3, 8080732 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 808072c:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 808072e:	2300      	movs	r3, #0
 8080730:	602b      	str	r3, [r5, #0]
    }
 8080732:	4620      	mov	r0, r4
 8080734:	bd38      	pop	{r3, r4, r5, pc}
	...

08080738 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
 8080738:	b538      	push	{r3, r4, r5, lr}
 808073a:	460c      	mov	r4, r1
 808073c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
 808073e:	f7ff ffdb 	bl	80806f8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
 8080742:	b144      	cbz	r4, 8080756 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
 8080744:	8820      	ldrh	r0, [r4, #0]
 8080746:	f7ff ff9f 	bl	8080688 <malloc>
 808074a:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
 808074c:	b128      	cbz	r0, 808075a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
 808074e:	4621      	mov	r1, r4
 8080750:	8822      	ldrh	r2, [r4, #0]
 8080752:	f001 f897 	bl	8081884 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
 8080756:	2000      	movs	r0, #0
    }
 8080758:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
 808075a:	4801      	ldr	r0, [pc, #4]	; (8080760 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
 808075c:	e7fc      	b.n	8080758 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
 808075e:	bf00      	nop
 8080760:	fffffefc 	.word	0xfffffefc

08080764 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
 8080764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080766:	4d2d      	ldr	r5, [pc, #180]	; (808081c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
 8080768:	7d0b      	ldrb	r3, [r1, #20]
 808076a:	4604      	mov	r4, r0
 808076c:	b08b      	sub	sp, #44	; 0x2c
 808076e:	4608      	mov	r0, r1
 8080770:	1daf      	adds	r7, r5, #6
 8080772:	2b00      	cmp	r3, #0
 8080774:	d038      	beq.n	80807e8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
 8080776:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
 8080778:	791b      	ldrb	r3, [r3, #4]
 808077a:	2b00      	cmp	r3, #0
 808077c:	d034      	beq.n	80807e8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
 808077e:	2200      	movs	r2, #0
    SleepResult() {}
 8080780:	4b27      	ldr	r3, [pc, #156]	; (8080820 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
 8080782:	a902      	add	r1, sp, #8
 8080784:	3004      	adds	r0, #4
 8080786:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
 8080788:	9202      	str	r2, [sp, #8]
 808078a:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
 808078e:	f88d 200e 	strb.w	r2, [sp, #14]
 8080792:	f7ff feef 	bl	8080574 <system_sleep_ext>
        compatResult_ = result.compatResult_;
 8080796:	f8dd 300e 	ldr.w	r3, [sp, #14]
        result.setError(static_cast<system_error_t>(ret));
 808079a:	b200      	sxth	r0, r0
 808079c:	f8c5 3006 	str.w	r3, [r5, #6]
 80807a0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
 80807a4:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
 80807a8:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 80807aa:	9902      	ldr	r1, [sp, #8]
 80807ac:	4628      	mov	r0, r5
        compatResult_ = result.compatResult_;
 80807ae:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
 80807b0:	f7ff ffc2 	bl	8080738 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
 80807b4:	a802      	add	r0, sp, #8
 80807b6:	f7ff ff9f 	bl	80806f8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
 80807ba:	2300      	movs	r3, #0
 80807bc:	6023      	str	r3, [r4, #0]
 80807be:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 80807c0:	71a3      	strb	r3, [r4, #6]
 80807c2:	8123      	strh	r3, [r4, #8]
 80807c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80807c8:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
 80807ca:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 80807ce:	4620      	mov	r0, r4
        error_ = result.error_;
 80807d0:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
 80807d2:	683b      	ldr	r3, [r7, #0]
        copyWakeupSource(result.wakeupSource_);
 80807d4:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
 80807d6:	f8c4 3006 	str.w	r3, [r4, #6]
 80807da:	88bb      	ldrh	r3, [r7, #4]
 80807dc:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
 80807de:	f7ff ffab 	bl	8080738 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
 80807e2:	4620      	mov	r0, r4
 80807e4:	b00b      	add	sp, #44	; 0x2c
 80807e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
 80807e8:	2600      	movs	r6, #0
 80807ea:	2320      	movs	r3, #32
 80807ec:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80807f0:	4b0c      	ldr	r3, [pc, #48]	; (8080824 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
 80807f2:	2032      	movs	r0, #50	; 0x32
 80807f4:	9300      	str	r3, [sp, #0]
 80807f6:	490c      	ldr	r1, [pc, #48]	; (8080828 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
 80807f8:	4633      	mov	r3, r6
 80807fa:	aa02      	add	r2, sp, #8
 80807fc:	f7ff fe7e 	bl	80804fc <log_message>
    SleepResult() {}
 8080800:	4b07      	ldr	r3, [pc, #28]	; (8080820 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
 8080802:	a902      	add	r1, sp, #8
 8080804:	9304      	str	r3, [sp, #16]
        error_ = error;
 8080806:	f64f 63f2 	movw	r3, #65266	; 0xfef2
 808080a:	4804      	ldr	r0, [pc, #16]	; (808081c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
 808080c:	9602      	str	r6, [sp, #8]
    SleepResult() {}
 808080e:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
 8080812:	f8ad 300c 	strh.w	r3, [sp, #12]
 8080816:	f7ff ff78 	bl	808070a <_ZN17SystemSleepResultaSEOS_>
 808081a:	e7cb      	b.n	80807b4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
 808081c:	2000007c 	.word	0x2000007c
 8080820:	ffff0000 	.word	0xffff0000
 8080824:	08081a5a 	.word	0x08081a5a
 8080828:	08081a53 	.word	0x08081a53

0808082c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 808082c:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 808082e:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8080830:	b510      	push	{r4, lr}
 8080832:	4b08      	ldr	r3, [pc, #32]	; (8080854 <_GLOBAL__sub_I_System+0x28>)
 8080834:	4c08      	ldr	r4, [pc, #32]	; (8080858 <_GLOBAL__sub_I_System+0x2c>)
 8080836:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 8080838:	4b08      	ldr	r3, [pc, #32]	; (808085c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 808083a:	6020      	str	r0, [r4, #0]
 808083c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 808083e:	71a0      	strb	r0, [r4, #6]
 8080840:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080842:	f7ff fe63 	bl	808050c <set_system_mode>
SystemClass System;
 8080846:	4620      	mov	r0, r4
 8080848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 808084c:	4a04      	ldr	r2, [pc, #16]	; (8080860 <_GLOBAL__sub_I_System+0x34>)
 808084e:	4905      	ldr	r1, [pc, #20]	; (8080864 <_GLOBAL__sub_I_System+0x38>)
 8080850:	f000 bffe 	b.w	8081850 <__aeabi_atexit>
 8080854:	20000088 	.word	0x20000088
 8080858:	2000007c 	.word	0x2000007c
 808085c:	ffff0000 	.word	0xffff0000
 8080860:	20000068 	.word	0x20000068
 8080864:	080800af 	.word	0x080800af

08080868 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8080868:	b510      	push	{r4, lr}
 808086a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 808086c:	f001 f867 	bl	808193e <strlen>
 8080870:	1e43      	subs	r3, r0, #1
 8080872:	4620      	mov	r0, r4
 8080874:	4423      	add	r3, r4
	while(i<j){
 8080876:	4283      	cmp	r3, r0
 8080878:	d906      	bls.n	8080888 <_Z11str_reversePc+0x20>
		c = *i;
 808087a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 808087c:	7819      	ldrb	r1, [r3, #0]
 808087e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8080882:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 8080886:	e7f6      	b.n	8080876 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 8080888:	bd10      	pop	{r4, pc}

0808088a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 808088a:	b570      	push	{r4, r5, r6, lr}
 808088c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 808088e:	1e91      	subs	r1, r2, #2
 8080890:	2922      	cmp	r1, #34	; 0x22
 8080892:	d822      	bhi.n	80808da <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 8080894:	4625      	mov	r5, r4

	div_t result;
	while(a){
 8080896:	b168      	cbz	r0, 80808b4 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8080898:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 808089c:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80808a0:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80808a2:	2809      	cmp	r0, #9
                *ptr += '0';
 80808a4:	bf94      	ite	ls
 80808a6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80808a8:	3157      	addhi	r1, #87	; 0x57
 80808aa:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80808ac:	4630      	mov	r0, r6
 80808ae:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80808b2:	e7f0      	b.n	8080896 <ultoa+0xc>
 80808b4:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80808b6:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80808b8:	4423      	add	r3, r4
 80808ba:	4293      	cmp	r3, r2
 80808bc:	d902      	bls.n	80808c4 <ultoa+0x3a>
            *ptr++ = '0';
 80808be:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80808c2:	e7fa      	b.n	80808ba <ultoa+0x30>
 80808c4:	1b5a      	subs	r2, r3, r5
 80808c6:	42ab      	cmp	r3, r5
 80808c8:	bf38      	it	cc
 80808ca:	2200      	movcc	r2, #0

	*ptr = '\0';
 80808cc:	2300      	movs	r3, #0
	str_reverse(buffer);
 80808ce:	4620      	mov	r0, r4
	*ptr = '\0';
 80808d0:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80808d2:	f7ff ffc9 	bl	8080868 <_Z11str_reversePc>
	return buffer;
 80808d6:	4620      	mov	r0, r4
}
 80808d8:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80808da:	2000      	movs	r0, #0
 80808dc:	e7fc      	b.n	80808d8 <ultoa+0x4e>

080808de <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80808de:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80808e0:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80808e2:	460c      	mov	r4, r1
 80808e4:	4615      	mov	r5, r2
	if(a<0){
 80808e6:	da0d      	bge.n	8080904 <itoa+0x26>
		*buffer = '-';
 80808e8:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80808ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80808ee:	bf0c      	ite	eq
 80808f0:	4618      	moveq	r0, r3
 80808f2:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80808f4:	2301      	movs	r3, #1
		*buffer = '-';
 80808f6:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80808f8:	462a      	mov	r2, r5
 80808fa:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80808fc:	f7ff ffc5 	bl	808088a <ultoa>
	}
	return buffer;
}
 8080900:	4620      	mov	r0, r4
 8080902:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 8080904:	2301      	movs	r3, #1
 8080906:	e7f9      	b.n	80808fc <itoa+0x1e>

08080908 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8080908:	b510      	push	{r4, lr}
 808090a:	4604      	mov	r4, r0
{
	free(buffer);
 808090c:	6800      	ldr	r0, [r0, #0]
 808090e:	f7ff fec3 	bl	8080698 <free>
}
 8080912:	4620      	mov	r0, r4
 8080914:	bd10      	pop	{r4, pc}

08080916 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8080916:	b510      	push	{r4, lr}
 8080918:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808091a:	6800      	ldr	r0, [r0, #0]
 808091c:	b108      	cbz	r0, 8080922 <_ZN6String10invalidateEv+0xc>
 808091e:	f7ff febb 	bl	8080698 <free>
	buffer = NULL;
 8080922:	2300      	movs	r3, #0
	capacity = len = 0;
 8080924:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 8080928:	6023      	str	r3, [r4, #0]
}
 808092a:	bd10      	pop	{r4, pc}

0808092c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808092c:	b538      	push	{r3, r4, r5, lr}
 808092e:	4604      	mov	r4, r0
 8080930:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8080932:	6800      	ldr	r0, [r0, #0]
 8080934:	3101      	adds	r1, #1
 8080936:	f7ff feb7 	bl	80806a8 <realloc>
	if (newbuffer) {
 808093a:	b110      	cbz	r0, 8080942 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808093c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 8080940:	2001      	movs	r0, #1
	}
	return 0;
}
 8080942:	bd38      	pop	{r3, r4, r5, pc}

08080944 <_ZN6String7reserveEj>:
{
 8080944:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8080946:	6803      	ldr	r3, [r0, #0]
{
 8080948:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 808094a:	b123      	cbz	r3, 8080956 <_ZN6String7reserveEj+0x12>
 808094c:	6843      	ldr	r3, [r0, #4]
 808094e:	428b      	cmp	r3, r1
 8080950:	d301      	bcc.n	8080956 <_ZN6String7reserveEj+0x12>
 8080952:	2001      	movs	r0, #1
}
 8080954:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 8080956:	4620      	mov	r0, r4
 8080958:	f7ff ffe8 	bl	808092c <_ZN6String12changeBufferEj>
 808095c:	2800      	cmp	r0, #0
 808095e:	d0f9      	beq.n	8080954 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 8080960:	68a3      	ldr	r3, [r4, #8]
 8080962:	2b00      	cmp	r3, #0
 8080964:	d1f5      	bne.n	8080952 <_ZN6String7reserveEj+0xe>
 8080966:	6822      	ldr	r2, [r4, #0]
 8080968:	7013      	strb	r3, [r2, #0]
 808096a:	e7f2      	b.n	8080952 <_ZN6String7reserveEj+0xe>

0808096c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808096c:	b570      	push	{r4, r5, r6, lr}
 808096e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8080970:	4611      	mov	r1, r2
{
 8080972:	4604      	mov	r4, r0
 8080974:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8080976:	f7ff ffe5 	bl	8080944 <_ZN6String7reserveEj>
 808097a:	b920      	cbnz	r0, 8080986 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 808097c:	4620      	mov	r0, r4
 808097e:	f7ff ffca 	bl	8080916 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 8080982:	4620      	mov	r0, r4
 8080984:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 8080986:	462a      	mov	r2, r5
 8080988:	4631      	mov	r1, r6
 808098a:	6820      	ldr	r0, [r4, #0]
	len = length;
 808098c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808098e:	f000 ff79 	bl	8081884 <memcpy>
	buffer[len] = 0;
 8080992:	2100      	movs	r1, #0
 8080994:	6822      	ldr	r2, [r4, #0]
 8080996:	68a3      	ldr	r3, [r4, #8]
 8080998:	54d1      	strb	r1, [r2, r3]
	return *this;
 808099a:	e7f2      	b.n	8080982 <_ZN6String4copyEPKcj+0x16>

0808099c <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 808099c:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 808099e:	2300      	movs	r3, #0
String::String(const char *cstr)
 80809a0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80809a2:	460d      	mov	r5, r1
	capacity = 0;
 80809a4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80809a8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80809aa:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80809ac:	b139      	cbz	r1, 80809be <_ZN6StringC1EPKc+0x22>
 80809ae:	4608      	mov	r0, r1
 80809b0:	f000 ffc5 	bl	808193e <strlen>
 80809b4:	4629      	mov	r1, r5
 80809b6:	4602      	mov	r2, r0
 80809b8:	4620      	mov	r0, r4
 80809ba:	f7ff ffd7 	bl	808096c <_ZN6String4copyEPKcj>
}
 80809be:	4620      	mov	r0, r4
 80809c0:	bd38      	pop	{r3, r4, r5, pc}

080809c2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80809c2:	4288      	cmp	r0, r1
{
 80809c4:	b510      	push	{r4, lr}
 80809c6:	460b      	mov	r3, r1
 80809c8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80809ca:	d004      	beq.n	80809d6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80809cc:	6809      	ldr	r1, [r1, #0]
 80809ce:	b121      	cbz	r1, 80809da <_ZN6StringaSERKS_+0x18>
 80809d0:	689a      	ldr	r2, [r3, #8]
 80809d2:	f7ff ffcb 	bl	808096c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80809d6:	4620      	mov	r0, r4
 80809d8:	bd10      	pop	{r4, pc}
	else invalidate();
 80809da:	f7ff ff9c 	bl	8080916 <_ZN6String10invalidateEv>
 80809de:	e7fa      	b.n	80809d6 <_ZN6StringaSERKS_+0x14>

080809e0 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80809e0:	2300      	movs	r3, #0
String::String(const String &value)
 80809e2:	b510      	push	{r4, lr}
 80809e4:	4604      	mov	r4, r0
	capacity = 0;
 80809e6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80809ea:	6083      	str	r3, [r0, #8]
	flags = 0;
 80809ec:	7303      	strb	r3, [r0, #12]
	*this = value;
 80809ee:	f7ff ffe8 	bl	80809c2 <_ZN6StringaSERKS_>
}
 80809f2:	4620      	mov	r0, r4
 80809f4:	bd10      	pop	{r4, pc}

080809f6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80809f6:	b538      	push	{r3, r4, r5, lr}
 80809f8:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80809fa:	460c      	mov	r4, r1
 80809fc:	b149      	cbz	r1, 8080a12 <_ZN6StringaSEPKc+0x1c>
 80809fe:	4608      	mov	r0, r1
 8080a00:	f000 ff9d 	bl	808193e <strlen>
 8080a04:	4621      	mov	r1, r4
 8080a06:	4602      	mov	r2, r0
 8080a08:	4628      	mov	r0, r5
 8080a0a:	f7ff ffaf 	bl	808096c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8080a0e:	4628      	mov	r0, r5
 8080a10:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 8080a12:	f7ff ff80 	bl	8080916 <_ZN6String10invalidateEv>
 8080a16:	e7fa      	b.n	8080a0e <_ZN6StringaSEPKc+0x18>

08080a18 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 8080a18:	b510      	push	{r4, lr}
	buffer = NULL;
 8080a1a:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 8080a1c:	4604      	mov	r4, r0
 8080a1e:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 8080a20:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 8080a24:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8080a26:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 8080a28:	4608      	mov	r0, r1
	itoa(value, buf, base);
 8080a2a:	a901      	add	r1, sp, #4
 8080a2c:	f7ff ff57 	bl	80808de <itoa>
	*this = buf;
 8080a30:	4620      	mov	r0, r4
 8080a32:	a901      	add	r1, sp, #4
 8080a34:	f7ff ffdf 	bl	80809f6 <_ZN6StringaSEPKc>
}
 8080a38:	4620      	mov	r0, r4
 8080a3a:	b00a      	add	sp, #40	; 0x28
 8080a3c:	bd10      	pop	{r4, pc}

08080a3e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8080a3e:	b570      	push	{r4, r5, r6, lr}
 8080a40:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8080a42:	460e      	mov	r6, r1
 8080a44:	b909      	cbnz	r1, 8080a4a <_ZN6String6concatEPKcj+0xc>
 8080a46:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8080a48:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8080a4a:	b16a      	cbz	r2, 8080a68 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 8080a4c:	6884      	ldr	r4, [r0, #8]
 8080a4e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 8080a50:	4621      	mov	r1, r4
 8080a52:	f7ff ff77 	bl	8080944 <_ZN6String7reserveEj>
 8080a56:	2800      	cmp	r0, #0
 8080a58:	d0f5      	beq.n	8080a46 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8080a5a:	6828      	ldr	r0, [r5, #0]
 8080a5c:	68ab      	ldr	r3, [r5, #8]
 8080a5e:	4631      	mov	r1, r6
 8080a60:	4418      	add	r0, r3
 8080a62:	f000 ff49 	bl	80818f8 <strcpy>
	len = newlen;
 8080a66:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 8080a68:	2001      	movs	r0, #1
 8080a6a:	e7ed      	b.n	8080a48 <_ZN6String6concatEPKcj+0xa>

08080a6c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8080a6c:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8080a6e:	688a      	ldr	r2, [r1, #8]
 8080a70:	6809      	ldr	r1, [r1, #0]
{
 8080a72:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8080a74:	f7ff ffe3 	bl	8080a3e <_ZN6String6concatEPKcj>
 8080a78:	b910      	cbnz	r0, 8080a80 <_ZplRK15StringSumHelperRK6String+0x14>
 8080a7a:	4620      	mov	r0, r4
 8080a7c:	f7ff ff4b 	bl	8080916 <_ZN6String10invalidateEv>
	return a;
}
 8080a80:	4620      	mov	r0, r4
 8080a82:	bd10      	pop	{r4, pc}

08080a84 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8080a84:	b538      	push	{r3, r4, r5, lr}
 8080a86:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8080a88:	460d      	mov	r5, r1
 8080a8a:	b921      	cbnz	r1, 8080a96 <_ZplRK15StringSumHelperPKc+0x12>
 8080a8c:	4620      	mov	r0, r4
 8080a8e:	f7ff ff42 	bl	8080916 <_ZN6String10invalidateEv>
	return a;
}
 8080a92:	4620      	mov	r0, r4
 8080a94:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8080a96:	4608      	mov	r0, r1
 8080a98:	f000 ff51 	bl	808193e <strlen>
 8080a9c:	4629      	mov	r1, r5
 8080a9e:	4602      	mov	r2, r0
 8080aa0:	4620      	mov	r0, r4
 8080aa2:	f7ff ffcc 	bl	8080a3e <_ZN6String6concatEPKcj>
 8080aa6:	2800      	cmp	r0, #0
 8080aa8:	d0f0      	beq.n	8080a8c <_ZplRK15StringSumHelperPKc+0x8>
 8080aaa:	e7f2      	b.n	8080a92 <_ZplRK15StringSumHelperPKc+0xe>

08080aac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8080aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080aae:	4606      	mov	r6, r0
 8080ab0:	460d      	mov	r5, r1
  size_t n = 0;
 8080ab2:	2400      	movs	r4, #0
 8080ab4:	188f      	adds	r7, r1, r2
  while (size--) {
 8080ab6:	42bd      	cmp	r5, r7
 8080ab8:	d00c      	beq.n	8080ad4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8080aba:	6833      	ldr	r3, [r6, #0]
 8080abc:	4630      	mov	r0, r6
 8080abe:	689b      	ldr	r3, [r3, #8]
 8080ac0:	f815 1b01 	ldrb.w	r1, [r5], #1
 8080ac4:	4798      	blx	r3
     if (chunk>=0)
 8080ac6:	1e03      	subs	r3, r0, #0
 8080ac8:	db01      	blt.n	8080ace <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8080aca:	441c      	add	r4, r3
  while (size--) {
 8080acc:	e7f3      	b.n	8080ab6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8080ace:	2c00      	cmp	r4, #0
 8080ad0:	bf08      	it	eq
 8080ad2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8080ad4:	4620      	mov	r0, r4
 8080ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080ad8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8080ad8:	b570      	push	{r4, r5, r6, lr}
 8080ada:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8080adc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8080ade:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8080ae0:	b149      	cbz	r1, 8080af6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8080ae2:	f000 ff2c 	bl	808193e <strlen>
 8080ae6:	682b      	ldr	r3, [r5, #0]
 8080ae8:	4602      	mov	r2, r0
 8080aea:	4621      	mov	r1, r4
 8080aec:	4628      	mov	r0, r5
    }
 8080aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8080af2:	68db      	ldr	r3, [r3, #12]
 8080af4:	4718      	bx	r3
    }
 8080af6:	bd70      	pop	{r4, r5, r6, pc}

08080af8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8080af8:	6803      	ldr	r3, [r0, #0]
 8080afa:	689b      	ldr	r3, [r3, #8]
 8080afc:	4718      	bx	r3

08080afe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8080afe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8080b00:	210d      	movs	r1, #13
{
 8080b02:	4605      	mov	r5, r0
  size_t n = print('\r');
 8080b04:	f7ff fff8 	bl	8080af8 <_ZN5Print5printEc>
  n += print('\n');
 8080b08:	210a      	movs	r1, #10
  size_t n = print('\r');
 8080b0a:	4604      	mov	r4, r0
  n += print('\n');
 8080b0c:	4628      	mov	r0, r5
 8080b0e:	f7ff fff3 	bl	8080af8 <_ZN5Print5printEc>
  return n;
}
 8080b12:	4420      	add	r0, r4
 8080b14:	bd38      	pop	{r3, r4, r5, pc}

08080b16 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8080b16:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8080b18:	2a01      	cmp	r2, #1
 8080b1a:	bf98      	it	ls
 8080b1c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8080b1e:	b530      	push	{r4, r5, lr}
 8080b20:	b08b      	sub	sp, #44	; 0x2c
 8080b22:	460c      	mov	r4, r1
  *str = '\0';
 8080b24:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8080b28:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 8080b2a:	4625      	mov	r5, r4
 8080b2c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8080b30:	fb04 5312 	mls	r3, r4, r2, r5
 8080b34:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080b36:	2b09      	cmp	r3, #9
 8080b38:	bf94      	ite	ls
 8080b3a:	3330      	addls	r3, #48	; 0x30
 8080b3c:	3337      	addhi	r3, #55	; 0x37
 8080b3e:	b2db      	uxtb	r3, r3
  } while(n);
 8080b40:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080b42:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8080b46:	d9f0      	bls.n	8080b2a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8080b48:	f7ff ffc6 	bl	8080ad8 <_ZN5Print5writeEPKc>
}
 8080b4c:	b00b      	add	sp, #44	; 0x2c
 8080b4e:	bd30      	pop	{r4, r5, pc}

08080b50 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 8080b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080b54:	b086      	sub	sp, #24
 8080b56:	af00      	add	r7, sp, #0
 8080b58:	4605      	mov	r5, r0
 8080b5a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 8080b5c:	1d38      	adds	r0, r7, #4
 8080b5e:	2114      	movs	r1, #20
{
 8080b60:	4614      	mov	r4, r2
    va_copy(args2, args);
 8080b62:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 8080b64:	f7ff fda8 	bl	80806b8 <vsnprintf>

    if (n<bufsize)
 8080b68:	2813      	cmp	r0, #19
 8080b6a:	d80e      	bhi.n	8080b8a <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 8080b6c:	4628      	mov	r0, r5
 8080b6e:	1d39      	adds	r1, r7, #4
 8080b70:	f7ff ffb2 	bl	8080ad8 <_ZN5Print5writeEPKc>
 8080b74:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 8080b76:	b11e      	cbz	r6, 8080b80 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 8080b78:	4628      	mov	r0, r5
 8080b7a:	f7ff ffc0 	bl	8080afe <_ZN5Print7printlnEv>
 8080b7e:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 8080b80:	4620      	mov	r0, r4
 8080b82:	3718      	adds	r7, #24
 8080b84:	46bd      	mov	sp, r7
 8080b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 8080b8a:	f100 0308 	add.w	r3, r0, #8
 8080b8e:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 8080b92:	46e8      	mov	r8, sp
        char bigger[n+1];
 8080b94:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 8080b98:	4622      	mov	r2, r4
 8080b9a:	1c41      	adds	r1, r0, #1
 8080b9c:	683b      	ldr	r3, [r7, #0]
 8080b9e:	4668      	mov	r0, sp
 8080ba0:	f7ff fd8a 	bl	80806b8 <vsnprintf>
  return write(str);
 8080ba4:	4669      	mov	r1, sp
 8080ba6:	4628      	mov	r0, r5
 8080ba8:	f7ff ff96 	bl	8080ad8 <_ZN5Print5writeEPKc>
 8080bac:	4604      	mov	r4, r0
 8080bae:	46c5      	mov	sp, r8
 8080bb0:	e7e1      	b.n	8080b76 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

08080bb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8080bb2:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 8080bb4:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 8080bb6:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 8080bb8:	b17c      	cbz	r4, 8080bda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 8080bba:	6863      	ldr	r3, [r4, #4]
 8080bbc:	3b01      	subs	r3, #1
 8080bbe:	6063      	str	r3, [r4, #4]
 8080bc0:	b95b      	cbnz	r3, 8080bda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8080bc2:	6823      	ldr	r3, [r4, #0]
 8080bc4:	4620      	mov	r0, r4
 8080bc6:	689b      	ldr	r3, [r3, #8]
 8080bc8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080bca:	68a3      	ldr	r3, [r4, #8]
 8080bcc:	3b01      	subs	r3, #1
 8080bce:	60a3      	str	r3, [r4, #8]
 8080bd0:	b91b      	cbnz	r3, 8080bda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080bd2:	6823      	ldr	r3, [r4, #0]
 8080bd4:	4620      	mov	r0, r4
 8080bd6:	68db      	ldr	r3, [r3, #12]
 8080bd8:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 8080bda:	4628      	mov	r0, r5
 8080bdc:	bd38      	pop	{r3, r4, r5, pc}

08080bde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8080bde:	680b      	ldr	r3, [r1, #0]
 8080be0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8080be2:	b113      	cbz	r3, 8080bea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 8080be4:	685a      	ldr	r2, [r3, #4]
 8080be6:	3201      	adds	r2, #1
 8080be8:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 8080bea:	4770      	bx	lr

08080bec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8080bec:	4b01      	ldr	r3, [pc, #4]	; (8080bf4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8080bee:	4a02      	ldr	r2, [pc, #8]	; (8080bf8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8080bf0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8080bf2:	4770      	bx	lr
 8080bf4:	2000008c 	.word	0x2000008c
 8080bf8:	08081a81 	.word	0x08081a81

08080bfc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8080bfc:	4b02      	ldr	r3, [pc, #8]	; (8080c08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8080bfe:	681a      	ldr	r2, [r3, #0]
 8080c00:	4b02      	ldr	r3, [pc, #8]	; (8080c0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8080c02:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8080c04:	4770      	bx	lr
 8080c06:	bf00      	nop
 8080c08:	20000000 	.word	0x20000000
 8080c0c:	20000090 	.word	0x20000090

08080c10 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8080c10:	2100      	movs	r1, #0
 8080c12:	f7ff bc83 	b.w	808051c <system_delay_ms>

08080c16 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080c16:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080c18:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8080c1a:	4604      	mov	r4, r0
      if (_M_manager)
 8080c1c:	b113      	cbz	r3, 8080c24 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080c1e:	2203      	movs	r2, #3
 8080c20:	4601      	mov	r1, r0
 8080c22:	4798      	blx	r3
    }
 8080c24:	4620      	mov	r0, r4
 8080c26:	bd10      	pop	{r4, pc}

08080c28 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8080c28:	b510      	push	{r4, lr}
 8080c2a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080c2c:	f7ff fff3 	bl	8080c16 <_ZNSt14_Function_baseD1Ev>
 8080c30:	4620      	mov	r0, r4
 8080c32:	bd10      	pop	{r4, pc}

08080c34 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8080c34:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080c36:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 8080c38:	460b      	mov	r3, r1
 8080c3a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080c3c:	c803      	ldmia	r0, {r0, r1}
 8080c3e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8080c42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8080c46:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8080c4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8080c4e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8080c52:	b002      	add	sp, #8
 8080c54:	bd10      	pop	{r4, pc}
	...

08080c58 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8080c58:	2300      	movs	r3, #0
 8080c5a:	4803      	ldr	r0, [pc, #12]	; (8080c68 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8080c5c:	4a03      	ldr	r2, [pc, #12]	; (8080c6c <_GLOBAL__sub_I_RGB+0x14>)
 8080c5e:	4904      	ldr	r1, [pc, #16]	; (8080c70 <_GLOBAL__sub_I_RGB+0x18>)
 8080c60:	6083      	str	r3, [r0, #8]
 8080c62:	f000 bdf5 	b.w	8081850 <__aeabi_atexit>
 8080c66:	bf00      	nop
 8080c68:	20000094 	.word	0x20000094
 8080c6c:	20000068 	.word	0x20000068
 8080c70:	08080c29 	.word	0x08080c29

08080c74 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8080c74:	4b01      	ldr	r3, [pc, #4]	; (8080c7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8080c76:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8080c78:	4770      	bx	lr
 8080c7a:	bf00      	nop
 8080c7c:	20000004 	.word	0x20000004

08080c80 <serialEventRun>:
{
 8080c80:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8080c82:	4b17      	ldr	r3, [pc, #92]	; (8080ce0 <serialEventRun+0x60>)
 8080c84:	b143      	cbz	r3, 8080c98 <serialEventRun+0x18>
 8080c86:	f000 fc11 	bl	80814ac <_Z16_fetch_usbserialv>
 8080c8a:	6803      	ldr	r3, [r0, #0]
 8080c8c:	691b      	ldr	r3, [r3, #16]
 8080c8e:	4798      	blx	r3
 8080c90:	2800      	cmp	r0, #0
 8080c92:	dd01      	ble.n	8080c98 <serialEventRun+0x18>
        serialEvent();
 8080c94:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8080c98:	4b12      	ldr	r3, [pc, #72]	; (8080ce4 <serialEventRun+0x64>)
 8080c9a:	b143      	cbz	r3, 8080cae <serialEventRun+0x2e>
 8080c9c:	f000 fd22 	bl	80816e4 <_Z22__fetch_global_Serial1v>
 8080ca0:	6803      	ldr	r3, [r0, #0]
 8080ca2:	691b      	ldr	r3, [r3, #16]
 8080ca4:	4798      	blx	r3
 8080ca6:	2800      	cmp	r0, #0
 8080ca8:	dd01      	ble.n	8080cae <serialEventRun+0x2e>
        serialEvent1();
 8080caa:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8080cae:	4b0e      	ldr	r3, [pc, #56]	; (8080ce8 <serialEventRun+0x68>)
 8080cb0:	b10b      	cbz	r3, 8080cb6 <serialEventRun+0x36>
 8080cb2:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8080cb6:	4b0d      	ldr	r3, [pc, #52]	; (8080cec <serialEventRun+0x6c>)
 8080cb8:	b10b      	cbz	r3, 8080cbe <serialEventRun+0x3e>
 8080cba:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8080cbe:	4b0c      	ldr	r3, [pc, #48]	; (8080cf0 <serialEventRun+0x70>)
 8080cc0:	b10b      	cbz	r3, 8080cc6 <serialEventRun+0x46>
 8080cc2:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8080cc6:	4b0b      	ldr	r3, [pc, #44]	; (8080cf4 <serialEventRun+0x74>)
 8080cc8:	b143      	cbz	r3, 8080cdc <serialEventRun+0x5c>
 8080cca:	f000 fc2d 	bl	8081528 <_Z17_fetch_usbserial1v>
 8080cce:	6803      	ldr	r3, [r0, #0]
 8080cd0:	691b      	ldr	r3, [r3, #16]
 8080cd2:	4798      	blx	r3
 8080cd4:	2800      	cmp	r0, #0
 8080cd6:	dd01      	ble.n	8080cdc <serialEventRun+0x5c>
        usbSerialEvent1();
 8080cd8:	f3af 8000 	nop.w
}
 8080cdc:	bd08      	pop	{r3, pc}
 8080cde:	bf00      	nop
	...

08080cf8 <_post_loop>:
{
 8080cf8:	b508      	push	{r3, lr}
	serialEventRun();
 8080cfa:	f7ff ffc1 	bl	8080c80 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080cfe:	f7ff fb7d 	bl	80803fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080d02:	4b01      	ldr	r3, [pc, #4]	; (8080d08 <_post_loop+0x10>)
 8080d04:	6018      	str	r0, [r3, #0]
}
 8080d06:	bd08      	pop	{r3, pc}
 8080d08:	20000538 	.word	0x20000538

08080d0c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8080d0c:	4802      	ldr	r0, [pc, #8]	; (8080d18 <_Z33system_initialize_user_backup_ramv+0xc>)
 8080d0e:	4a03      	ldr	r2, [pc, #12]	; (8080d1c <_Z33system_initialize_user_backup_ramv+0x10>)
 8080d10:	4903      	ldr	r1, [pc, #12]	; (8080d20 <_Z33system_initialize_user_backup_ramv+0x14>)
 8080d12:	1a12      	subs	r2, r2, r0
 8080d14:	f000 bdb6 	b.w	8081884 <memcpy>
 8080d18:	40024000 	.word	0x40024000
 8080d1c:	40024004 	.word	0x40024004
 8080d20:	08081bc0 	.word	0x08081bc0

08080d24 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080d24:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8080d26:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080d28:	461a      	mov	r2, r3
 8080d2a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080d2e:	9300      	str	r3, [sp, #0]
 8080d30:	f7ff fc16 	bl	8080560 <system_ctrl_set_result>
}
 8080d34:	b003      	add	sp, #12
 8080d36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080d3c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8080d3c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8080d3e:	8843      	ldrh	r3, [r0, #2]
 8080d40:	2b0a      	cmp	r3, #10
 8080d42:	d008      	beq.n	8080d56 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8080d44:	2b50      	cmp	r3, #80	; 0x50
 8080d46:	d10b      	bne.n	8080d60 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8080d48:	4b09      	ldr	r3, [pc, #36]	; (8080d70 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8080d4a:	681b      	ldr	r3, [r3, #0]
 8080d4c:	b14b      	cbz	r3, 8080d62 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8080d4e:	b003      	add	sp, #12
 8080d50:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8080d54:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8080d56:	f7ff ffe5 	bl	8080d24 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8080d5a:	b003      	add	sp, #12
 8080d5c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080d60:	2300      	movs	r3, #0
 8080d62:	461a      	mov	r2, r3
 8080d64:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080d68:	9300      	str	r3, [sp, #0]
 8080d6a:	f7ff fbf9 	bl	8080560 <system_ctrl_set_result>
}
 8080d6e:	e7f4      	b.n	8080d5a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8080d70:	200000a8 	.word	0x200000a8

08080d74 <module_user_init_hook>:
{
 8080d74:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8080d76:	4c12      	ldr	r4, [pc, #72]	; (8080dc0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8080d78:	2100      	movs	r1, #0
 8080d7a:	4812      	ldr	r0, [pc, #72]	; (8080dc4 <module_user_init_hook+0x50>)
 8080d7c:	f7ff fcb4 	bl	80806e8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8080d80:	4d11      	ldr	r5, [pc, #68]	; (8080dc8 <module_user_init_hook+0x54>)
 8080d82:	6823      	ldr	r3, [r4, #0]
 8080d84:	42ab      	cmp	r3, r5
 8080d86:	bf0c      	ite	eq
 8080d88:	2201      	moveq	r2, #1
 8080d8a:	2200      	movne	r2, #0
 8080d8c:	4b0f      	ldr	r3, [pc, #60]	; (8080dcc <module_user_init_hook+0x58>)
 8080d8e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8080d90:	d002      	beq.n	8080d98 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 8080d92:	f7ff ffbb 	bl	8080d0c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8080d96:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8080d98:	f7ff fb28 	bl	80803ec <HAL_RNG_GetRandomNumber>
 8080d9c:	4604      	mov	r4, r0
    srand(seed);
 8080d9e:	f000 fd87 	bl	80818b0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8080da2:	4b0b      	ldr	r3, [pc, #44]	; (8080dd0 <module_user_init_hook+0x5c>)
 8080da4:	b113      	cbz	r3, 8080dac <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8080da6:	4620      	mov	r0, r4
 8080da8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8080dac:	2100      	movs	r1, #0
 8080dae:	4808      	ldr	r0, [pc, #32]	; (8080dd0 <module_user_init_hook+0x5c>)
 8080db0:	f7ff fc5a 	bl	8080668 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8080db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8080db8:	2100      	movs	r1, #0
 8080dba:	4806      	ldr	r0, [pc, #24]	; (8080dd4 <module_user_init_hook+0x60>)
 8080dbc:	f7ff bbc6 	b.w	808054c <system_ctrl_set_app_request_handler>
 8080dc0:	40024000 	.word	0x40024000
 8080dc4:	08080c75 	.word	0x08080c75
 8080dc8:	9a271c1e 	.word	0x9a271c1e
 8080dcc:	200000a4 	.word	0x200000a4
 8080dd0:	00000000 	.word	0x00000000
 8080dd4:	08080d3d 	.word	0x08080d3d

08080dd8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080dd8:	4770      	bx	lr

08080dda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 8080dda:	2000      	movs	r0, #0
 8080ddc:	4770      	bx	lr

08080dde <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080dde:	b510      	push	{r4, lr}
 8080de0:	4604      	mov	r4, r0
 8080de2:	2110      	movs	r1, #16
 8080de4:	f000 fd39 	bl	808185a <_ZdlPvj>
 8080de8:	4620      	mov	r0, r4
 8080dea:	bd10      	pop	{r4, pc}

08080dec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8080dec:	b508      	push	{r3, lr}
      { delete this; }
 8080dee:	f7ff fff6 	bl	8080dde <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8080df2:	bd08      	pop	{r3, pc}

08080df4 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8080df4:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8080df6:	b530      	push	{r4, r5, lr}
        type_(type) {
 8080df8:	f64f 749c 	movw	r4, #65436	; 0xff9c
 8080dfc:	6002      	str	r2, [r0, #0]
 8080dfe:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 8080e00:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8080e02:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8080e04:	680c      	ldr	r4, [r1, #0]
 8080e06:	8085      	strh	r5, [r0, #4]
 8080e08:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8080e0a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8080e0c:	bd30      	pop	{r4, r5, pc}

08080e0e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8080e0e:	b510      	push	{r4, lr}
 8080e10:	4604      	mov	r4, r0
    free((void*)msg_);
 8080e12:	6800      	ldr	r0, [r0, #0]
 8080e14:	f7ff fc40 	bl	8080698 <free>
}
 8080e18:	4620      	mov	r0, r4
 8080e1a:	bd10      	pop	{r4, pc}

08080e1c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8080e1c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8080e1e:	68c4      	ldr	r4, [r0, #12]
 8080e20:	b1f4      	cbz	r4, 8080e60 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 8080e22:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8080e24:	2b02      	cmp	r3, #2
 8080e26:	d103      	bne.n	8080e30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8080e28:	f104 000c 	add.w	r0, r4, #12
 8080e2c:	f7ff ffef 	bl	8080e0e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 8080e30:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 8080e32:	b135      	cbz	r5, 8080e42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 8080e34:	4628      	mov	r0, r5
 8080e36:	f7ff feee 	bl	8080c16 <_ZNSt14_Function_baseD1Ev>
 8080e3a:	2110      	movs	r1, #16
 8080e3c:	4628      	mov	r0, r5
 8080e3e:	f000 fd0c 	bl	808185a <_ZdlPvj>
 8080e42:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8080e44:	b135      	cbz	r5, 8080e54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8080e46:	4628      	mov	r0, r5
 8080e48:	f7ff fee5 	bl	8080c16 <_ZNSt14_Function_baseD1Ev>
 8080e4c:	2110      	movs	r1, #16
 8080e4e:	4628      	mov	r0, r5
 8080e50:	f000 fd03 	bl	808185a <_ZdlPvj>
 8080e54:	4620      	mov	r0, r4
 8080e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8080e5a:	2114      	movs	r1, #20
 8080e5c:	f000 bcfd 	b.w	808185a <_ZdlPvj>
 8080e60:	bd38      	pop	{r3, r4, r5, pc}

08080e62 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:
} // namespace

spark_cloud_disconnect_options CloudDisconnectOptions::toSystemOptions() const
{
    spark_cloud_disconnect_options opts = {};
    opts.size = sizeof(opts);
 8080e62:	2308      	movs	r3, #8

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 8080e64:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
 8080e66:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
 8080e6a:	6803      	ldr	r3, [r0, #0]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8080e6c:	2100      	movs	r1, #0
    opts.flags = flags_;
 8080e6e:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
 8080e72:	7a03      	ldrb	r3, [r0, #8]
 8080e74:	f88d 3003 	strb.w	r3, [sp, #3]
    opts.timeout = timeout_;
 8080e78:	6843      	ldr	r3, [r0, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8080e7a:	4668      	mov	r0, sp
    opts.timeout = timeout_;
 8080e7c:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8080e7e:	f7ff fbfb 	bl	8080678 <spark_cloud_disconnect>
}
 8080e82:	b003      	add	sp, #12
 8080e84:	f85d fb04 	ldr.w	pc, [sp], #4

08080e88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8080e88:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080e8a:	460e      	mov	r6, r1
 8080e8c:	4604      	mov	r4, r0
 8080e8e:	f856 3b04 	ldr.w	r3, [r6], #4
 8080e92:	460d      	mov	r5, r1
 8080e94:	a801      	add	r0, sp, #4
 8080e96:	4631      	mov	r1, r6
 8080e98:	9300      	str	r3, [sp, #0]
 8080e9a:	f7ff fea0 	bl	8080bde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8080e9e:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8080ea0:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8080ea2:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 8080ea4:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8080ea6:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 8080ea8:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 8080eaa:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8080eac:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 8080eae:	f7ff fe80 	bl	8080bb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080eb2:	4630      	mov	r0, r6
 8080eb4:	f7ff fe7d 	bl	8080bb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 8080eb8:	4628      	mov	r0, r5
 8080eba:	2108      	movs	r1, #8
 8080ebc:	f000 fccd 	bl	808185a <_ZdlPvj>
        return p;
    }
 8080ec0:	4620      	mov	r0, r4
 8080ec2:	b002      	add	sp, #8
 8080ec4:	bd70      	pop	{r4, r5, r6, pc}

08080ec6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080ec6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8080ec8:	b510      	push	{r4, lr}
      if (_M_empty())
 8080eca:	b90a      	cbnz	r2, 8080ed0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8080ecc:	f000 fcc9 	bl	8081862 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080ed0:	68c3      	ldr	r3, [r0, #12]
    }
 8080ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080ed6:	4718      	bx	r3

08080ed8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080ed8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8080eda:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8080edc:	f100 0110 	add.w	r1, r0, #16
 8080ee0:	f7ff fff1 	bl	8080ec6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 8080ee4:	bd08      	pop	{r3, pc}

08080ee6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 8080ee6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8080ee8:	b510      	push	{r4, lr}
      if (_M_empty())
 8080eea:	b90a      	cbnz	r2, 8080ef0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8080eec:	f000 fcb9 	bl	8081862 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080ef0:	68c3      	ldr	r3, [r0, #12]
    }
 8080ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080ef6:	4718      	bx	r3

08080ef8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080ef8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8080efa:	6800      	ldr	r0, [r0, #0]
 8080efc:	f100 0110 	add.w	r1, r0, #16
 8080f00:	f7ff fff1 	bl	8080ee6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 8080f04:	bd08      	pop	{r3, pc}
	...

08080f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8080f08:	b538      	push	{r3, r4, r5, lr}
 8080f0a:	2300      	movs	r3, #0
 8080f0c:	4604      	mov	r4, r0
 8080f0e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080f10:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8080f12:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080f14:	f7ff f8bf 	bl	8080096 <_Znwj>
 8080f18:	b128      	cbz	r0, 8080f26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 8080f1a:	2301      	movs	r3, #1
 8080f1c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8080f20:	4b02      	ldr	r3, [pc, #8]	; (8080f2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8080f22:	60c5      	str	r5, [r0, #12]
 8080f24:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080f26:	6020      	str	r0, [r4, #0]
	}
 8080f28:	4620      	mov	r0, r4
 8080f2a:	bd38      	pop	{r3, r4, r5, pc}
 8080f2c:	08081aac 	.word	0x08081aac

08080f30 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8080f30:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8080f32:	2300      	movs	r3, #0
 8080f34:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8080f36:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8080f38:	4604      	mov	r4, r0
 8080f3a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8080f3c:	b12b      	cbz	r3, 8080f4a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080f3e:	2202      	movs	r2, #2
 8080f40:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080f42:	68eb      	ldr	r3, [r5, #12]
 8080f44:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8080f46:	68ab      	ldr	r3, [r5, #8]
 8080f48:	60a3      	str	r3, [r4, #8]
    }
 8080f4a:	4620      	mov	r0, r4
 8080f4c:	bd38      	pop	{r3, r4, r5, pc}
	...

08080f50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 8080f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080f52:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8080f54:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8080f56:	4668      	mov	r0, sp
 8080f58:	f7ff ff4c 	bl	8080df4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8080f5c:	f04f 0302 	mov.w	r3, #2
 8080f60:	e8d4 2f4f 	ldrexb	r2, [r4]
 8080f64:	2a00      	cmp	r2, #0
 8080f66:	d103      	bne.n	8080f70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8080f68:	e8c4 3f41 	strexb	r1, r3, [r4]
 8080f6c:	2900      	cmp	r1, #0
 8080f6e:	d1f7      	bne.n	8080f60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 8080f70:	d125      	bne.n	8080fbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 8080f72:	f104 050c 	add.w	r5, r4, #12
 8080f76:	4669      	mov	r1, sp
 8080f78:	4628      	mov	r0, r5
 8080f7a:	f7ff ff3b 	bl	8080df4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 8080f7e:	2301      	movs	r3, #1
 8080f80:	f3bf 8f5b 	dmb	ish
 8080f84:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8080f86:	2000      	movs	r0, #0
 8080f88:	f3bf 8f5b 	dmb	ish
 8080f8c:	f104 0308 	add.w	r3, r4, #8
 8080f90:	e853 6f00 	ldrex	r6, [r3]
 8080f94:	e843 0200 	strex	r2, r0, [r3]
 8080f98:	2a00      	cmp	r2, #0
 8080f9a:	d1f9      	bne.n	8080f90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 8080f9c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8080fa0:	b16e      	cbz	r6, 8080fbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 8080fa2:	f7ff fac3 	bl	808052c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8080fa6:	b178      	cbz	r0, 8080fc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8080fa8:	4629      	mov	r1, r5
 8080faa:	4630      	mov	r0, r6
 8080fac:	f7ff ff8b 	bl	8080ec6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 8080fb0:	4630      	mov	r0, r6
 8080fb2:	f7ff fe30 	bl	8080c16 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8080fb6:	2110      	movs	r1, #16
 8080fb8:	4630      	mov	r0, r6
 8080fba:	f000 fc4e 	bl	808185a <_ZdlPvj>
        p_->setError(std::move(error));
 8080fbe:	4668      	mov	r0, sp
 8080fc0:	f7ff ff25 	bl	8080e0e <_ZN8particle5ErrorD1Ev>
    }
 8080fc4:	b009      	add	sp, #36	; 0x24
 8080fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8080fc8:	4631      	mov	r1, r6
 8080fca:	a802      	add	r0, sp, #8
 8080fcc:	f7ff ffb0 	bl	8080f30 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8080fd0:	68e0      	ldr	r0, [r4, #12]
 8080fd2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8080fd6:	b108      	cbz	r0, 8080fdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 8080fd8:	f000 fc96 	bl	8081908 <strdup>
        type_(type) {
 8080fdc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8080fde:	2010      	movs	r0, #16
 8080fe0:	f8ad 501c 	strh.w	r5, [sp, #28]
 8080fe4:	f7ff f857 	bl	8080096 <_Znwj>
 8080fe8:	4605      	mov	r5, r0
 8080fea:	b1e8      	cbz	r0, 8081028 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 8080fec:	2700      	movs	r7, #0
 8080fee:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080ff0:	2018      	movs	r0, #24
 8080ff2:	f7ff f850 	bl	8080096 <_Znwj>
 8080ff6:	4604      	mov	r4, r0
 8080ff8:	b188      	cbz	r0, 808101e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 8080ffa:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8080ffc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8080ffe:	a802      	add	r0, sp, #8
 8081000:	f7ff fe18 	bl	8080c34 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081004:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081006:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081008:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808100a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808100c:	9204      	str	r2, [sp, #16]
 808100e:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081010:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8081012:	60e3      	str	r3, [r4, #12]
 8081014:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 8081018:	9205      	str	r2, [sp, #20]
 808101a:	f7ff feeb 	bl	8080df4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 808101e:	4b08      	ldr	r3, [pc, #32]	; (8081040 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081020:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8081022:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081024:	4b07      	ldr	r3, [pc, #28]	; (8081044 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 8081026:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 8081028:	a806      	add	r0, sp, #24
 808102a:	f7ff fef0 	bl	8080e0e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 808102e:	a802      	add	r0, sp, #8
 8081030:	f7ff fdf1 	bl	8080c16 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081034:	2200      	movs	r2, #0
 8081036:	4629      	mov	r1, r5
 8081038:	4803      	ldr	r0, [pc, #12]	; (8081048 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 808103a:	f7ff fa7f 	bl	808053c <application_thread_invoke>
 808103e:	e7b7      	b.n	8080fb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 8081040:	08080ed9 	.word	0x08080ed9
 8081044:	08081171 	.word	0x08081171
 8081048:	08081735 	.word	0x08081735

0808104c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808104c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081050:	b08a      	sub	sp, #40	; 0x28
 8081052:	4605      	mov	r5, r0
 8081054:	460c      	mov	r4, r1
 8081056:	4617      	mov	r7, r2
 8081058:	4698      	mov	r8, r3
 808105a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808105e:	f7ff faf3 	bl	8080648 <spark_cloud_flag_connected>
 8081062:	ae07      	add	r6, sp, #28
    if (!connected()) {
 8081064:	4682      	mov	sl, r0
 8081066:	bb38      	cbnz	r0, 80810b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 8081068:	f64f 732e 	movw	r3, #65326	; 0xff2e
 808106c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808106e:	a905      	add	r1, sp, #20
 8081070:	4630      	mov	r0, r6
 8081072:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081076:	f7ff febd 	bl	8080df4 <_ZN8particle5ErrorC1EOS0_>
 808107a:	2014      	movs	r0, #20
 808107c:	f7ff f80b 	bl	8080096 <_Znwj>
 8081080:	4604      	mov	r4, r0
 8081082:	b148      	cbz	r0, 8081098 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081084:	2302      	movs	r3, #2
 8081086:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081088:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808108a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808108e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 8081090:	4631      	mov	r1, r6
 8081092:	300c      	adds	r0, #12
 8081094:	f7ff feae 	bl	8080df4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8081098:	4628      	mov	r0, r5
	: __shared_count(__p)
 808109a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808109c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80810a0:	f7ff ff32 	bl	8080f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80810a4:	4630      	mov	r0, r6
 80810a6:	f7ff feb2 	bl	8080e0e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80810aa:	a805      	add	r0, sp, #20
 80810ac:	f7ff feaf 	bl	8080e0e <_ZN8particle5ErrorD1Ev>
}
 80810b0:	4628      	mov	r0, r5
 80810b2:	b00a      	add	sp, #40	; 0x28
 80810b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80810b8:	230c      	movs	r3, #12
 80810ba:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80810be:	2014      	movs	r0, #20
 80810c0:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80810c4:	9307      	str	r3, [sp, #28]
 80810c6:	f7fe ffe6 	bl	8080096 <_Znwj>
 80810ca:	4601      	mov	r1, r0
 80810cc:	b128      	cbz	r0, 80810da <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80810ce:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80810d2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80810d6:	f880 a001 	strb.w	sl, [r0, #1]
 80810da:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80810dc:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80810de:	f7ff ff13 	bl	8080f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80810e2:	4b22      	ldr	r3, [pc, #136]	; (808116c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80810e4:	2008      	movs	r0, #8
 80810e6:	9308      	str	r3, [sp, #32]
 80810e8:	f7fe ffd5 	bl	8080096 <_Znwj>
 80810ec:	4682      	mov	sl, r0
 80810ee:	b128      	cbz	r0, 80810fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80810f0:	9b03      	ldr	r3, [sp, #12]
 80810f2:	a904      	add	r1, sp, #16
 80810f4:	f840 3b04 	str.w	r3, [r0], #4
 80810f8:	f7ff fd71 	bl	8080bde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80810fc:	4642      	mov	r2, r8
 80810fe:	4639      	mov	r1, r7
 8081100:	4620      	mov	r0, r4
 8081102:	9600      	str	r6, [sp, #0]
 8081104:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 8081108:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808110c:	f7ff faa4 	bl	8080658 <spark_send_event>
 8081110:	b9b8      	cbnz	r0, 8081142 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 8081112:	9b03      	ldr	r3, [sp, #12]
 8081114:	785b      	ldrb	r3, [r3, #1]
 8081116:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808111a:	b993      	cbnz	r3, 8081142 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 808111c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 8081120:	a905      	add	r1, sp, #20
 8081122:	a803      	add	r0, sp, #12
 8081124:	9205      	str	r2, [sp, #20]
 8081126:	f8ad 3018 	strh.w	r3, [sp, #24]
 808112a:	f7ff ff11 	bl	8080f50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808112e:	a805      	add	r0, sp, #20
 8081130:	f7ff fe6d 	bl	8080e0e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8081134:	a805      	add	r0, sp, #20
 8081136:	9909      	ldr	r1, [sp, #36]	; 0x24
 8081138:	f7ff fea6 	bl	8080e88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 808113c:	a806      	add	r0, sp, #24
 808113e:	f7ff fd38 	bl	8080bb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081142:	9b03      	ldr	r3, [sp, #12]
 8081144:	a904      	add	r1, sp, #16
 8081146:	a806      	add	r0, sp, #24
 8081148:	9305      	str	r3, [sp, #20]
 808114a:	f7ff fd48 	bl	8080bde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 808114e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8081150:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081152:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 8081154:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8081156:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 8081158:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 808115a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 808115c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 808115e:	f7ff fd28 	bl	8080bb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081162:	a804      	add	r0, sp, #16
 8081164:	f7ff fd25 	bl	8080bb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 8081168:	e7a2      	b.n	80810b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 808116a:	bf00      	nop
 808116c:	08081235 	.word	0x08081235

08081170 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 8081170:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081174:	4605      	mov	r5, r0
	  switch (__op)
 8081176:	d007      	beq.n	8081188 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 8081178:	2a03      	cmp	r2, #3
 808117a:	d018      	beq.n	80811ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 808117c:	2a01      	cmp	r2, #1
 808117e:	d101      	bne.n	8081184 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8081180:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081182:	6003      	str	r3, [r0, #0]
	}
 8081184:	2000      	movs	r0, #0
 8081186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8081188:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 808118a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808118c:	f7fe ff83 	bl	8080096 <_Znwj>
 8081190:	4604      	mov	r4, r0
 8081192:	b150      	cbz	r0, 80811aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081194:	4631      	mov	r1, r6
 8081196:	f7ff fecb 	bl	8080f30 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 808119a:	6930      	ldr	r0, [r6, #16]
 808119c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80811a0:	b108      	cbz	r0, 80811a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80811a2:	f000 fbb1 	bl	8081908 <strdup>
        type_(type) {
 80811a6:	6120      	str	r0, [r4, #16]
 80811a8:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80811aa:	602c      	str	r4, [r5, #0]
	}
 80811ac:	e7ea      	b.n	8081184 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80811ae:	6804      	ldr	r4, [r0, #0]
 80811b0:	2c00      	cmp	r4, #0
 80811b2:	d0e7      	beq.n	8081184 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80811b4:	f104 0010 	add.w	r0, r4, #16
 80811b8:	f7ff fe29 	bl	8080e0e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80811bc:	4620      	mov	r0, r4
 80811be:	f7ff fd2a 	bl	8080c16 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80811c2:	2118      	movs	r1, #24
 80811c4:	4620      	mov	r0, r4
 80811c6:	f000 fb48 	bl	808185a <_ZdlPvj>
 80811ca:	e7db      	b.n	8081184 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080811cc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80811cc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80811ce:	2300      	movs	r3, #0
 80811d0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80811d2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80811d4:	4604      	mov	r4, r0
 80811d6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80811d8:	b12b      	cbz	r3, 80811e6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80811da:	2202      	movs	r2, #2
 80811dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80811de:	68eb      	ldr	r3, [r5, #12]
 80811e0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80811e2:	68ab      	ldr	r3, [r5, #8]
 80811e4:	60a3      	str	r3, [r4, #8]
    }
 80811e6:	4620      	mov	r0, r4
 80811e8:	bd38      	pop	{r3, r4, r5, pc}

080811ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80811ea:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80811ec:	b570      	push	{r4, r5, r6, lr}
 80811ee:	4604      	mov	r4, r0
	  switch (__op)
 80811f0:	d007      	beq.n	8081202 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80811f2:	2a03      	cmp	r2, #3
 80811f4:	d012      	beq.n	808121c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80811f6:	2a01      	cmp	r2, #1
 80811f8:	d101      	bne.n	80811fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80811fa:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80811fc:	6003      	str	r3, [r0, #0]
	}
 80811fe:	2000      	movs	r0, #0
 8081200:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8081202:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 8081204:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8081206:	f7fe ff46 	bl	8080096 <_Znwj>
 808120a:	4605      	mov	r5, r0
 808120c:	b120      	cbz	r0, 8081218 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 808120e:	4631      	mov	r1, r6
 8081210:	f7ff ffdc 	bl	80811cc <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8081214:	7c33      	ldrb	r3, [r6, #16]
 8081216:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 8081218:	6025      	str	r5, [r4, #0]
	}
 808121a:	e7f0      	b.n	80811fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 808121c:	6804      	ldr	r4, [r0, #0]
 808121e:	2c00      	cmp	r4, #0
 8081220:	d0ed      	beq.n	80811fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 8081222:	4620      	mov	r0, r4
 8081224:	f7ff fcf7 	bl	8080c16 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8081228:	2114      	movs	r1, #20
 808122a:	4620      	mov	r0, r4
 808122c:	f000 fb15 	bl	808185a <_ZdlPvj>
 8081230:	e7e5      	b.n	80811fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

08081234 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8081234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081236:	4604      	mov	r4, r0
 8081238:	b089      	sub	sp, #36	; 0x24
 808123a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808123c:	a801      	add	r0, sp, #4
 808123e:	4611      	mov	r1, r2
 8081240:	f7ff fe22 	bl	8080e88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8081244:	b1a4      	cbz	r4, 8081270 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 8081246:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8081248:	b11d      	cbz	r5, 8081252 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 808124a:	4628      	mov	r0, r5
 808124c:	f000 fb5c 	bl	8081908 <strdup>
 8081250:	4605      	mov	r5, r0
 8081252:	a801      	add	r0, sp, #4
 8081254:	a903      	add	r1, sp, #12
        type_(type) {
 8081256:	9503      	str	r5, [sp, #12]
 8081258:	f8ad 4010 	strh.w	r4, [sp, #16]
 808125c:	f7ff fe78 	bl	8080f50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8081260:	a803      	add	r0, sp, #12
 8081262:	f7ff fdd4 	bl	8080e0e <_ZN8particle5ErrorD1Ev>
 8081266:	a802      	add	r0, sp, #8
 8081268:	f7ff fca3 	bl	8080bb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808126c:	b009      	add	sp, #36	; 0x24
 808126e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8081270:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8081272:	9d01      	ldr	r5, [sp, #4]
 8081274:	e8d5 2f4f 	ldrexb	r2, [r5]
 8081278:	2a00      	cmp	r2, #0
 808127a:	d103      	bne.n	8081284 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 808127c:	e8c5 3f41 	strexb	r1, r3, [r5]
 8081280:	2900      	cmp	r1, #0
 8081282:	d1f7      	bne.n	8081274 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 8081284:	d1ef      	bne.n	8081266 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 8081286:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 8081288:	f3bf 8f5b 	dmb	ish
 808128c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808128e:	f3bf 8f5b 	dmb	ish
 8081292:	1d2b      	adds	r3, r5, #4
 8081294:	e853 6f00 	ldrex	r6, [r3]
 8081298:	e843 4200 	strex	r2, r4, [r3]
 808129c:	2a00      	cmp	r2, #0
 808129e:	d1f9      	bne.n	8081294 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80812a0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80812a4:	2e00      	cmp	r6, #0
 80812a6:	d0de      	beq.n	8081266 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80812a8:	4620      	mov	r0, r4
 80812aa:	f7ff f93f 	bl	808052c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80812ae:	4607      	mov	r7, r0
 80812b0:	b160      	cbz	r0, 80812cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80812b2:	4630      	mov	r0, r6
 80812b4:	f105 010c 	add.w	r1, r5, #12
 80812b8:	f7ff fe15 	bl	8080ee6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80812bc:	4630      	mov	r0, r6
 80812be:	f7ff fcaa 	bl	8080c16 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80812c2:	2110      	movs	r1, #16
 80812c4:	4630      	mov	r0, r6
 80812c6:	f000 fac8 	bl	808185a <_ZdlPvj>
 80812ca:	e7cc      	b.n	8081266 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80812cc:	4631      	mov	r1, r6
 80812ce:	a803      	add	r0, sp, #12
 80812d0:	f7ff ff7c 	bl	80811cc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80812d4:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80812d6:	2010      	movs	r0, #16
 80812d8:	f88d 301c 	strb.w	r3, [sp, #28]
 80812dc:	f7fe fedb 	bl	8080096 <_Znwj>
 80812e0:	4605      	mov	r5, r0
 80812e2:	b1d0      	cbz	r0, 808131a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80812e4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80812e6:	2014      	movs	r0, #20
 80812e8:	f7fe fed5 	bl	8080096 <_Znwj>
 80812ec:	4604      	mov	r4, r0
 80812ee:	b178      	cbz	r0, 8081310 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80812f0:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80812f2:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80812f4:	a803      	add	r0, sp, #12
 80812f6:	f7ff fc9d 	bl	8080c34 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80812fa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80812fc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80812fe:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081300:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8081302:	9205      	str	r2, [sp, #20]
 8081304:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8081306:	60e3      	str	r3, [r4, #12]
 8081308:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 808130c:	9206      	str	r2, [sp, #24]
 808130e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 8081310:	4b06      	ldr	r3, [pc, #24]	; (808132c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081312:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8081314:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081316:	4b06      	ldr	r3, [pc, #24]	; (8081330 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 8081318:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 808131a:	a803      	add	r0, sp, #12
 808131c:	f7ff fc7b 	bl	8080c16 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081320:	2200      	movs	r2, #0
 8081322:	4629      	mov	r1, r5
 8081324:	4803      	ldr	r0, [pc, #12]	; (8081334 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 8081326:	f7ff f909 	bl	808053c <application_thread_invoke>
 808132a:	e7c7      	b.n	80812bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 808132c:	08080ef9 	.word	0x08080ef9
 8081330:	080811eb 	.word	0x080811eb
 8081334:	08081735 	.word	0x08081735

08081338 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8081338:	4770      	bx	lr

0808133a <_ZN9IPAddressD0Ev>:
 808133a:	b510      	push	{r4, lr}
 808133c:	4604      	mov	r4, r0
 808133e:	2108      	movs	r1, #8
 8081340:	f000 fa8b 	bl	808185a <_ZdlPvj>
 8081344:	4620      	mov	r0, r4
 8081346:	bd10      	pop	{r4, pc}

08081348 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8081348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808134a:	460e      	mov	r6, r1
 808134c:	2400      	movs	r4, #0
 808134e:	f100 0708 	add.w	r7, r0, #8
 8081352:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8081354:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8081358:	220a      	movs	r2, #10
 808135a:	4630      	mov	r0, r6
 808135c:	f7ff fbdb 	bl	8080b16 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081360:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081362:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8081364:	d101      	bne.n	808136a <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8081366:	4620      	mov	r0, r4
 8081368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 808136a:	2c00      	cmp	r4, #0
 808136c:	d0f2      	beq.n	8081354 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808136e:	212e      	movs	r1, #46	; 0x2e
 8081370:	4630      	mov	r0, r6
 8081372:	f7ff fbc1 	bl	8080af8 <_ZN5Print5printEc>
 8081376:	4404      	add	r4, r0
 8081378:	e7ec      	b.n	8081354 <_ZNK9IPAddress7printToER5Print+0xc>
	...

0808137c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 808137c:	4a02      	ldr	r2, [pc, #8]	; (8081388 <_ZN9IPAddressC1Ev+0xc>)
 808137e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8081380:	2200      	movs	r2, #0
 8081382:	6042      	str	r2, [r0, #4]
}
 8081384:	4770      	bx	lr
 8081386:	bf00      	nop
 8081388:	08081ac8 	.word	0x08081ac8

0808138c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 808138c:	4a02      	ldr	r2, [pc, #8]	; (8081398 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808138e:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8081390:	680a      	ldr	r2, [r1, #0]
 8081392:	6042      	str	r2, [r0, #4]
}
 8081394:	4770      	bx	lr
 8081396:	bf00      	nop
 8081398:	08081ac8 	.word	0x08081ac8

0808139c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 808139c:	4a01      	ldr	r2, [pc, #4]	; (80813a4 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 808139e:	e9c0 2100 	strd	r2, r1, [r0]
}
 80813a2:	4770      	bx	lr
 80813a4:	08081ac8 	.word	0x08081ac8

080813a8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80813a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80813aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80813ae:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80813b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80813b6:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80813ba:	6044      	str	r4, [r0, #4]
}
 80813bc:	bd10      	pop	{r4, pc}
	...

080813c0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80813c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80813c2:	4d04      	ldr	r5, [pc, #16]	; (80813d4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80813c4:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80813c6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80813ca:	9500      	str	r5, [sp, #0]
 80813cc:	f7ff ffec 	bl	80813a8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80813d0:	b003      	add	sp, #12
 80813d2:	bd30      	pop	{r4, r5, pc}
 80813d4:	08081ac8 	.word	0x08081ac8

080813d8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80813d8:	7441      	strb	r1, [r0, #17]
}
 80813da:	4770      	bx	lr

080813dc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80813dc:	4770      	bx	lr

080813de <_ZN9USBSerial4readEv>:
{
 80813de:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80813e0:	2100      	movs	r1, #0
 80813e2:	7c00      	ldrb	r0, [r0, #16]
 80813e4:	f7ff f872 	bl	80804cc <HAL_USB_USART_Receive_Data>
}
 80813e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80813ec:	bd08      	pop	{r3, pc}

080813ee <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80813ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80813f0:	2101      	movs	r1, #1
 80813f2:	7c00      	ldrb	r0, [r0, #16]
 80813f4:	f7ff f86a 	bl	80804cc <HAL_USB_USART_Receive_Data>
}
 80813f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80813fc:	bd08      	pop	{r3, pc}

080813fe <_ZN9USBSerial17availableForWriteEv>:
{
 80813fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8081400:	7c00      	ldrb	r0, [r0, #16]
 8081402:	f7ff f85b 	bl	80804bc <HAL_USB_USART_Available_Data_For_Write>
}
 8081406:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808140a:	bd08      	pop	{r3, pc}

0808140c <_ZN9USBSerial9availableEv>:
{
 808140c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808140e:	7c00      	ldrb	r0, [r0, #16]
 8081410:	f7ff f84c 	bl	80804ac <HAL_USB_USART_Available_Data>
}
 8081414:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081418:	bd08      	pop	{r3, pc}

0808141a <_ZN9USBSerial5writeEh>:
{
 808141a:	b538      	push	{r3, r4, r5, lr}
 808141c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808141e:	7c00      	ldrb	r0, [r0, #16]
{
 8081420:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081422:	f7ff f84b 	bl	80804bc <HAL_USB_USART_Available_Data_For_Write>
 8081426:	2800      	cmp	r0, #0
 8081428:	dc01      	bgt.n	808142e <_ZN9USBSerial5writeEh+0x14>
 808142a:	7c60      	ldrb	r0, [r4, #17]
 808142c:	b128      	cbz	r0, 808143a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808142e:	4629      	mov	r1, r5
 8081430:	7c20      	ldrb	r0, [r4, #16]
 8081432:	f7ff f853 	bl	80804dc <HAL_USB_USART_Send_Data>
 8081436:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 808143a:	bd38      	pop	{r3, r4, r5, pc}

0808143c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 808143c:	7c00      	ldrb	r0, [r0, #16]
 808143e:	f7ff b855 	b.w	80804ec <HAL_USB_USART_Flush_Data>

08081442 <_ZN9USBSerialD0Ev>:
 8081442:	b510      	push	{r4, lr}
 8081444:	4604      	mov	r4, r0
 8081446:	2114      	movs	r1, #20
 8081448:	f000 fa07 	bl	808185a <_ZdlPvj>
 808144c:	4620      	mov	r0, r4
 808144e:	bd10      	pop	{r4, pc}

08081450 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8081450:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8081452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081456:	4604      	mov	r4, r0
 8081458:	4608      	mov	r0, r1
 808145a:	2100      	movs	r1, #0
 808145c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8081460:	4b04      	ldr	r3, [pc, #16]	; (8081474 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8081462:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8081464:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8081466:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8081468:	4611      	mov	r1, r2
  _blocking = true;
 808146a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 808146c:	f7ff f80e 	bl	808048c <HAL_USB_USART_Init>
}
 8081470:	4620      	mov	r0, r4
 8081472:	bd10      	pop	{r4, pc}
 8081474:	08081adc 	.word	0x08081adc

08081478 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8081478:	2200      	movs	r2, #0
 808147a:	7c00      	ldrb	r0, [r0, #16]
 808147c:	f7ff b80e 	b.w	808049c <HAL_USB_USART_Begin>

08081480 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8081480:	b510      	push	{r4, lr}
 8081482:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081484:	2214      	movs	r2, #20
 8081486:	2100      	movs	r1, #0
 8081488:	f000 fa0a 	bl	80818a0 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808148c:	4b05      	ldr	r3, [pc, #20]	; (80814a4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808148e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8081490:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8081492:	4b05      	ldr	r3, [pc, #20]	; (80814a8 <_Z19acquireSerialBufferv+0x28>)
 8081494:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8081496:	f240 1301 	movw	r3, #257	; 0x101
 808149a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808149c:	2381      	movs	r3, #129	; 0x81
 808149e:	8223      	strh	r3, [r4, #16]
}
 80814a0:	bd10      	pop	{r4, pc}
 80814a2:	bf00      	nop
 80814a4:	200000dc 	.word	0x200000dc
 80814a8:	200001dd 	.word	0x200001dd

080814ac <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80814ac:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80814ae:	4d0f      	ldr	r5, [pc, #60]	; (80814ec <_Z16_fetch_usbserialv+0x40>)
{
 80814b0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80814b2:	a801      	add	r0, sp, #4
 80814b4:	f7ff ffe4 	bl	8081480 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80814b8:	7829      	ldrb	r1, [r5, #0]
 80814ba:	f3bf 8f5b 	dmb	ish
 80814be:	f011 0401 	ands.w	r4, r1, #1
 80814c2:	d110      	bne.n	80814e6 <_Z16_fetch_usbserialv+0x3a>
 80814c4:	4628      	mov	r0, r5
 80814c6:	f7fe fdea 	bl	808009e <__cxa_guard_acquire>
 80814ca:	b160      	cbz	r0, 80814e6 <_Z16_fetch_usbserialv+0x3a>
 80814cc:	4621      	mov	r1, r4
 80814ce:	aa01      	add	r2, sp, #4
 80814d0:	4807      	ldr	r0, [pc, #28]	; (80814f0 <_Z16_fetch_usbserialv+0x44>)
 80814d2:	f7ff ffbd 	bl	8081450 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80814d6:	4628      	mov	r0, r5
 80814d8:	f7fe fde6 	bl	80800a8 <__cxa_guard_release>
 80814dc:	4a05      	ldr	r2, [pc, #20]	; (80814f4 <_Z16_fetch_usbserialv+0x48>)
 80814de:	4906      	ldr	r1, [pc, #24]	; (80814f8 <_Z16_fetch_usbserialv+0x4c>)
 80814e0:	4803      	ldr	r0, [pc, #12]	; (80814f0 <_Z16_fetch_usbserialv+0x44>)
 80814e2:	f000 f9b5 	bl	8081850 <__aeabi_atexit>
	return _usbserial;
}
 80814e6:	4802      	ldr	r0, [pc, #8]	; (80814f0 <_Z16_fetch_usbserialv+0x44>)
 80814e8:	b007      	add	sp, #28
 80814ea:	bd30      	pop	{r4, r5, pc}
 80814ec:	200000ac 	.word	0x200000ac
 80814f0:	200000b4 	.word	0x200000b4
 80814f4:	20000068 	.word	0x20000068
 80814f8:	080813dd 	.word	0x080813dd

080814fc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80814fc:	b510      	push	{r4, lr}
 80814fe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081500:	2214      	movs	r2, #20
 8081502:	2100      	movs	r1, #0
 8081504:	f000 f9cc 	bl	80818a0 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081508:	4b05      	ldr	r3, [pc, #20]	; (8081520 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808150a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 808150c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808150e:	4b05      	ldr	r3, [pc, #20]	; (8081524 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8081510:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8081512:	f240 1301 	movw	r3, #257	; 0x101
 8081516:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081518:	2381      	movs	r3, #129	; 0x81
 808151a:	8223      	strh	r3, [r4, #16]
}
 808151c:	bd10      	pop	{r4, pc}
 808151e:	bf00      	nop
 8081520:	2000025e 	.word	0x2000025e
 8081524:	2000035f 	.word	0x2000035f

08081528 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8081528:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808152a:	4c0f      	ldr	r4, [pc, #60]	; (8081568 <_Z17_fetch_usbserial1v+0x40>)
{
 808152c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808152e:	a801      	add	r0, sp, #4
 8081530:	f7ff ffe4 	bl	80814fc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081534:	7823      	ldrb	r3, [r4, #0]
 8081536:	f3bf 8f5b 	dmb	ish
 808153a:	07db      	lsls	r3, r3, #31
 808153c:	d410      	bmi.n	8081560 <_Z17_fetch_usbserial1v+0x38>
 808153e:	4620      	mov	r0, r4
 8081540:	f7fe fdad 	bl	808009e <__cxa_guard_acquire>
 8081544:	b160      	cbz	r0, 8081560 <_Z17_fetch_usbserial1v+0x38>
 8081546:	2101      	movs	r1, #1
 8081548:	aa01      	add	r2, sp, #4
 808154a:	4808      	ldr	r0, [pc, #32]	; (808156c <_Z17_fetch_usbserial1v+0x44>)
 808154c:	f7ff ff80 	bl	8081450 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081550:	4620      	mov	r0, r4
 8081552:	f7fe fda9 	bl	80800a8 <__cxa_guard_release>
 8081556:	4a06      	ldr	r2, [pc, #24]	; (8081570 <_Z17_fetch_usbserial1v+0x48>)
 8081558:	4906      	ldr	r1, [pc, #24]	; (8081574 <_Z17_fetch_usbserial1v+0x4c>)
 808155a:	4804      	ldr	r0, [pc, #16]	; (808156c <_Z17_fetch_usbserial1v+0x44>)
 808155c:	f000 f978 	bl	8081850 <__aeabi_atexit>
  return _usbserial1;
}
 8081560:	4802      	ldr	r0, [pc, #8]	; (808156c <_Z17_fetch_usbserial1v+0x44>)
 8081562:	b006      	add	sp, #24
 8081564:	bd10      	pop	{r4, pc}
 8081566:	bf00      	nop
 8081568:	200000b0 	.word	0x200000b0
 808156c:	200000c8 	.word	0x200000c8
 8081570:	20000068 	.word	0x20000068
 8081574:	080813dd 	.word	0x080813dd

08081578 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8081578:	2200      	movs	r2, #0
 808157a:	6840      	ldr	r0, [r0, #4]
 808157c:	4611      	mov	r1, r2
 808157e:	f7ff b81b 	b.w	80805b8 <network_ready>

08081582 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081582:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8081584:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8081586:	b085      	sub	sp, #20
 8081588:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808158a:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 808158c:	460f      	mov	r7, r1
 808158e:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8081590:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081592:	f000 f9d4 	bl	808193e <strlen>
 8081596:	687b      	ldr	r3, [r7, #4]
 8081598:	b281      	uxth	r1, r0
 808159a:	9600      	str	r6, [sp, #0]
 808159c:	4628      	mov	r0, r5
 808159e:	aa03      	add	r2, sp, #12
 80815a0:	f7fe ff6c 	bl	808047c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80815a4:	b130      	cbz	r0, 80815b4 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 80815a6:	4631      	mov	r1, r6
 80815a8:	4620      	mov	r0, r4
 80815aa:	f7ff fef7 	bl	808139c <_ZN9IPAddressC1Em>
    }
 80815ae:	4620      	mov	r0, r4
 80815b0:	b005      	add	sp, #20
 80815b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80815b4:	4620      	mov	r0, r4
 80815b6:	a903      	add	r1, sp, #12
 80815b8:	f7ff fee8 	bl	808138c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80815bc:	e7f7      	b.n	80815ae <_ZN5spark13CellularClass7resolveEPKc+0x2c>

080815be <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80815be:	2200      	movs	r2, #0
 80815c0:	6840      	ldr	r0, [r0, #4]
 80815c2:	4611      	mov	r1, r2
 80815c4:	f7ff b818 	b.w	80805f8 <network_listening>

080815c8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80815c8:	2200      	movs	r2, #0
 80815ca:	6840      	ldr	r0, [r0, #4]
 80815cc:	4611      	mov	r1, r2
 80815ce:	f7ff b823 	b.w	8080618 <network_get_listen_timeout>

080815d2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80815d2:	2200      	movs	r2, #0
 80815d4:	6840      	ldr	r0, [r0, #4]
 80815d6:	f7ff b817 	b.w	8080608 <network_set_listen_timeout>

080815da <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80815da:	2200      	movs	r2, #0
 80815dc:	6840      	ldr	r0, [r0, #4]
 80815de:	f081 0101 	eor.w	r1, r1, #1
 80815e2:	f7ff b801 	b.w	80805e8 <network_listen>

080815e6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80815e6:	2300      	movs	r3, #0
 80815e8:	6840      	ldr	r0, [r0, #4]
 80815ea:	461a      	mov	r2, r3
 80815ec:	4619      	mov	r1, r3
 80815ee:	f7fe bfeb 	b.w	80805c8 <network_on>

080815f2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80815f2:	2200      	movs	r2, #0
 80815f4:	6840      	ldr	r0, [r0, #4]
 80815f6:	4611      	mov	r1, r2
 80815f8:	f7fe bfce 	b.w	8080598 <network_connecting>

080815fc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80815fc:	2200      	movs	r2, #0
 80815fe:	2102      	movs	r1, #2
 8081600:	6840      	ldr	r0, [r0, #4]
 8081602:	f7fe bfd1 	b.w	80805a8 <network_disconnect>

08081606 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 8081606:	2300      	movs	r3, #0
 8081608:	6840      	ldr	r0, [r0, #4]
 808160a:	461a      	mov	r2, r3
 808160c:	f7fe bfbc 	b.w	8080588 <network_connect>

08081610 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8081610:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8081612:	2428      	movs	r4, #40	; 0x28
 8081614:	4b07      	ldr	r3, [pc, #28]	; (8081634 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8081616:	4622      	mov	r2, r4
 8081618:	4618      	mov	r0, r3
 808161a:	2100      	movs	r1, #0
 808161c:	f000 f940 	bl	80818a0 <memset>
        cid = -1;
 8081620:	f04f 32ff 	mov.w	r2, #4294967295
 8081624:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8081626:	2204      	movs	r2, #4
 8081628:	4b03      	ldr	r3, [pc, #12]	; (8081638 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 808162a:	8004      	strh	r4, [r0, #0]
 808162c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808162e:	4a03      	ldr	r2, [pc, #12]	; (808163c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8081630:	601a      	str	r2, [r3, #0]
 8081632:	bd10      	pop	{r4, pc}
 8081634:	200003e8 	.word	0x200003e8
 8081638:	200003e0 	.word	0x200003e0
 808163c:	08081b0c 	.word	0x08081b0c

08081640 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8081640:	4770      	bx	lr

08081642 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081642:	7441      	strb	r1, [r0, #17]
}
 8081644:	4770      	bx	lr

08081646 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 8081646:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8081648:	7c00      	ldrb	r0, [r0, #16]
 808164a:	f7fe ff0f 	bl	808046c <hal_usart_available_data_for_write>
}
 808164e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081652:	bd08      	pop	{r3, pc}

08081654 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8081654:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8081656:	7c00      	ldrb	r0, [r0, #16]
 8081658:	f7fe fee8 	bl	808042c <hal_usart_available>
}
 808165c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081660:	bd08      	pop	{r3, pc}

08081662 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8081662:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8081664:	7c00      	ldrb	r0, [r0, #16]
 8081666:	f7fe fef1 	bl	808044c <hal_usart_peek>
}
 808166a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808166e:	bd08      	pop	{r3, pc}

08081670 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8081670:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 8081672:	7c00      	ldrb	r0, [r0, #16]
 8081674:	f7fe fee2 	bl	808043c <hal_usart_read>
}
 8081678:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808167c:	bd08      	pop	{r3, pc}

0808167e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 808167e:	7c00      	ldrb	r0, [r0, #16]
 8081680:	f7fe beec 	b.w	808045c <hal_usart_flush>

08081684 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8081684:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8081686:	7c46      	ldrb	r6, [r0, #17]
{
 8081688:	4604      	mov	r4, r0
 808168a:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808168c:	b12e      	cbz	r6, 808169a <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 808168e:	4629      	mov	r1, r5
 8081690:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8081692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8081696:	f7fe bec1 	b.w	808041c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808169a:	7c00      	ldrb	r0, [r0, #16]
 808169c:	f7fe fee6 	bl	808046c <hal_usart_available_data_for_write>
 80816a0:	2800      	cmp	r0, #0
 80816a2:	dcf4      	bgt.n	808168e <_ZN11USARTSerial5writeEh+0xa>
}
 80816a4:	4630      	mov	r0, r6
 80816a6:	bd70      	pop	{r4, r5, r6, pc}

080816a8 <_ZN11USARTSerialD0Ev>:
 80816a8:	b510      	push	{r4, lr}
 80816aa:	4604      	mov	r4, r0
 80816ac:	2114      	movs	r1, #20
 80816ae:	f000 f8d4 	bl	808185a <_ZdlPvj>
 80816b2:	4620      	mov	r0, r4
 80816b4:	bd10      	pop	{r4, pc}
	...

080816b8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80816b8:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80816bc:	b510      	push	{r4, lr}
 80816be:	4604      	mov	r4, r0
 80816c0:	4608      	mov	r0, r1
 80816c2:	4611      	mov	r1, r2
 80816c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80816c8:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80816cc:	4a04      	ldr	r2, [pc, #16]	; (80816e0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80816ce:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80816d0:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80816d2:	2201      	movs	r2, #1
 80816d4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80816d6:	461a      	mov	r2, r3
 80816d8:	f7fe fe98 	bl	808040c <hal_usart_init>
}
 80816dc:	4620      	mov	r0, r4
 80816de:	bd10      	pop	{r4, pc}
 80816e0:	08081b40 	.word	0x08081b40

080816e4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80816e4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80816e6:	4d0d      	ldr	r5, [pc, #52]	; (808171c <_Z22__fetch_global_Serial1v+0x38>)
 80816e8:	7829      	ldrb	r1, [r5, #0]
 80816ea:	f3bf 8f5b 	dmb	ish
 80816ee:	f011 0401 	ands.w	r4, r1, #1
 80816f2:	d111      	bne.n	8081718 <_Z22__fetch_global_Serial1v+0x34>
 80816f4:	4628      	mov	r0, r5
 80816f6:	f7fe fcd2 	bl	808009e <__cxa_guard_acquire>
 80816fa:	b168      	cbz	r0, 8081718 <_Z22__fetch_global_Serial1v+0x34>
 80816fc:	4621      	mov	r1, r4
 80816fe:	4a08      	ldr	r2, [pc, #32]	; (8081720 <_Z22__fetch_global_Serial1v+0x3c>)
 8081700:	4b08      	ldr	r3, [pc, #32]	; (8081724 <_Z22__fetch_global_Serial1v+0x40>)
 8081702:	4809      	ldr	r0, [pc, #36]	; (8081728 <_Z22__fetch_global_Serial1v+0x44>)
 8081704:	f7ff ffd8 	bl	80816b8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8081708:	4628      	mov	r0, r5
 808170a:	f7fe fccd 	bl	80800a8 <__cxa_guard_release>
 808170e:	4a07      	ldr	r2, [pc, #28]	; (808172c <_Z22__fetch_global_Serial1v+0x48>)
 8081710:	4907      	ldr	r1, [pc, #28]	; (8081730 <_Z22__fetch_global_Serial1v+0x4c>)
 8081712:	4805      	ldr	r0, [pc, #20]	; (8081728 <_Z22__fetch_global_Serial1v+0x44>)
 8081714:	f000 f89c 	bl	8081850 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8081718:	4803      	ldr	r0, [pc, #12]	; (8081728 <_Z22__fetch_global_Serial1v+0x44>)
 808171a:	bd38      	pop	{r3, r4, r5, pc}
 808171c:	20000410 	.word	0x20000410
 8081720:	20000414 	.word	0x20000414
 8081724:	20000498 	.word	0x20000498
 8081728:	2000051c 	.word	0x2000051c
 808172c:	20000068 	.word	0x20000068
 8081730:	08081641 	.word	0x08081641

08081734 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8081734:	b510      	push	{r4, lr}
      if (_M_empty())
 8081736:	6883      	ldr	r3, [r0, #8]
 8081738:	4604      	mov	r4, r0
 808173a:	b90b      	cbnz	r3, 8081740 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808173c:	f000 f891 	bl	8081862 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081740:	68c3      	ldr	r3, [r0, #12]
 8081742:	4798      	blx	r3
      if (_M_manager)
 8081744:	68a3      	ldr	r3, [r4, #8]
 8081746:	b11b      	cbz	r3, 8081750 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081748:	2203      	movs	r2, #3
 808174a:	4621      	mov	r1, r4
 808174c:	4620      	mov	r0, r4
 808174e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081750:	4620      	mov	r0, r4
}
 8081752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 8081756:	2110      	movs	r1, #16
 8081758:	f000 b87f 	b.w	808185a <_ZdlPvj>

0808175c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808175c:	2300      	movs	r3, #0
 808175e:	6840      	ldr	r0, [r0, #4]
 8081760:	461a      	mov	r2, r3
 8081762:	f7fe bf11 	b.w	8080588 <network_connect>

08081766 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8081766:	2200      	movs	r2, #0
 8081768:	2102      	movs	r1, #2
 808176a:	6840      	ldr	r0, [r0, #4]
 808176c:	f7fe bf1c 	b.w	80805a8 <network_disconnect>

08081770 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8081770:	2200      	movs	r2, #0
 8081772:	6840      	ldr	r0, [r0, #4]
 8081774:	4611      	mov	r1, r2
 8081776:	f7fe bf0f 	b.w	8080598 <network_connecting>

0808177a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808177a:	2200      	movs	r2, #0
 808177c:	6840      	ldr	r0, [r0, #4]
 808177e:	4611      	mov	r1, r2
 8081780:	f7fe bf1a 	b.w	80805b8 <network_ready>

08081784 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8081784:	2300      	movs	r3, #0
 8081786:	6840      	ldr	r0, [r0, #4]
 8081788:	461a      	mov	r2, r3
 808178a:	4619      	mov	r1, r3
 808178c:	f7fe bf1c 	b.w	80805c8 <network_on>

08081790 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8081790:	2300      	movs	r3, #0
 8081792:	6840      	ldr	r0, [r0, #4]
 8081794:	461a      	mov	r2, r3
 8081796:	4619      	mov	r1, r3
 8081798:	f7fe bf1e 	b.w	80805d8 <network_off>

0808179c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808179c:	2200      	movs	r2, #0
 808179e:	6840      	ldr	r0, [r0, #4]
 80817a0:	f081 0101 	eor.w	r1, r1, #1
 80817a4:	f7fe bf20 	b.w	80805e8 <network_listen>

080817a8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80817a8:	2200      	movs	r2, #0
 80817aa:	6840      	ldr	r0, [r0, #4]
 80817ac:	f7fe bf2c 	b.w	8080608 <network_set_listen_timeout>

080817b0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80817b0:	2200      	movs	r2, #0
 80817b2:	6840      	ldr	r0, [r0, #4]
 80817b4:	4611      	mov	r1, r2
 80817b6:	f7fe bf2f 	b.w	8080618 <network_get_listen_timeout>

080817ba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80817ba:	2200      	movs	r2, #0
 80817bc:	6840      	ldr	r0, [r0, #4]
 80817be:	4611      	mov	r1, r2
 80817c0:	f7fe bf1a 	b.w	80805f8 <network_listening>

080817c4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80817c4:	b570      	push	{r4, r5, r6, lr}
 80817c6:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 80817c8:	2600      	movs	r6, #0
 80817ca:	b086      	sub	sp, #24
 80817cc:	4604      	mov	r4, r0
    IPAddress addr;
 80817ce:	a804      	add	r0, sp, #16
 80817d0:	f7ff fdd4 	bl	808137c <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80817d4:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 80817d6:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80817d8:	f000 f8b1 	bl	808193e <strlen>
 80817dc:	4b0a      	ldr	r3, [pc, #40]	; (8081808 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 80817de:	9600      	str	r6, [sp, #0]
 80817e0:	b281      	uxth	r1, r0
 80817e2:	685b      	ldr	r3, [r3, #4]
 80817e4:	4628      	mov	r0, r5
 80817e6:	aa03      	add	r2, sp, #12
 80817e8:	f7fe fe48 	bl	808047c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80817ec:	b130      	cbz	r0, 80817fc <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80817ee:	4631      	mov	r1, r6
 80817f0:	4620      	mov	r0, r4
 80817f2:	f7ff fdd3 	bl	808139c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80817f6:	4620      	mov	r0, r4
 80817f8:	b006      	add	sp, #24
 80817fa:	bd70      	pop	{r4, r5, r6, pc}
 80817fc:	4620      	mov	r0, r4
 80817fe:	a903      	add	r1, sp, #12
 8081800:	f7ff fdc4 	bl	808138c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 8081804:	e7f7      	b.n	80817f6 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 8081806:	bf00      	nop
 8081808:	200003e0 	.word	0x200003e0

0808180c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808180c:	4b02      	ldr	r3, [pc, #8]	; (8081818 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808180e:	4a03      	ldr	r2, [pc, #12]	; (808181c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8081810:	601a      	str	r2, [r3, #0]
 8081812:	2200      	movs	r2, #0
 8081814:	605a      	str	r2, [r3, #4]

} // spark
 8081816:	4770      	bx	lr
 8081818:	20000530 	.word	0x20000530
 808181c:	08081b70 	.word	0x08081b70

08081820 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8081820:	2300      	movs	r3, #0
 8081822:	b513      	push	{r0, r1, r4, lr}
 8081824:	4c07      	ldr	r4, [pc, #28]	; (8081844 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8081826:	461a      	mov	r2, r3
 8081828:	4619      	mov	r1, r3
 808182a:	4620      	mov	r0, r4
 808182c:	9300      	str	r3, [sp, #0]
 808182e:	f7ff fdc7 	bl	80813c0 <_ZN9IPAddressC1Ehhhh>
 8081832:	4620      	mov	r0, r4
 8081834:	4a04      	ldr	r2, [pc, #16]	; (8081848 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8081836:	4905      	ldr	r1, [pc, #20]	; (808184c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8081838:	b002      	add	sp, #8
 808183a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808183e:	f000 b807 	b.w	8081850 <__aeabi_atexit>
 8081842:	bf00      	nop
 8081844:	2000053c 	.word	0x2000053c
 8081848:	20000068 	.word	0x20000068
 808184c:	08081339 	.word	0x08081339

08081850 <__aeabi_atexit>:
 8081850:	460b      	mov	r3, r1
 8081852:	4601      	mov	r1, r0
 8081854:	4618      	mov	r0, r3
 8081856:	f000 b807 	b.w	8081868 <__cxa_atexit>

0808185a <_ZdlPvj>:
 808185a:	f7fe bc1e 	b.w	808009a <_ZdlPv>

0808185e <_ZnwjRKSt9nothrow_t>:
 808185e:	f7fe bc1a 	b.w	8080096 <_Znwj>

08081862 <_ZSt25__throw_bad_function_callv>:
 8081862:	b508      	push	{r3, lr}
 8081864:	f7fe ff30 	bl	80806c8 <abort>

08081868 <__cxa_atexit>:
 8081868:	b510      	push	{r4, lr}
 808186a:	4604      	mov	r4, r0
 808186c:	4804      	ldr	r0, [pc, #16]	; (8081880 <__cxa_atexit+0x18>)
 808186e:	4613      	mov	r3, r2
 8081870:	b120      	cbz	r0, 808187c <__cxa_atexit+0x14>
 8081872:	460a      	mov	r2, r1
 8081874:	2002      	movs	r0, #2
 8081876:	4621      	mov	r1, r4
 8081878:	f3af 8000 	nop.w
 808187c:	bd10      	pop	{r4, pc}
 808187e:	bf00      	nop
 8081880:	00000000 	.word	0x00000000

08081884 <memcpy>:
 8081884:	440a      	add	r2, r1
 8081886:	4291      	cmp	r1, r2
 8081888:	f100 33ff 	add.w	r3, r0, #4294967295
 808188c:	d100      	bne.n	8081890 <memcpy+0xc>
 808188e:	4770      	bx	lr
 8081890:	b510      	push	{r4, lr}
 8081892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8081896:	4291      	cmp	r1, r2
 8081898:	f803 4f01 	strb.w	r4, [r3, #1]!
 808189c:	d1f9      	bne.n	8081892 <memcpy+0xe>
 808189e:	bd10      	pop	{r4, pc}

080818a0 <memset>:
 80818a0:	4603      	mov	r3, r0
 80818a2:	4402      	add	r2, r0
 80818a4:	4293      	cmp	r3, r2
 80818a6:	d100      	bne.n	80818aa <memset+0xa>
 80818a8:	4770      	bx	lr
 80818aa:	f803 1b01 	strb.w	r1, [r3], #1
 80818ae:	e7f9      	b.n	80818a4 <memset+0x4>

080818b0 <srand>:
 80818b0:	b538      	push	{r3, r4, r5, lr}
 80818b2:	4b0d      	ldr	r3, [pc, #52]	; (80818e8 <srand+0x38>)
 80818b4:	4604      	mov	r4, r0
 80818b6:	681d      	ldr	r5, [r3, #0]
 80818b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80818ba:	b97b      	cbnz	r3, 80818dc <srand+0x2c>
 80818bc:	2018      	movs	r0, #24
 80818be:	f7fe fee3 	bl	8080688 <malloc>
 80818c2:	4a0a      	ldr	r2, [pc, #40]	; (80818ec <srand+0x3c>)
 80818c4:	4b0a      	ldr	r3, [pc, #40]	; (80818f0 <srand+0x40>)
 80818c6:	63a8      	str	r0, [r5, #56]	; 0x38
 80818c8:	e9c0 2300 	strd	r2, r3, [r0]
 80818cc:	4b09      	ldr	r3, [pc, #36]	; (80818f4 <srand+0x44>)
 80818ce:	2201      	movs	r2, #1
 80818d0:	6083      	str	r3, [r0, #8]
 80818d2:	230b      	movs	r3, #11
 80818d4:	8183      	strh	r3, [r0, #12]
 80818d6:	2300      	movs	r3, #0
 80818d8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80818dc:	2200      	movs	r2, #0
 80818de:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80818e0:	611c      	str	r4, [r3, #16]
 80818e2:	615a      	str	r2, [r3, #20]
 80818e4:	bd38      	pop	{r3, r4, r5, pc}
 80818e6:	bf00      	nop
 80818e8:	20000004 	.word	0x20000004
 80818ec:	abcd330e 	.word	0xabcd330e
 80818f0:	e66d1234 	.word	0xe66d1234
 80818f4:	0005deec 	.word	0x0005deec

080818f8 <strcpy>:
 80818f8:	4603      	mov	r3, r0
 80818fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80818fe:	f803 2b01 	strb.w	r2, [r3], #1
 8081902:	2a00      	cmp	r2, #0
 8081904:	d1f9      	bne.n	80818fa <strcpy+0x2>
 8081906:	4770      	bx	lr

08081908 <strdup>:
 8081908:	4b02      	ldr	r3, [pc, #8]	; (8081914 <strdup+0xc>)
 808190a:	4601      	mov	r1, r0
 808190c:	6818      	ldr	r0, [r3, #0]
 808190e:	f000 b803 	b.w	8081918 <_strdup_r>
 8081912:	bf00      	nop
 8081914:	20000004 	.word	0x20000004

08081918 <_strdup_r>:
 8081918:	b570      	push	{r4, r5, r6, lr}
 808191a:	4604      	mov	r4, r0
 808191c:	4608      	mov	r0, r1
 808191e:	460d      	mov	r5, r1
 8081920:	f000 f80d 	bl	808193e <strlen>
 8081924:	1c46      	adds	r6, r0, #1
 8081926:	4631      	mov	r1, r6
 8081928:	4620      	mov	r0, r4
 808192a:	f7fe fed5 	bl	80806d8 <_malloc_r>
 808192e:	4604      	mov	r4, r0
 8081930:	b118      	cbz	r0, 808193a <_strdup_r+0x22>
 8081932:	4632      	mov	r2, r6
 8081934:	4629      	mov	r1, r5
 8081936:	f7ff ffa5 	bl	8081884 <memcpy>
 808193a:	4620      	mov	r0, r4
 808193c:	bd70      	pop	{r4, r5, r6, pc}

0808193e <strlen>:
 808193e:	4603      	mov	r3, r0
 8081940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8081944:	2a00      	cmp	r2, #0
 8081946:	d1fb      	bne.n	8081940 <strlen+0x2>
 8081948:	1a18      	subs	r0, r3, r0
 808194a:	3801      	subs	r0, #1
 808194c:	4770      	bx	lr

0808194e <link_code_end>:
	...

08081950 <dynalib_user>:
 8081950:	001d 0808 005d 0808 0085 0808 0089 0808     ....]...........
 8081960:	0000 0000 655a 6f72 7320 656c 7065 7420     ....Zero sleep t
 8081970:	6d69 2c65 6120 6a64 7375 6974 676e 7420     ime, adjusting t
 8081980:	206f 3031 7320 6365 6e6f 7364 7320 656c     o 10 seconds sle
 8081990:	7065 7420 6d69 2e65 4700 696f 676e 7420     ep time..Going t
 80819a0:	206f 6c73 6565 2070 6f66 2072 6425 6d20     o sleep for %d m
 80819b0:	6e69 7475 7365 2520 2064 6573 6f63 646e     inutes %d second
 80819c0:	2e73 4300 6e6f 656e 7463 6e69 2067 6f74     s..Connecting to
 80819d0:	6320 6c65 756c 616c 2072 2e2e 202e 4300      cellular ... .C
 80819e0:	756f 646c 276e 2074 6f63 6e6e 6365 2074     ouldn't connect 
 80819f0:	6f74 6320 6c65 756c 616c 2e72 4f00 2e4b     to cellular..OK.
 8081a00:	4300 6e6f 656e 7463 6e69 2067 6f74 6320     .Connecting to c
 8081a10:	6f6c 6475 2e20 2e2e 0020 6f43 6c75 6e64     loud ... .Couldn
 8081a20:	7427 6320 6e6f 656e 7463 7420 206f 6c43     't connect to Cl
 8081a30:	756f 2e64 6300 6c65 3a6c 0020 202c 6320     oud..cell: .,  c
 8081a40:	6f6c 6475 203a 6300 6e6f 656e 7463 6954     loud: .connectTi
 8081a50:	656d 7700 7269 6e69 0067 7953 7473 6d65     me.wiring.System
 8081a60:	7320 656c 7065 6320 6e6f 6966 7567 6172      sleep configura
 8081a70:	6974 6e6f 6920 2073 6e69 6176 696c 2e64     tion is invalid.
 8081a80:	6100 7070 2500 2d59 6d25 252d 5464 4825     .app.%Y-%m-%dT%H
 8081a90:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 8081aa0:	0000 0000                                   ....

08081aa4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8081aac:	0dd9 0808 0ddf 0808 0e1d 0808 0ded 0808     ................
 8081abc:	0ddb 0808                                   ....

08081ac0 <_ZTV9IPAddress>:
	...
 8081ac8:	1349 0808 1339 0808 133b 0808               I...9...;...

08081ad4 <_ZTV9USBSerial>:
	...
 8081adc:	13dd 0808 1443 0808 141b 0808 0aad 0808     ....C...........
 8081aec:	140d 0808 13df 0808 13ef 0808 143d 0808     ............=...
 8081afc:	13ff 0808 13d9 0808                         ........

08081b04 <_ZTVN5spark13CellularClassE>:
	...
 8081b0c:	1607 0808 15fd 0808 15f3 0808 1579 0808     ............y...
 8081b1c:	15e7 0808 00f7 0808 15db 0808 15d3 0808     ................
 8081b2c:	15c9 0808 15bf 0808 1583 0808               ............

08081b38 <_ZTV11USARTSerial>:
	...
 8081b40:	1641 0808 16a9 0808 1685 0808 0aad 0808     A...............
 8081b50:	1655 0808 1671 0808 1663 0808 167f 0808     U...q...c.......
 8081b60:	1643 0808 1647 0808                         C...G...

08081b68 <_ZTVN5spark12NetworkClassE>:
	...
 8081b70:	175d 0808 1767 0808 1771 0808 177b 0808     ]...g...q...{...
 8081b80:	1785 0808 1791 0808 179d 0808 17a9 0808     ................
 8081b90:	17b1 0808 17bb 0808 17c5 0808               ............

08081b9c <_ZSt7nothrow>:
	...

08081b9d <link_const_variable_data_end>:
 8081b9d:	00          	.byte	0x00
	...

08081ba0 <link_constructors_location>:
 8081ba0:	080803b1 	.word	0x080803b1
 8081ba4:	0808082d 	.word	0x0808082d
 8081ba8:	08080bed 	.word	0x08080bed
 8081bac:	08080bfd 	.word	0x08080bfd
 8081bb0:	08080c59 	.word	0x08080c59
 8081bb4:	08081611 	.word	0x08081611
 8081bb8:	0808180d 	.word	0x0808180d
 8081bbc:	08081821 	.word	0x08081821
