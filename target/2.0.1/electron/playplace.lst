
c:/Users/karaw/Documents/aquarealtime/resdev/software/playplace/target/2.0.1/electron/playplace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002d24  0808001c  0808001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08082d40  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  20000000  08082d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000538  20000078  20000078  00030078  2**2
                  ALLOC
  6 .module_info_suffix 00000028  08082dbc  08082dbc  00022dbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08082de4  08082de4  00022de4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000caa19  00000000  00000000  00022de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f71f  00000000  00000000  000ed801  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018f6b  00000000  00000000  000fcf20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001bb0  00000000  00000000  00115e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004ca0  00000000  00000000  00117a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00020e00  00000000  00000000  0011c6db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00022909  00000000  00000000  0013d4db  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b1a79  00000000  00000000  0015fde4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000048c4  00000000  00000000  00211860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <link_dynalib_end+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <link_dynalib_end+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f002 fb53 	bl	80826d8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <link_dynalib_end+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <link_dynalib_end+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f002 fb75 	bl	8082728 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <link_dynalib_end+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000000 	.word	0x20000000
 8080048:	08082d44 	.word	0x08082d44
 808004c:	20000078 	.word	0x20000078
 8080050:	20000078 	.word	0x20000078
 8080054:	200005b0 	.word	0x200005b0
 8080058:	200005b0 	.word	0x200005b0

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f001 fe6b 	bl	8081d38 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080062:	2500      	movs	r5, #0
 8080064:	4e05      	ldr	r6, [pc, #20]	; (808007c <module_user_init+0x20>)
 8080066:	4c06      	ldr	r4, [pc, #24]	; (8080080 <module_user_init+0x24>)
 8080068:	1ba4      	subs	r4, r4, r6
 808006a:	08a4      	lsrs	r4, r4, #2
 808006c:	42a5      	cmp	r5, r4
 808006e:	d100      	bne.n	8080072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080072:	f856 3b04 	ldr.w	r3, [r6], #4
 8080076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f7      	b.n	808006c <module_user_init+0x10>
 808007c:	08082d20 	.word	0x08082d20
 8080080:	08082d40 	.word	0x08082d40

08080084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080084:	f000 b867 	b.w	8080156 <setup>

08080088 <module_user_loop>:
}

void module_user_loop() {
 8080088:	b508      	push	{r3, lr}
    loop();
 808008a:	f000 f871 	bl	8080170 <loop>
    _post_loop();
}
 808008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 8080092:	f001 be13 	b.w	8081cbc <_post_loop>

08080096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 8080096:	f000 bbc3 	b.w	8080820 <malloc>

0808009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 808009a:	f000 bbc9 	b.w	8080830 <free>
	...

080800a0 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800a0:	2100      	movs	r1, #0
 80800a2:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80800a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800a6:	4a02      	ldr	r2, [pc, #8]	; (80800b0 <__cxa_pure_virtual+0x10>)
 80800a8:	f000 fae4 	bl	8080674 <panic_>
  while (1);
 80800ac:	e7fe      	b.n	80800ac <__cxa_pure_virtual+0xc>
 80800ae:	bf00      	nop
 80800b0:	080804e5 	.word	0x080804e5

080800b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800b4:	7800      	ldrb	r0, [r0, #0]
 80800b6:	fab0 f080 	clz	r0, r0
 80800ba:	0940      	lsrs	r0, r0, #5
 80800bc:	4770      	bx	lr

080800be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800be:	2301      	movs	r3, #1
 80800c0:	7003      	strb	r3, [r0, #0]
 80800c2:	4770      	bx	lr

080800c4 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80800c4:	4770      	bx	lr

080800c6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80800c6:	6a00      	ldr	r0, [r0, #32]
 80800c8:	6803      	ldr	r3, [r0, #0]
 80800ca:	68db      	ldr	r3, [r3, #12]
 80800cc:	4718      	bx	r3
	...

080800d0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80800d0:	b510      	push	{r4, lr}
 80800d2:	4604      	mov	r4, r0
 80800d4:	4b09      	ldr	r3, [pc, #36]	; (80800fc <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80800d6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80800d8:	f000 fee2 	bl	8080ea0 <_ZN5spark10LogManager8instanceEv>
 80800dc:	4621      	mov	r1, r4
 80800de:	f001 f911 	bl	8081304 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80800e2:	f001 ff2b 	bl	8081f3c <_Z16_fetch_usbserialv>
 80800e6:	f001 ff0f 	bl	8081f08 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 80800ea:	4620      	mov	r0, r4
 80800ec:	4b04      	ldr	r3, [pc, #16]	; (8080100 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80800ee:	f840 3b04 	str.w	r3, [r0], #4
 80800f2:	f000 fff5 	bl	80810e0 <_ZN5spark6detail9LogFilterD1Ev>
    }
 80800f6:	4620      	mov	r0, r4
 80800f8:	bd10      	pop	{r4, pc}
 80800fa:	bf00      	nop
 80800fc:	080829ec 	.word	0x080829ec
 8080100:	080829d4 	.word	0x080829d4

08080104 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 8080104:	b510      	push	{r4, lr}
 8080106:	4604      	mov	r4, r0
    }
 8080108:	f7ff ffe2 	bl	80800d0 <_ZN5spark16SerialLogHandlerD1Ev>
 808010c:	4620      	mov	r0, r4
 808010e:	2124      	movs	r1, #36	; 0x24
 8080110:	f002 facf 	bl	80826b2 <_ZdlPvj>
 8080114:	4620      	mov	r0, r4
 8080116:	bd10      	pop	{r4, pc}

08080118 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080118:	b510      	push	{r4, lr}
 808011a:	4604      	mov	r4, r0
        if (wakeupSource_) {
 808011c:	6800      	ldr	r0, [r0, #0]
 808011e:	b108      	cbz	r0, 8080124 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8080120:	f000 fb86 	bl	8080830 <free>
class SystemClass {
 8080124:	4620      	mov	r0, r4
 8080126:	bd10      	pop	{r4, pc}

08080128 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080128:	b40e      	push	{r1, r2, r3}
 808012a:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 808012c:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 808012e:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 8080130:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 8080132:	b08d      	sub	sp, #52	; 0x34
 8080134:	aa0f      	add	r2, sp, #60	; 0x3c
 8080136:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 808013a:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 808013e:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 8080142:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080144:	201e      	movs	r0, #30
 8080146:	aa04      	add	r2, sp, #16
 8080148:	f000 faa4 	bl	8080694 <log_message_v>
}
 808014c:	b00d      	add	sp, #52	; 0x34
 808014e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8080152:	b003      	add	sp, #12
 8080154:	4770      	bx	lr

08080156 <setup>:
uint sleepMillis = sleepMe*60*1000; 
int failures = 0;

// setup() runs once, when the device is first turned on.
void setup()
{
 8080156:	b508      	push	{r3, lr}
  Serial.begin(9600);
 8080158:	f001 fef0 	bl	8081f3c <_Z16_fetch_usbserialv>
 808015c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080160:	f001 fece 	bl	8081f00 <_ZN9USBSerial5beginEl>
  delay(2000);
}
 8080164:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(2000);
 8080168:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808016c:	f001 bd44 	b.w	8081bf8 <delay>

08080170 <loop>:
// loop() runs over and over again, as quickly as it can execute.
void loop()
{
 8080170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  delay(2000);
 8080174:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
 8080178:	b08b      	sub	sp, #44	; 0x2c
  delay(2000);
 808017a:	f001 fd3d 	bl	8081bf8 <delay>
  Log.info("\n\n==== LOOP ====");
 808017e:	4954      	ldr	r1, [pc, #336]	; (80802d0 <loop+0x160>)
 8080180:	4854      	ldr	r0, [pc, #336]	; (80802d4 <loop+0x164>)
 8080182:	f7ff ffd1 	bl	8080128 <_ZNK5spark6Logger4infoEPKcz>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080186:	2200      	movs	r2, #0
 8080188:	4d53      	ldr	r5, [pc, #332]	; (80802d8 <loop+0x168>)
 808018a:	4611      	mov	r1, r2
 808018c:	6868      	ldr	r0, [r5, #4]
 808018e:	f000 fae7 	bl	8080760 <network_ready>
 8080192:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080194:	f000 fb2c 	bl	80807f0 <spark_cloud_flag_connected>
  Log.info("Cellular = %d.  Cloud = %d.", (int)Cellular.ready(), (int)Particle.connected());
 8080198:	4622      	mov	r2, r4
 808019a:	4603      	mov	r3, r0
 808019c:	494f      	ldr	r1, [pc, #316]	; (80802dc <loop+0x16c>)
 808019e:	484d      	ldr	r0, [pc, #308]	; (80802d4 <loop+0x164>)
 80801a0:	f7ff ffc2 	bl	8080128 <_ZNK5spark6Logger4infoEPKcz>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80801a4:	f000 f9a6 	bl	80804f4 <HAL_Timer_Get_Milli_Seconds>
 80801a8:	4604      	mov	r4, r0
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80801aa:	f000 fb19 	bl	80807e0 <spark_cloud_flag_connect>
  unsigned long startTime = millis();
  Particle.connect();
  
  if (waitFor(Particle.connected, connectMillis))
 80801ae:	4b4c      	ldr	r3, [pc, #304]	; (80802e0 <loop+0x170>)
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80801b0:	2000      	movs	r0, #0
 80801b2:	681e      	ldr	r6, [r3, #0]
 80801b4:	f000 f9a6 	bl	8080504 <hal_timer_millis>
 80801b8:	f04f 0b00 	mov.w	fp, #0
 80801bc:	4682      	mov	sl, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80801be:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
 80801c0:	2000      	movs	r0, #0
 80801c2:	f000 f99f 	bl	8080504 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80801c6:	ebb0 080a 	subs.w	r8, r0, sl
 80801ca:	eb61 090b 	sbc.w	r9, r1, fp
        while (_while() && !_condition()) {
 80801ce:	45b9      	cmp	r9, r7
 80801d0:	bf08      	it	eq
 80801d2:	45b0      	cmpeq	r8, r6
 80801d4:	d205      	bcs.n	80801e2 <loop+0x72>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80801d6:	f000 fb0b 	bl	80807f0 <spark_cloud_flag_connected>
 80801da:	b910      	cbnz	r0, 80801e2 <loop+0x72>
            spark_process();
 80801dc:	f000 faf8 	bl	80807d0 <spark_process>
        while (_while() && !_condition()) {
 80801e0:	e7ee      	b.n	80801c0 <loop+0x50>
 80801e2:	f000 fb05 	bl	80807f0 <spark_cloud_flag_connected>
 80801e6:	4e3f      	ldr	r6, [pc, #252]	; (80802e4 <loop+0x174>)
 80801e8:	2800      	cmp	r0, #0
 80801ea:	d063      	beq.n	80802b4 <loop+0x144>
 80801ec:	f000 fb00 	bl	80807f0 <spark_cloud_flag_connected>
  {
    if (Particle.connected())
 80801f0:	b170      	cbz	r0, 8080210 <loop+0xa0>
 80801f2:	f000 f97f 	bl	80804f4 <HAL_Timer_Get_Milli_Seconds>
    {
      Log.info("time to connect: %lu", millis() - startTime);
 80801f6:	493c      	ldr	r1, [pc, #240]	; (80802e8 <loop+0x178>)
 80801f8:	1b02      	subs	r2, r0, r4
 80801fa:	4836      	ldr	r0, [pc, #216]	; (80802d4 <loop+0x164>)
 80801fc:	f7ff ff94 	bl	8080128 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("Chill for 20");
 8080200:	4834      	ldr	r0, [pc, #208]	; (80802d4 <loop+0x164>)
 8080202:	493a      	ldr	r1, [pc, #232]	; (80802ec <loop+0x17c>)
 8080204:	f7ff ff90 	bl	8080128 <_ZNK5spark6Logger4infoEPKcz>
      delay(20000);
 8080208:	f644 6020 	movw	r0, #20000	; 0x4e20
 808020c:	f001 fcf4 	bl	8081bf8 <delay>
 8080210:	f000 f970 	bl	80804f4 <HAL_Timer_Get_Milli_Seconds>
  else
  {
    Log.info("FAILED");
    failures++;
  }
  Log.info("total time: %lu, failures: %d", millis() - startTime, failures);
 8080214:	1b02      	subs	r2, r0, r4
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
 8080216:	2400      	movs	r4, #0
 8080218:	6833      	ldr	r3, [r6, #0]
 808021a:	4935      	ldr	r1, [pc, #212]	; (80802f0 <loop+0x180>)
 808021c:	482d      	ldr	r0, [pc, #180]	; (80802d4 <loop+0x164>)
 808021e:	f7ff ff83 	bl	8080128 <_ZNK5spark6Logger4infoEPKcz>
  Particle.disconnect();
 8080222:	a804      	add	r0, sp, #16
 8080224:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8080228:	f88d 4018 	strb.w	r4, [sp, #24]
 808022c:	f001 fdb6 	bl	8081d9c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8080230:	6868      	ldr	r0, [r5, #4]
 8080232:	4622      	mov	r2, r4
 8080234:	2102      	movs	r1, #2
 8080236:	f000 fa8b 	bl	8080750 <network_disconnect>
        network_off(*this, 0, 0, NULL);
 808023a:	4623      	mov	r3, r4
 808023c:	4622      	mov	r2, r4
 808023e:	6868      	ldr	r0, [r5, #4]
 8080240:	4621      	mov	r1, r4
 8080242:	f000 fa9d 	bl	8080780 <network_off>
  Cellular.disconnect();
  Cellular.off();

  Log.info("go to sleep");
 8080246:	492b      	ldr	r1, [pc, #172]	; (80802f4 <loop+0x184>)
 8080248:	4822      	ldr	r0, [pc, #136]	; (80802d4 <loop+0x164>)
 808024a:	f7ff ff6d 	bl	8080128 <_ZNK5spark6Logger4infoEPKcz>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
 808024e:	ab05      	add	r3, sp, #20
 8080250:	9304      	str	r3, [sp, #16]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 8080252:	2301      	movs	r3, #1
 8080254:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 8080258:	2303      	movs	r3, #3
        config_.size = sizeof(hal_sleep_config_t);
 808025a:	4e27      	ldr	r6, [pc, #156]	; (80802f8 <loop+0x188>)
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 808025c:	f88d 3018 	strb.w	r3, [sp, #24]
  SystemSleepConfiguration config;
    config.mode(SystemSleepMode::HIBERNATE)
        .duration(sleepMillis); 
 8080260:	4b26      	ldr	r3, [pc, #152]	; (80802fc <loop+0x18c>)
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
 8080262:	2010      	movs	r0, #16
 8080264:	4926      	ldr	r1, [pc, #152]	; (8080300 <loop+0x190>)
        config_.wakeup_sources = nullptr;
 8080266:	e9cd 4407 	strd	r4, r4, [sp, #28]
 808026a:	681f      	ldr	r7, [r3, #0]
              valid_(true) {
 808026c:	f8ad 4019 	strh.w	r4, [sp, #25]
 8080270:	f88d 401b 	strb.w	r4, [sp, #27]
        config_.size = sizeof(hal_sleep_config_t);
 8080274:	9605      	str	r6, [sp, #20]
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
 8080276:	f002 fa1e 	bl	80826b6 <_ZnwjRKSt9nothrow_t>
 808027a:	4605      	mov	r5, r0
 808027c:	b310      	cbz	r0, 80802c4 <loop+0x154>
 808027e:	2210      	movs	r2, #16
 8080280:	4621      	mov	r1, r4
 8080282:	f002 fa51 	bl	8082728 <memset>
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
 8080286:	2304      	movs	r3, #4
 8080288:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 808028a:	9b08      	ldr	r3, [sp, #32]
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
 808028c:	602e      	str	r6, [r5, #0]
            wakeupSource->ms = ms;
 808028e:	e9c5 3702 	strd	r3, r7, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 8080292:	9508      	str	r5, [sp, #32]
    System.sleep(config);
 8080294:	a801      	add	r0, sp, #4
 8080296:	a904      	add	r1, sp, #16
 8080298:	f000 fb20 	bl	80808dc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
 808029c:	9801      	ldr	r0, [sp, #4]
 808029e:	b108      	cbz	r0, 80802a4 <loop+0x134>
            free(wakeupSource_);
 80802a0:	f000 fac6 	bl	8080830 <free>
        auto wakeupSource = config_.wakeup_sources;
 80802a4:	9808      	ldr	r0, [sp, #32]
        while (wakeupSource) {
 80802a6:	b180      	cbz	r0, 80802ca <loop+0x15a>
            auto next = wakeupSource->next;
 80802a8:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
 80802aa:	210c      	movs	r1, #12
 80802ac:	f002 fa01 	bl	80826b2 <_ZdlPvj>
            wakeupSource = next;
 80802b0:	4620      	mov	r0, r4
        while (wakeupSource) {
 80802b2:	e7f8      	b.n	80802a6 <loop+0x136>
    Log.info("FAILED");
 80802b4:	4913      	ldr	r1, [pc, #76]	; (8080304 <loop+0x194>)
 80802b6:	4807      	ldr	r0, [pc, #28]	; (80802d4 <loop+0x164>)
 80802b8:	f7ff ff36 	bl	8080128 <_ZNK5spark6Logger4infoEPKcz>
    failures++;
 80802bc:	6833      	ldr	r3, [r6, #0]
 80802be:	3301      	adds	r3, #1
 80802c0:	6033      	str	r3, [r6, #0]
 80802c2:	e7a5      	b.n	8080210 <loop+0xa0>
                valid_ = false;
 80802c4:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
                return *this;
 80802c8:	e7e4      	b.n	8080294 <loop+0x124>
}
 80802ca:	b00b      	add	sp, #44	; 0x2c
 80802cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80802d0:	0808294c 	.word	0x0808294c
 80802d4:	200000d0 	.word	0x200000d0
 80802d8:	2000044c 	.word	0x2000044c
 80802dc:	0808295d 	.word	0x0808295d
 80802e0:	20000000 	.word	0x20000000
 80802e4:	20000088 	.word	0x20000088
 80802e8:	08082979 	.word	0x08082979
 80802ec:	0808298e 	.word	0x0808298e
 80802f0:	080829a2 	.word	0x080829a2
 80802f4:	080829c0 	.word	0x080829c0
 80802f8:	00030010 	.word	0x00030010
 80802fc:	200000b0 	.word	0x200000b0
 8080300:	08082c1d 	.word	0x08082c1d
 8080304:	0808299b 	.word	0x0808299b

08080308 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 8080308:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 808030a:	2614      	movs	r6, #20
 808030c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 8080310:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 8080312:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8080316:	42ae      	cmp	r6, r5
 8080318:	d004      	beq.n	8080324 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 808031a:	4628      	mov	r0, r5
 808031c:	f000 fb60 	bl	80809e0 <_ZN6StringD1Ev>
 8080320:	3514      	adds	r5, #20
 8080322:	e7f8      	b.n	8080316 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 8080324:	6820      	ldr	r0, [r4, #0]
 8080326:	f000 fa83 	bl	8080830 <free>
    AllocatorT::free(data_);
}
 808032a:	4620      	mov	r0, r4
 808032c:	bd70      	pop	{r4, r5, r6, pc}

0808032e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 808032e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 8080330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080332:	4604      	mov	r4, r0
 8080334:	460d      	mov	r5, r1
 8080336:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 8080338:	d916      	bls.n	8080368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 808033a:	4290      	cmp	r0, r2
 808033c:	d215      	bcs.n	808036a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 808033e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 8080342:	1a75      	subs	r5, r6, r1
 8080344:	f1a1 0714 	sub.w	r7, r1, #20
 8080348:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 808034a:	42b7      	cmp	r7, r6
 808034c:	d01c      	beq.n	8080388 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 808034e:	b12c      	cbz	r4, 808035c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 8080350:	4631      	mov	r1, r6
 8080352:	4620      	mov	r0, r4
 8080354:	f000 fbab 	bl	8080aae <_ZN6StringC1EOS_>
 8080358:	7c33      	ldrb	r3, [r6, #16]
 808035a:	7423      	strb	r3, [r4, #16]
 808035c:	4630      	mov	r0, r6
 808035e:	f000 fb3f 	bl	80809e0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 8080362:	3e14      	subs	r6, #20
 8080364:	3c14      	subs	r4, #20
 8080366:	e7f0      	b.n	808034a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 8080368:	d00e      	beq.n	8080388 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 808036a:	42b5      	cmp	r5, r6
 808036c:	d00c      	beq.n	8080388 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 808036e:	b12c      	cbz	r4, 808037c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 8080370:	4629      	mov	r1, r5
 8080372:	4620      	mov	r0, r4
 8080374:	f000 fb9b 	bl	8080aae <_ZN6StringC1EOS_>
 8080378:	7c2b      	ldrb	r3, [r5, #16]
 808037a:	7423      	strb	r3, [r4, #16]
 808037c:	4628      	mov	r0, r5
 808037e:	f000 fb2f 	bl	80809e0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 8080382:	3514      	adds	r5, #20
 8080384:	3414      	adds	r4, #20
 8080386:	e7f0      	b.n	808036a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 8080388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808038a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 808038a:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 808038c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 8080390:	e9c0 3300 	strd	r3, r3, [r0]
 8080394:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 8080396:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 8080398:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 808039a:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 808039c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 808039e:	dd24      	ble.n	80803ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 80803a0:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 80803a4:	fb08 f007 	mul.w	r0, r8, r7
 80803a8:	f000 fa3a 	bl	8080820 <malloc>
            if (!d) {
 80803ac:	4605      	mov	r5, r0
 80803ae:	b1e0      	cbz	r0, 80803ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 80803b0:	e9d4 1200 	ldrd	r1, r2, [r4]
 80803b4:	fb08 1202 	mla	r2, r8, r2, r1
 80803b8:	f7ff ffb9 	bl	808032e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80803bc:	6820      	ldr	r0, [r4, #0]
 80803be:	f000 fa37 	bl	8080830 <free>
        data_ = d;
 80803c2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80803c4:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80803c6:	e9d6 7300 	ldrd	r7, r3, [r6]
 80803ca:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 80803ce:	45b8      	cmp	r8, r7
 80803d0:	d009      	beq.n	80803e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 80803d2:	4639      	mov	r1, r7
 80803d4:	4628      	mov	r0, r5
 80803d6:	f000 fb84 	bl	8080ae2 <_ZN6StringC1ERKS_>
 80803da:	7c3b      	ldrb	r3, [r7, #16]
 80803dc:	3514      	adds	r5, #20
 80803de:	f805 3c04 	strb.w	r3, [r5, #-4]
 80803e2:	3714      	adds	r7, #20
 80803e4:	e7f3      	b.n	80803ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 80803e6:	6873      	ldr	r3, [r6, #4]
 80803e8:	6063      	str	r3, [r4, #4]
}
 80803ea:	4620      	mov	r0, r4
 80803ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080803f0 <_GLOBAL__sub_I_SystemMode>:
 80803f0:	b5f0      	push	{r4, r5, r6, r7, lr}
              error_(SYSTEM_ERROR_NONE) {
 80803f2:	2400      	movs	r4, #0
    SleepResult() {}
 80803f4:	4b2c      	ldr	r3, [pc, #176]	; (80804a8 <_GLOBAL__sub_I_SystemMode+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
 80803f6:	4d2d      	ldr	r5, [pc, #180]	; (80804ac <_GLOBAL__sub_I_SystemMode+0xbc>)
SYSTEM_MODE(SEMI_AUTOMATIC);
 80803f8:	4f2d      	ldr	r7, [pc, #180]	; (80804b0 <_GLOBAL__sub_I_SystemMode+0xc0>)
}
 80803fa:	b08d      	sub	sp, #52	; 0x34
    SleepResult() {}
 80803fc:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
 80803fe:	602c      	str	r4, [r5, #0]
 8080400:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
 8080402:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
 8080404:	2002      	movs	r0, #2
 8080406:	f000 f95d 	bl	80806c4 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
 808040a:	463a      	mov	r2, r7
 808040c:	4628      	mov	r0, r5
 808040e:	4929      	ldr	r1, [pc, #164]	; (80804b4 <_GLOBAL__sub_I_SystemMode+0xc4>)
 8080410:	f002 f94a 	bl	80826a8 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
 8080414:	4621      	mov	r1, r4
 8080416:	2001      	movs	r0, #1
 8080418:	f000 f964 	bl	80806e4 <system_thread_set_state>
        capacity_(0) {
 808041c:	e9cd 4400 	strd	r4, r4, [sp]
 8080420:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 8080422:	f001 fd8b 	bl	8081f3c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 8080426:	4c24      	ldr	r4, [pc, #144]	; (80804b8 <_GLOBAL__sub_I_SystemMode+0xc8>)
 8080428:	4605      	mov	r5, r0
 808042a:	4626      	mov	r6, r4
 808042c:	4669      	mov	r1, sp
 808042e:	a803      	add	r0, sp, #12
 8080430:	f7ff ffab 	bl	808038a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 8080434:	a903      	add	r1, sp, #12
 8080436:	a806      	add	r0, sp, #24
 8080438:	f7ff ffa7 	bl	808038a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 808043c:	4b1f      	ldr	r3, [pc, #124]	; (80804bc <_GLOBAL__sub_I_SystemMode+0xcc>)
 808043e:	a906      	add	r1, sp, #24
 8080440:	f846 3b04 	str.w	r3, [r6], #4
 8080444:	a809      	add	r0, sp, #36	; 0x24
 8080446:	f7ff ffa0 	bl	808038a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 808044a:	aa09      	add	r2, sp, #36	; 0x24
 808044c:	211e      	movs	r1, #30
 808044e:	4630      	mov	r0, r6
 8080450:	f001 f8aa 	bl	80815a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8080454:	a809      	add	r0, sp, #36	; 0x24
 8080456:	f7ff ff57 	bl	8080308 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 808045a:	a806      	add	r0, sp, #24
 808045c:	f7ff ff54 	bl	8080308 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8080460:	4b17      	ldr	r3, [pc, #92]	; (80804c0 <_GLOBAL__sub_I_SystemMode+0xd0>)
 8080462:	6225      	str	r5, [r4, #32]
 8080464:	6023      	str	r3, [r4, #0]
 8080466:	a803      	add	r0, sp, #12
 8080468:	f7ff ff4e 	bl	8080308 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 808046c:	4b15      	ldr	r3, [pc, #84]	; (80804c4 <_GLOBAL__sub_I_SystemMode+0xd4>)
 808046e:	6023      	str	r3, [r4, #0]
        Serial.begin();
 8080470:	f001 fd64 	bl	8081f3c <_Z16_fetch_usbserialv>
 8080474:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080478:	f001 fd42 	bl	8081f00 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 808047c:	f000 fd10 	bl	8080ea0 <_ZN5spark10LogManager8instanceEv>
 8080480:	4621      	mov	r1, r4
 8080482:	f001 f824 	bl	80814ce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 8080486:	4668      	mov	r0, sp
 8080488:	f7ff ff3e 	bl	8080308 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 808048c:	463a      	mov	r2, r7
 808048e:	4620      	mov	r0, r4
 8080490:	490d      	ldr	r1, [pc, #52]	; (80804c8 <_GLOBAL__sub_I_SystemMode+0xd8>)
 8080492:	f002 f909 	bl	80826a8 <__aeabi_atexit>
uint sleepMillis = sleepMe*60*1000; 
 8080496:	4b0d      	ldr	r3, [pc, #52]	; (80804cc <_GLOBAL__sub_I_SystemMode+0xdc>)
 8080498:	681a      	ldr	r2, [r3, #0]
 808049a:	f64e 2360 	movw	r3, #60000	; 0xea60
 808049e:	4353      	muls	r3, r2
 80804a0:	4a0b      	ldr	r2, [pc, #44]	; (80804d0 <_GLOBAL__sub_I_SystemMode+0xe0>)
 80804a2:	6013      	str	r3, [r2, #0]
}
 80804a4:	b00d      	add	sp, #52	; 0x34
 80804a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80804a8:	ffff0000 	.word	0xffff0000
 80804ac:	2000007c 	.word	0x2000007c
 80804b0:	20000078 	.word	0x20000078
 80804b4:	08080119 	.word	0x08080119
 80804b8:	2000008c 	.word	0x2000008c
 80804bc:	080829d4 	.word	0x080829d4
 80804c0:	08082ac4 	.word	0x08082ac4
 80804c4:	080829ec 	.word	0x080829ec
 80804c8:	080800d1 	.word	0x080800d1
 80804cc:	20000004 	.word	0x20000004
 80804d0:	200000b0 	.word	0x200000b0

080804d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80804d4:	b508      	push	{r3, lr}
 80804d6:	4b02      	ldr	r3, [pc, #8]	; (80804e0 <HAL_RNG_GetRandomNumber+0xc>)
 80804d8:	681b      	ldr	r3, [r3, #0]
 80804da:	685b      	ldr	r3, [r3, #4]
 80804dc:	9301      	str	r3, [sp, #4]
 80804de:	bd08      	pop	{r3, pc}
 80804e0:	0804019c 	.word	0x0804019c

080804e4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80804e4:	b508      	push	{r3, lr}
 80804e6:	4b02      	ldr	r3, [pc, #8]	; (80804f0 <HAL_Delay_Microseconds+0xc>)
 80804e8:	681b      	ldr	r3, [r3, #0]
 80804ea:	68db      	ldr	r3, [r3, #12]
 80804ec:	9301      	str	r3, [sp, #4]
 80804ee:	bd08      	pop	{r3, pc}
 80804f0:	0804019c 	.word	0x0804019c

080804f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80804f4:	b508      	push	{r3, lr}
 80804f6:	4b02      	ldr	r3, [pc, #8]	; (8080500 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80804f8:	681b      	ldr	r3, [r3, #0]
 80804fa:	695b      	ldr	r3, [r3, #20]
 80804fc:	9301      	str	r3, [sp, #4]
 80804fe:	bd08      	pop	{r3, pc}
 8080500:	0804019c 	.word	0x0804019c

08080504 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8080504:	b508      	push	{r3, lr}
 8080506:	4b02      	ldr	r3, [pc, #8]	; (8080510 <hal_timer_millis+0xc>)
 8080508:	681b      	ldr	r3, [r3, #0]
 808050a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808050c:	9301      	str	r3, [sp, #4]
 808050e:	bd08      	pop	{r3, pc}
 8080510:	0804019c 	.word	0x0804019c

08080514 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8080514:	b508      	push	{r3, lr}
 8080516:	4b02      	ldr	r3, [pc, #8]	; (8080520 <os_mutex_recursive_create+0xc>)
 8080518:	681b      	ldr	r3, [r3, #0]
 808051a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808051c:	9301      	str	r3, [sp, #4]
 808051e:	bd08      	pop	{r3, pc}
 8080520:	080401d0 	.word	0x080401d0

08080524 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8080524:	b508      	push	{r3, lr}
 8080526:	4b02      	ldr	r3, [pc, #8]	; (8080530 <os_mutex_recursive_destroy+0xc>)
 8080528:	681b      	ldr	r3, [r3, #0]
 808052a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808052c:	9301      	str	r3, [sp, #4]
 808052e:	bd08      	pop	{r3, pc}
 8080530:	080401d0 	.word	0x080401d0

08080534 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8080534:	b508      	push	{r3, lr}
 8080536:	4b02      	ldr	r3, [pc, #8]	; (8080540 <os_mutex_recursive_lock+0xc>)
 8080538:	681b      	ldr	r3, [r3, #0]
 808053a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808053c:	9301      	str	r3, [sp, #4]
 808053e:	bd08      	pop	{r3, pc}
 8080540:	080401d0 	.word	0x080401d0

08080544 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8080544:	b508      	push	{r3, lr}
 8080546:	4b02      	ldr	r3, [pc, #8]	; (8080550 <os_mutex_recursive_unlock+0xc>)
 8080548:	681b      	ldr	r3, [r3, #0]
 808054a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808054c:	9301      	str	r3, [sp, #4]
 808054e:	bd08      	pop	{r3, pc}
 8080550:	080401d0 	.word	0x080401d0

08080554 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8080554:	b508      	push	{r3, lr}
 8080556:	4b02      	ldr	r3, [pc, #8]	; (8080560 <hal_usart_init+0xc>)
 8080558:	681b      	ldr	r3, [r3, #0]
 808055a:	699b      	ldr	r3, [r3, #24]
 808055c:	9301      	str	r3, [sp, #4]
 808055e:	bd08      	pop	{r3, pc}
 8080560:	080401c4 	.word	0x080401c4

08080564 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 8080564:	b508      	push	{r3, lr}
 8080566:	4b02      	ldr	r3, [pc, #8]	; (8080570 <hal_usart_end+0xc>)
 8080568:	681b      	ldr	r3, [r3, #0]
 808056a:	6a1b      	ldr	r3, [r3, #32]
 808056c:	9301      	str	r3, [sp, #4]
 808056e:	bd08      	pop	{r3, pc}
 8080570:	080401c4 	.word	0x080401c4

08080574 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8080574:	b508      	push	{r3, lr}
 8080576:	4b02      	ldr	r3, [pc, #8]	; (8080580 <hal_usart_write+0xc>)
 8080578:	681b      	ldr	r3, [r3, #0]
 808057a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808057c:	9301      	str	r3, [sp, #4]
 808057e:	bd08      	pop	{r3, pc}
 8080580:	080401c4 	.word	0x080401c4

08080584 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8080584:	b508      	push	{r3, lr}
 8080586:	4b02      	ldr	r3, [pc, #8]	; (8080590 <hal_usart_available+0xc>)
 8080588:	681b      	ldr	r3, [r3, #0]
 808058a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808058c:	9301      	str	r3, [sp, #4]
 808058e:	bd08      	pop	{r3, pc}
 8080590:	080401c4 	.word	0x080401c4

08080594 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8080594:	b508      	push	{r3, lr}
 8080596:	4b02      	ldr	r3, [pc, #8]	; (80805a0 <hal_usart_read+0xc>)
 8080598:	681b      	ldr	r3, [r3, #0]
 808059a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808059c:	9301      	str	r3, [sp, #4]
 808059e:	bd08      	pop	{r3, pc}
 80805a0:	080401c4 	.word	0x080401c4

080805a4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80805a4:	b508      	push	{r3, lr}
 80805a6:	4b02      	ldr	r3, [pc, #8]	; (80805b0 <hal_usart_peek+0xc>)
 80805a8:	681b      	ldr	r3, [r3, #0]
 80805aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80805ac:	9301      	str	r3, [sp, #4]
 80805ae:	bd08      	pop	{r3, pc}
 80805b0:	080401c4 	.word	0x080401c4

080805b4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80805b4:	b508      	push	{r3, lr}
 80805b6:	4b02      	ldr	r3, [pc, #8]	; (80805c0 <hal_usart_flush+0xc>)
 80805b8:	681b      	ldr	r3, [r3, #0]
 80805ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80805bc:	9301      	str	r3, [sp, #4]
 80805be:	bd08      	pop	{r3, pc}
 80805c0:	080401c4 	.word	0x080401c4

080805c4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80805c4:	b508      	push	{r3, lr}
 80805c6:	4b02      	ldr	r3, [pc, #8]	; (80805d0 <hal_usart_available_data_for_write+0xc>)
 80805c8:	681b      	ldr	r3, [r3, #0]
 80805ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80805cc:	9301      	str	r3, [sp, #4]
 80805ce:	bd08      	pop	{r3, pc}
 80805d0:	080401c4 	.word	0x080401c4

080805d4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80805d4:	b508      	push	{r3, lr}
 80805d6:	4b02      	ldr	r3, [pc, #8]	; (80805e0 <hal_usart_begin_config+0xc>)
 80805d8:	681b      	ldr	r3, [r3, #0]
 80805da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80805dc:	9301      	str	r3, [sp, #4]
 80805de:	bd08      	pop	{r3, pc}
 80805e0:	080401c4 	.word	0x080401c4

080805e4 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80805e4:	b508      	push	{r3, lr}
 80805e6:	4b02      	ldr	r3, [pc, #8]	; (80805f0 <inet_gethostbyname+0xc>)
 80805e8:	681b      	ldr	r3, [r3, #0]
 80805ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80805ec:	9301      	str	r3, [sp, #4]
 80805ee:	bd08      	pop	{r3, pc}
 80805f0:	08060020 	.word	0x08060020

080805f4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80805f4:	b508      	push	{r3, lr}
 80805f6:	4b02      	ldr	r3, [pc, #8]	; (8080600 <HAL_USB_USART_Init+0xc>)
 80805f8:	681b      	ldr	r3, [r3, #0]
 80805fa:	681b      	ldr	r3, [r3, #0]
 80805fc:	9301      	str	r3, [sp, #4]
 80805fe:	bd08      	pop	{r3, pc}
 8080600:	0806001c 	.word	0x0806001c

08080604 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8080604:	b508      	push	{r3, lr}
 8080606:	4b02      	ldr	r3, [pc, #8]	; (8080610 <HAL_USB_USART_Begin+0xc>)
 8080608:	681b      	ldr	r3, [r3, #0]
 808060a:	685b      	ldr	r3, [r3, #4]
 808060c:	9301      	str	r3, [sp, #4]
 808060e:	bd08      	pop	{r3, pc}
 8080610:	0806001c 	.word	0x0806001c

08080614 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 8080614:	b508      	push	{r3, lr}
 8080616:	4b02      	ldr	r3, [pc, #8]	; (8080620 <HAL_USB_USART_End+0xc>)
 8080618:	681b      	ldr	r3, [r3, #0]
 808061a:	689b      	ldr	r3, [r3, #8]
 808061c:	9301      	str	r3, [sp, #4]
 808061e:	bd08      	pop	{r3, pc}
 8080620:	0806001c 	.word	0x0806001c

08080624 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080624:	b508      	push	{r3, lr}
 8080626:	4b02      	ldr	r3, [pc, #8]	; (8080630 <HAL_USB_USART_Available_Data+0xc>)
 8080628:	681b      	ldr	r3, [r3, #0]
 808062a:	691b      	ldr	r3, [r3, #16]
 808062c:	9301      	str	r3, [sp, #4]
 808062e:	bd08      	pop	{r3, pc}
 8080630:	0806001c 	.word	0x0806001c

08080634 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080634:	b508      	push	{r3, lr}
 8080636:	4b02      	ldr	r3, [pc, #8]	; (8080640 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8080638:	681b      	ldr	r3, [r3, #0]
 808063a:	695b      	ldr	r3, [r3, #20]
 808063c:	9301      	str	r3, [sp, #4]
 808063e:	bd08      	pop	{r3, pc}
 8080640:	0806001c 	.word	0x0806001c

08080644 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080644:	b508      	push	{r3, lr}
 8080646:	4b02      	ldr	r3, [pc, #8]	; (8080650 <HAL_USB_USART_Receive_Data+0xc>)
 8080648:	681b      	ldr	r3, [r3, #0]
 808064a:	699b      	ldr	r3, [r3, #24]
 808064c:	9301      	str	r3, [sp, #4]
 808064e:	bd08      	pop	{r3, pc}
 8080650:	0806001c 	.word	0x0806001c

08080654 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080654:	b508      	push	{r3, lr}
 8080656:	4b02      	ldr	r3, [pc, #8]	; (8080660 <HAL_USB_USART_Send_Data+0xc>)
 8080658:	681b      	ldr	r3, [r3, #0]
 808065a:	69db      	ldr	r3, [r3, #28]
 808065c:	9301      	str	r3, [sp, #4]
 808065e:	bd08      	pop	{r3, pc}
 8080660:	0806001c 	.word	0x0806001c

08080664 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080664:	b508      	push	{r3, lr}
 8080666:	4b02      	ldr	r3, [pc, #8]	; (8080670 <HAL_USB_USART_Flush_Data+0xc>)
 8080668:	681b      	ldr	r3, [r3, #0]
 808066a:	6a1b      	ldr	r3, [r3, #32]
 808066c:	9301      	str	r3, [sp, #4]
 808066e:	bd08      	pop	{r3, pc}
 8080670:	0806001c 	.word	0x0806001c

08080674 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8080674:	b508      	push	{r3, lr}
 8080676:	4b02      	ldr	r3, [pc, #8]	; (8080680 <panic_+0xc>)
 8080678:	681b      	ldr	r3, [r3, #0]
 808067a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808067c:	9301      	str	r3, [sp, #4]
 808067e:	bd08      	pop	{r3, pc}
 8080680:	080201a0 	.word	0x080201a0

08080684 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 8080684:	b508      	push	{r3, lr}
 8080686:	4b02      	ldr	r3, [pc, #8]	; (8080690 <log_message+0xc>)
 8080688:	681b      	ldr	r3, [r3, #0]
 808068a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808068c:	9301      	str	r3, [sp, #4]
 808068e:	bd08      	pop	{r3, pc}
 8080690:	080201a0 	.word	0x080201a0

08080694 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8080694:	b508      	push	{r3, lr}
 8080696:	4b02      	ldr	r3, [pc, #8]	; (80806a0 <log_message_v+0xc>)
 8080698:	681b      	ldr	r3, [r3, #0]
 808069a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808069c:	9301      	str	r3, [sp, #4]
 808069e:	bd08      	pop	{r3, pc}
 80806a0:	080201a0 	.word	0x080201a0

080806a4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80806a4:	b508      	push	{r3, lr}
 80806a6:	4b02      	ldr	r3, [pc, #8]	; (80806b0 <log_level_name+0xc>)
 80806a8:	681b      	ldr	r3, [r3, #0]
 80806aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80806ac:	9301      	str	r3, [sp, #4]
 80806ae:	bd08      	pop	{r3, pc}
 80806b0:	080201a0 	.word	0x080201a0

080806b4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80806b4:	b508      	push	{r3, lr}
 80806b6:	4b02      	ldr	r3, [pc, #8]	; (80806c0 <log_set_callbacks+0xc>)
 80806b8:	681b      	ldr	r3, [r3, #0]
 80806ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80806bc:	9301      	str	r3, [sp, #4]
 80806be:	bd08      	pop	{r3, pc}
 80806c0:	080201a0 	.word	0x080201a0

080806c4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80806c4:	b508      	push	{r3, lr}
 80806c6:	4b02      	ldr	r3, [pc, #8]	; (80806d0 <set_system_mode+0xc>)
 80806c8:	681b      	ldr	r3, [r3, #0]
 80806ca:	685b      	ldr	r3, [r3, #4]
 80806cc:	9301      	str	r3, [sp, #4]
 80806ce:	bd08      	pop	{r3, pc}
 80806d0:	080401a4 	.word	0x080401a4

080806d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80806d4:	b508      	push	{r3, lr}
 80806d6:	4b02      	ldr	r3, [pc, #8]	; (80806e0 <system_delay_ms+0xc>)
 80806d8:	681b      	ldr	r3, [r3, #0]
 80806da:	695b      	ldr	r3, [r3, #20]
 80806dc:	9301      	str	r3, [sp, #4]
 80806de:	bd08      	pop	{r3, pc}
 80806e0:	080401a4 	.word	0x080401a4

080806e4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80806e4:	b508      	push	{r3, lr}
 80806e6:	4b02      	ldr	r3, [pc, #8]	; (80806f0 <system_thread_set_state+0xc>)
 80806e8:	681b      	ldr	r3, [r3, #0]
 80806ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80806ec:	9301      	str	r3, [sp, #4]
 80806ee:	bd08      	pop	{r3, pc}
 80806f0:	080401a4 	.word	0x080401a4

080806f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80806f4:	b508      	push	{r3, lr}
 80806f6:	4b03      	ldr	r3, [pc, #12]	; (8080704 <system_ctrl_set_app_request_handler+0x10>)
 80806f8:	681b      	ldr	r3, [r3, #0]
 80806fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80806fe:	9301      	str	r3, [sp, #4]
 8080700:	bd08      	pop	{r3, pc}
 8080702:	0000      	.short	0x0000
 8080704:	080401a4 	.word	0x080401a4

08080708 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8080708:	b508      	push	{r3, lr}
 808070a:	4b03      	ldr	r3, [pc, #12]	; (8080718 <system_ctrl_set_result+0x10>)
 808070c:	681b      	ldr	r3, [r3, #0]
 808070e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8080712:	9301      	str	r3, [sp, #4]
 8080714:	bd08      	pop	{r3, pc}
 8080716:	0000      	.short	0x0000
 8080718:	080401a4 	.word	0x080401a4

0808071c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
 808071c:	b508      	push	{r3, lr}
 808071e:	4b03      	ldr	r3, [pc, #12]	; (808072c <system_sleep_ext+0x10>)
 8080720:	681b      	ldr	r3, [r3, #0]
 8080722:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8080726:	9301      	str	r3, [sp, #4]
 8080728:	bd08      	pop	{r3, pc}
 808072a:	0000      	.short	0x0000
 808072c:	080401a4 	.word	0x080401a4

08080730 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8080730:	b508      	push	{r3, lr}
 8080732:	4b02      	ldr	r3, [pc, #8]	; (808073c <network_connect+0xc>)
 8080734:	681b      	ldr	r3, [r3, #0]
 8080736:	685b      	ldr	r3, [r3, #4]
 8080738:	9301      	str	r3, [sp, #4]
 808073a:	bd08      	pop	{r3, pc}
 808073c:	080401c8 	.word	0x080401c8

08080740 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8080740:	b508      	push	{r3, lr}
 8080742:	4b02      	ldr	r3, [pc, #8]	; (808074c <network_connecting+0xc>)
 8080744:	681b      	ldr	r3, [r3, #0]
 8080746:	689b      	ldr	r3, [r3, #8]
 8080748:	9301      	str	r3, [sp, #4]
 808074a:	bd08      	pop	{r3, pc}
 808074c:	080401c8 	.word	0x080401c8

08080750 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8080750:	b508      	push	{r3, lr}
 8080752:	4b02      	ldr	r3, [pc, #8]	; (808075c <network_disconnect+0xc>)
 8080754:	681b      	ldr	r3, [r3, #0]
 8080756:	68db      	ldr	r3, [r3, #12]
 8080758:	9301      	str	r3, [sp, #4]
 808075a:	bd08      	pop	{r3, pc}
 808075c:	080401c8 	.word	0x080401c8

08080760 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8080760:	b508      	push	{r3, lr}
 8080762:	4b02      	ldr	r3, [pc, #8]	; (808076c <network_ready+0xc>)
 8080764:	681b      	ldr	r3, [r3, #0]
 8080766:	691b      	ldr	r3, [r3, #16]
 8080768:	9301      	str	r3, [sp, #4]
 808076a:	bd08      	pop	{r3, pc}
 808076c:	080401c8 	.word	0x080401c8

08080770 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8080770:	b508      	push	{r3, lr}
 8080772:	4b02      	ldr	r3, [pc, #8]	; (808077c <network_on+0xc>)
 8080774:	681b      	ldr	r3, [r3, #0]
 8080776:	695b      	ldr	r3, [r3, #20]
 8080778:	9301      	str	r3, [sp, #4]
 808077a:	bd08      	pop	{r3, pc}
 808077c:	080401c8 	.word	0x080401c8

08080780 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8080780:	b508      	push	{r3, lr}
 8080782:	4b02      	ldr	r3, [pc, #8]	; (808078c <network_off+0xc>)
 8080784:	681b      	ldr	r3, [r3, #0]
 8080786:	699b      	ldr	r3, [r3, #24]
 8080788:	9301      	str	r3, [sp, #4]
 808078a:	bd08      	pop	{r3, pc}
 808078c:	080401c8 	.word	0x080401c8

08080790 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8080790:	b508      	push	{r3, lr}
 8080792:	4b02      	ldr	r3, [pc, #8]	; (808079c <network_listen+0xc>)
 8080794:	681b      	ldr	r3, [r3, #0]
 8080796:	69db      	ldr	r3, [r3, #28]
 8080798:	9301      	str	r3, [sp, #4]
 808079a:	bd08      	pop	{r3, pc}
 808079c:	080401c8 	.word	0x080401c8

080807a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80807a0:	b508      	push	{r3, lr}
 80807a2:	4b02      	ldr	r3, [pc, #8]	; (80807ac <network_listening+0xc>)
 80807a4:	681b      	ldr	r3, [r3, #0]
 80807a6:	6a1b      	ldr	r3, [r3, #32]
 80807a8:	9301      	str	r3, [sp, #4]
 80807aa:	bd08      	pop	{r3, pc}
 80807ac:	080401c8 	.word	0x080401c8

080807b0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80807b0:	b508      	push	{r3, lr}
 80807b2:	4b02      	ldr	r3, [pc, #8]	; (80807bc <network_set_listen_timeout+0xc>)
 80807b4:	681b      	ldr	r3, [r3, #0]
 80807b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80807b8:	9301      	str	r3, [sp, #4]
 80807ba:	bd08      	pop	{r3, pc}
 80807bc:	080401c8 	.word	0x080401c8

080807c0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80807c0:	b508      	push	{r3, lr}
 80807c2:	4b02      	ldr	r3, [pc, #8]	; (80807cc <network_get_listen_timeout+0xc>)
 80807c4:	681b      	ldr	r3, [r3, #0]
 80807c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80807c8:	9301      	str	r3, [sp, #4]
 80807ca:	bd08      	pop	{r3, pc}
 80807cc:	080401c8 	.word	0x080401c8

080807d0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80807d0:	b508      	push	{r3, lr}
 80807d2:	4b02      	ldr	r3, [pc, #8]	; (80807dc <spark_process+0xc>)
 80807d4:	681b      	ldr	r3, [r3, #0]
 80807d6:	689b      	ldr	r3, [r3, #8]
 80807d8:	9301      	str	r3, [sp, #4]
 80807da:	bd08      	pop	{r3, pc}
 80807dc:	080401cc 	.word	0x080401cc

080807e0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80807e0:	b508      	push	{r3, lr}
 80807e2:	4b02      	ldr	r3, [pc, #8]	; (80807ec <spark_cloud_flag_connect+0xc>)
 80807e4:	681b      	ldr	r3, [r3, #0]
 80807e6:	68db      	ldr	r3, [r3, #12]
 80807e8:	9301      	str	r3, [sp, #4]
 80807ea:	bd08      	pop	{r3, pc}
 80807ec:	080401cc 	.word	0x080401cc

080807f0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80807f0:	b508      	push	{r3, lr}
 80807f2:	4b02      	ldr	r3, [pc, #8]	; (80807fc <spark_cloud_flag_connected+0xc>)
 80807f4:	681b      	ldr	r3, [r3, #0]
 80807f6:	695b      	ldr	r3, [r3, #20]
 80807f8:	9301      	str	r3, [sp, #4]
 80807fa:	bd08      	pop	{r3, pc}
 80807fc:	080401cc 	.word	0x080401cc

08080800 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080800:	b508      	push	{r3, lr}
 8080802:	4b02      	ldr	r3, [pc, #8]	; (808080c <spark_set_random_seed_from_cloud_handler+0xc>)
 8080804:	681b      	ldr	r3, [r3, #0]
 8080806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080808:	9301      	str	r3, [sp, #4]
 808080a:	bd08      	pop	{r3, pc}
 808080c:	080401cc 	.word	0x080401cc

08080810 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 8080810:	b508      	push	{r3, lr}
 8080812:	4b02      	ldr	r3, [pc, #8]	; (808081c <spark_cloud_disconnect+0xc>)
 8080814:	681b      	ldr	r3, [r3, #0]
 8080816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080818:	9301      	str	r3, [sp, #4]
 808081a:	bd08      	pop	{r3, pc}
 808081c:	080401cc 	.word	0x080401cc

08080820 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8080820:	b508      	push	{r3, lr}
 8080822:	4b02      	ldr	r3, [pc, #8]	; (808082c <malloc+0xc>)
 8080824:	681b      	ldr	r3, [r3, #0]
 8080826:	681b      	ldr	r3, [r3, #0]
 8080828:	9301      	str	r3, [sp, #4]
 808082a:	bd08      	pop	{r3, pc}
 808082c:	080401a0 	.word	0x080401a0

08080830 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8080830:	b508      	push	{r3, lr}
 8080832:	4b02      	ldr	r3, [pc, #8]	; (808083c <free+0xc>)
 8080834:	681b      	ldr	r3, [r3, #0]
 8080836:	685b      	ldr	r3, [r3, #4]
 8080838:	9301      	str	r3, [sp, #4]
 808083a:	bd08      	pop	{r3, pc}
 808083c:	080401a0 	.word	0x080401a0

08080840 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8080840:	b508      	push	{r3, lr}
 8080842:	4b02      	ldr	r3, [pc, #8]	; (808084c <realloc+0xc>)
 8080844:	681b      	ldr	r3, [r3, #0]
 8080846:	689b      	ldr	r3, [r3, #8]
 8080848:	9301      	str	r3, [sp, #4]
 808084a:	bd08      	pop	{r3, pc}
 808084c:	080401a0 	.word	0x080401a0

08080850 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8080850:	b508      	push	{r3, lr}
 8080852:	4b02      	ldr	r3, [pc, #8]	; (808085c <vsnprintf+0xc>)
 8080854:	681b      	ldr	r3, [r3, #0]
 8080856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080858:	9301      	str	r3, [sp, #4]
 808085a:	bd08      	pop	{r3, pc}
 808085c:	080401a0 	.word	0x080401a0

08080860 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8080860:	b508      	push	{r3, lr}
 8080862:	4b02      	ldr	r3, [pc, #8]	; (808086c <newlib_impure_ptr_callback+0xc>)
 8080864:	681b      	ldr	r3, [r3, #0]
 8080866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080868:	9301      	str	r3, [sp, #4]
 808086a:	bd08      	pop	{r3, pc}
 808086c:	080401a0 	.word	0x080401a0

08080870 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8080870:	b510      	push	{r4, lr}
 8080872:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8080874:	6800      	ldr	r0, [r0, #0]
 8080876:	b118      	cbz	r0, 8080880 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 8080878:	f7ff ffda 	bl	8080830 <free>
            wakeupSource_ = nullptr;
 808087c:	2300      	movs	r3, #0
 808087e:	6023      	str	r3, [r4, #0]
        }
    }
 8080880:	bd10      	pop	{r4, pc}

08080882 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8080882:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8080884:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8080888:	460d      	mov	r5, r1
        error_ = result.error_;
 808088a:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 808088c:	460b      	mov	r3, r1
 808088e:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8080892:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 8080894:	f8c0 2006 	str.w	r2, [r0, #6]
 8080898:	889b      	ldrh	r3, [r3, #4]
 808089a:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 808089c:	f7ff ffe8 	bl	8080870 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 80808a0:	682b      	ldr	r3, [r5, #0]
 80808a2:	b113      	cbz	r3, 80808aa <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 80808a4:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 80808a6:	2300      	movs	r3, #0
 80808a8:	602b      	str	r3, [r5, #0]
    }
 80808aa:	4620      	mov	r0, r4
 80808ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080808b0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
 80808b0:	b538      	push	{r3, r4, r5, lr}
 80808b2:	460c      	mov	r4, r1
 80808b4:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
 80808b6:	f7ff ffdb 	bl	8080870 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
 80808ba:	b144      	cbz	r4, 80808ce <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
 80808bc:	8820      	ldrh	r0, [r4, #0]
 80808be:	f7ff ffaf 	bl	8080820 <malloc>
 80808c2:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
 80808c4:	b128      	cbz	r0, 80808d2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
 80808c6:	4621      	mov	r1, r4
 80808c8:	8822      	ldrh	r2, [r4, #0]
 80808ca:	f001 ff05 	bl	80826d8 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
 80808ce:	2000      	movs	r0, #0
    }
 80808d0:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
 80808d2:	4801      	ldr	r0, [pc, #4]	; (80808d8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
 80808d4:	e7fc      	b.n	80808d0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
 80808d6:	bf00      	nop
 80808d8:	fffffefc 	.word	0xfffffefc

080808dc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
 80808dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80808de:	4d2d      	ldr	r5, [pc, #180]	; (8080994 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
 80808e0:	7d0b      	ldrb	r3, [r1, #20]
 80808e2:	4604      	mov	r4, r0
 80808e4:	b08b      	sub	sp, #44	; 0x2c
 80808e6:	4608      	mov	r0, r1
 80808e8:	1daf      	adds	r7, r5, #6
 80808ea:	2b00      	cmp	r3, #0
 80808ec:	d038      	beq.n	8080960 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
 80808ee:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
 80808f0:	791b      	ldrb	r3, [r3, #4]
 80808f2:	2b00      	cmp	r3, #0
 80808f4:	d034      	beq.n	8080960 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
 80808f6:	2200      	movs	r2, #0
    SleepResult() {}
 80808f8:	4b27      	ldr	r3, [pc, #156]	; (8080998 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
 80808fa:	a902      	add	r1, sp, #8
 80808fc:	3004      	adds	r0, #4
 80808fe:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
 8080900:	9202      	str	r2, [sp, #8]
 8080902:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
 8080906:	f88d 200e 	strb.w	r2, [sp, #14]
 808090a:	f7ff ff07 	bl	808071c <system_sleep_ext>
        compatResult_ = result.compatResult_;
 808090e:	f8dd 300e 	ldr.w	r3, [sp, #14]
        result.setError(static_cast<system_error_t>(ret));
 8080912:	b200      	sxth	r0, r0
 8080914:	f8c5 3006 	str.w	r3, [r5, #6]
 8080918:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
 808091c:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
 8080920:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 8080922:	9902      	ldr	r1, [sp, #8]
 8080924:	4628      	mov	r0, r5
        compatResult_ = result.compatResult_;
 8080926:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
 8080928:	f7ff ffc2 	bl	80808b0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
 808092c:	a802      	add	r0, sp, #8
 808092e:	f7ff ff9f 	bl	8080870 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
 8080932:	2300      	movs	r3, #0
 8080934:	6023      	str	r3, [r4, #0]
 8080936:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 8080938:	71a3      	strb	r3, [r4, #6]
 808093a:	8123      	strh	r3, [r4, #8]
 808093c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8080940:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
 8080942:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 8080946:	4620      	mov	r0, r4
        error_ = result.error_;
 8080948:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
 808094a:	683b      	ldr	r3, [r7, #0]
        copyWakeupSource(result.wakeupSource_);
 808094c:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
 808094e:	f8c4 3006 	str.w	r3, [r4, #6]
 8080952:	88bb      	ldrh	r3, [r7, #4]
 8080954:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
 8080956:	f7ff ffab 	bl	80808b0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
 808095a:	4620      	mov	r0, r4
 808095c:	b00b      	add	sp, #44	; 0x2c
 808095e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
 8080960:	2600      	movs	r6, #0
 8080962:	2320      	movs	r3, #32
 8080964:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8080968:	4b0c      	ldr	r3, [pc, #48]	; (808099c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
 808096a:	2032      	movs	r0, #50	; 0x32
 808096c:	9300      	str	r3, [sp, #0]
 808096e:	490c      	ldr	r1, [pc, #48]	; (80809a0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
 8080970:	4633      	mov	r3, r6
 8080972:	aa02      	add	r2, sp, #8
 8080974:	f7ff fe86 	bl	8080684 <log_message>
    SleepResult() {}
 8080978:	4b07      	ldr	r3, [pc, #28]	; (8080998 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
 808097a:	a902      	add	r1, sp, #8
 808097c:	9304      	str	r3, [sp, #16]
        error_ = error;
 808097e:	f64f 63f2 	movw	r3, #65266	; 0xfef2
 8080982:	4804      	ldr	r0, [pc, #16]	; (8080994 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
 8080984:	9602      	str	r6, [sp, #8]
    SleepResult() {}
 8080986:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
 808098a:	f8ad 300c 	strh.w	r3, [sp, #12]
 808098e:	f7ff ff78 	bl	8080882 <_ZN17SystemSleepResultaSEOS_>
 8080992:	e7cb      	b.n	808092c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
 8080994:	200000b4 	.word	0x200000b4
 8080998:	ffff0000 	.word	0xffff0000
 808099c:	08082a03 	.word	0x08082a03
 80809a0:	080829fc 	.word	0x080829fc

080809a4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80809a4:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80809a6:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80809a8:	b510      	push	{r4, lr}
 80809aa:	4b08      	ldr	r3, [pc, #32]	; (80809cc <_GLOBAL__sub_I_System+0x28>)
 80809ac:	4c08      	ldr	r4, [pc, #32]	; (80809d0 <_GLOBAL__sub_I_System+0x2c>)
 80809ae:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80809b0:	4b08      	ldr	r3, [pc, #32]	; (80809d4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80809b2:	6020      	str	r0, [r4, #0]
 80809b4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80809b6:	71a0      	strb	r0, [r4, #6]
 80809b8:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80809ba:	f7ff fe83 	bl	80806c4 <set_system_mode>
SystemClass System;
 80809be:	4620      	mov	r0, r4
 80809c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80809c4:	4a04      	ldr	r2, [pc, #16]	; (80809d8 <_GLOBAL__sub_I_System+0x34>)
 80809c6:	4905      	ldr	r1, [pc, #20]	; (80809dc <_GLOBAL__sub_I_System+0x38>)
 80809c8:	f001 be6e 	b.w	80826a8 <__aeabi_atexit>
 80809cc:	200000c0 	.word	0x200000c0
 80809d0:	200000b4 	.word	0x200000b4
 80809d4:	ffff0000 	.word	0xffff0000
 80809d8:	20000078 	.word	0x20000078
 80809dc:	08080119 	.word	0x08080119

080809e0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80809e0:	b510      	push	{r4, lr}
 80809e2:	4604      	mov	r4, r0
{
	free(buffer);
 80809e4:	6800      	ldr	r0, [r0, #0]
 80809e6:	f7ff ff23 	bl	8080830 <free>
}
 80809ea:	4620      	mov	r0, r4
 80809ec:	bd10      	pop	{r4, pc}

080809ee <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80809ee:	b510      	push	{r4, lr}
 80809f0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80809f2:	6800      	ldr	r0, [r0, #0]
 80809f4:	b108      	cbz	r0, 80809fa <_ZN6String10invalidateEv+0xc>
 80809f6:	f7ff ff1b 	bl	8080830 <free>
	buffer = NULL;
 80809fa:	2300      	movs	r3, #0
	capacity = len = 0;
 80809fc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 8080a00:	6023      	str	r3, [r4, #0]
}
 8080a02:	bd10      	pop	{r4, pc}

08080a04 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8080a04:	b538      	push	{r3, r4, r5, lr}
 8080a06:	4604      	mov	r4, r0
 8080a08:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8080a0a:	6800      	ldr	r0, [r0, #0]
 8080a0c:	3101      	adds	r1, #1
 8080a0e:	f7ff ff17 	bl	8080840 <realloc>
	if (newbuffer) {
 8080a12:	b110      	cbz	r0, 8080a1a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8080a14:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 8080a18:	2001      	movs	r0, #1
	}
	return 0;
}
 8080a1a:	bd38      	pop	{r3, r4, r5, pc}

08080a1c <_ZN6String7reserveEj>:
{
 8080a1c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8080a1e:	6803      	ldr	r3, [r0, #0]
{
 8080a20:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8080a22:	b123      	cbz	r3, 8080a2e <_ZN6String7reserveEj+0x12>
 8080a24:	6843      	ldr	r3, [r0, #4]
 8080a26:	428b      	cmp	r3, r1
 8080a28:	d301      	bcc.n	8080a2e <_ZN6String7reserveEj+0x12>
 8080a2a:	2001      	movs	r0, #1
}
 8080a2c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 8080a2e:	4620      	mov	r0, r4
 8080a30:	f7ff ffe8 	bl	8080a04 <_ZN6String12changeBufferEj>
 8080a34:	2800      	cmp	r0, #0
 8080a36:	d0f9      	beq.n	8080a2c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 8080a38:	68a3      	ldr	r3, [r4, #8]
 8080a3a:	2b00      	cmp	r3, #0
 8080a3c:	d1f5      	bne.n	8080a2a <_ZN6String7reserveEj+0xe>
 8080a3e:	6822      	ldr	r2, [r4, #0]
 8080a40:	7013      	strb	r3, [r2, #0]
 8080a42:	e7f2      	b.n	8080a2a <_ZN6String7reserveEj+0xe>

08080a44 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8080a44:	b570      	push	{r4, r5, r6, lr}
 8080a46:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8080a48:	4611      	mov	r1, r2
{
 8080a4a:	4604      	mov	r4, r0
 8080a4c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8080a4e:	f7ff ffe5 	bl	8080a1c <_ZN6String7reserveEj>
 8080a52:	b920      	cbnz	r0, 8080a5e <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 8080a54:	4620      	mov	r0, r4
 8080a56:	f7ff ffca 	bl	80809ee <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 8080a5a:	4620      	mov	r0, r4
 8080a5c:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 8080a5e:	462a      	mov	r2, r5
 8080a60:	4631      	mov	r1, r6
 8080a62:	6820      	ldr	r0, [r4, #0]
	len = length;
 8080a64:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8080a66:	f001 fe37 	bl	80826d8 <memcpy>
	buffer[len] = 0;
 8080a6a:	2100      	movs	r1, #0
 8080a6c:	6822      	ldr	r2, [r4, #0]
 8080a6e:	68a3      	ldr	r3, [r4, #8]
 8080a70:	54d1      	strb	r1, [r2, r3]
	return *this;
 8080a72:	e7f2      	b.n	8080a5a <_ZN6String4copyEPKcj+0x16>

08080a74 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8080a74:	b538      	push	{r3, r4, r5, lr}
 8080a76:	4605      	mov	r5, r0
	if (buffer) {
 8080a78:	6800      	ldr	r0, [r0, #0]
{
 8080a7a:	460c      	mov	r4, r1
	if (buffer) {
 8080a7c:	b168      	cbz	r0, 8080a9a <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 8080a7e:	686a      	ldr	r2, [r5, #4]
 8080a80:	688b      	ldr	r3, [r1, #8]
 8080a82:	429a      	cmp	r2, r3
 8080a84:	d307      	bcc.n	8080a96 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 8080a86:	6809      	ldr	r1, [r1, #0]
 8080a88:	f001 fe9b 	bl	80827c2 <strcpy>
			len = rhs.len;
 8080a8c:	68a3      	ldr	r3, [r4, #8]
 8080a8e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8080a90:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 8080a92:	60a3      	str	r3, [r4, #8]
}
 8080a94:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 8080a96:	f7ff fecb 	bl	8080830 <free>
	buffer = rhs.buffer;
 8080a9a:	6823      	ldr	r3, [r4, #0]
 8080a9c:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8080a9e:	6863      	ldr	r3, [r4, #4]
 8080aa0:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8080aa2:	68a3      	ldr	r3, [r4, #8]
 8080aa4:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8080aa6:	2300      	movs	r3, #0
	rhs.capacity = 0;
 8080aa8:	e9c4 3300 	strd	r3, r3, [r4]
 8080aac:	e7f1      	b.n	8080a92 <_ZN6String4moveERS_+0x1e>

08080aae <_ZN6StringC1EOS_>:
	buffer = NULL;
 8080aae:	2300      	movs	r3, #0
String::String(String &&rval)
 8080ab0:	b510      	push	{r4, lr}
 8080ab2:	4604      	mov	r4, r0
	capacity = 0;
 8080ab4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8080ab8:	6083      	str	r3, [r0, #8]
	flags = 0;
 8080aba:	7303      	strb	r3, [r0, #12]
	move(rval);
 8080abc:	f7ff ffda 	bl	8080a74 <_ZN6String4moveERS_>
}
 8080ac0:	4620      	mov	r0, r4
 8080ac2:	bd10      	pop	{r4, pc}

08080ac4 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8080ac4:	4288      	cmp	r0, r1
{
 8080ac6:	b510      	push	{r4, lr}
 8080ac8:	460b      	mov	r3, r1
 8080aca:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8080acc:	d004      	beq.n	8080ad8 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8080ace:	6809      	ldr	r1, [r1, #0]
 8080ad0:	b121      	cbz	r1, 8080adc <_ZN6StringaSERKS_+0x18>
 8080ad2:	689a      	ldr	r2, [r3, #8]
 8080ad4:	f7ff ffb6 	bl	8080a44 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8080ad8:	4620      	mov	r0, r4
 8080ada:	bd10      	pop	{r4, pc}
	else invalidate();
 8080adc:	f7ff ff87 	bl	80809ee <_ZN6String10invalidateEv>
 8080ae0:	e7fa      	b.n	8080ad8 <_ZN6StringaSERKS_+0x14>

08080ae2 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 8080ae2:	2300      	movs	r3, #0
String::String(const String &value)
 8080ae4:	b510      	push	{r4, lr}
 8080ae6:	4604      	mov	r4, r0
	capacity = 0;
 8080ae8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8080aec:	6083      	str	r3, [r0, #8]
	flags = 0;
 8080aee:	7303      	strb	r3, [r0, #12]
	*this = value;
 8080af0:	f7ff ffe8 	bl	8080ac4 <_ZN6StringaSERKS_>
}
 8080af4:	4620      	mov	r0, r4
 8080af6:	bd10      	pop	{r4, pc}

08080af8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8080af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080afa:	4606      	mov	r6, r0
 8080afc:	460d      	mov	r5, r1
  size_t n = 0;
 8080afe:	2400      	movs	r4, #0
 8080b00:	188f      	adds	r7, r1, r2
  while (size--) {
 8080b02:	42bd      	cmp	r5, r7
 8080b04:	d00c      	beq.n	8080b20 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8080b06:	6833      	ldr	r3, [r6, #0]
 8080b08:	4630      	mov	r0, r6
 8080b0a:	689b      	ldr	r3, [r3, #8]
 8080b0c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8080b10:	4798      	blx	r3
     if (chunk>=0)
 8080b12:	1e03      	subs	r3, r0, #0
 8080b14:	db01      	blt.n	8080b1a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8080b16:	441c      	add	r4, r3
  while (size--) {
 8080b18:	e7f3      	b.n	8080b02 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8080b1a:	2c00      	cmp	r4, #0
 8080b1c:	bf08      	it	eq
 8080b1e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8080b20:	4620      	mov	r0, r4
 8080b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080b24 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8080b24:	b570      	push	{r4, r5, r6, lr}
 8080b26:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8080b28:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8080b2a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8080b2c:	b149      	cbz	r1, 8080b42 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8080b2e:	f001 fe50 	bl	80827d2 <strlen>
 8080b32:	682b      	ldr	r3, [r5, #0]
 8080b34:	4602      	mov	r2, r0
 8080b36:	4621      	mov	r1, r4
 8080b38:	4628      	mov	r0, r5
    }
 8080b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8080b3e:	68db      	ldr	r3, [r3, #12]
 8080b40:	4718      	bx	r3
    }
 8080b42:	bd70      	pop	{r4, r5, r6, pc}

08080b44 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8080b44:	6803      	ldr	r3, [r0, #0]
 8080b46:	689b      	ldr	r3, [r3, #8]
 8080b48:	4718      	bx	r3

08080b4a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8080b4a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8080b4c:	210d      	movs	r1, #13
{
 8080b4e:	4605      	mov	r5, r0
  size_t n = print('\r');
 8080b50:	f7ff fff8 	bl	8080b44 <_ZN5Print5printEc>
  n += print('\n');
 8080b54:	210a      	movs	r1, #10
  size_t n = print('\r');
 8080b56:	4604      	mov	r4, r0
  n += print('\n');
 8080b58:	4628      	mov	r0, r5
 8080b5a:	f7ff fff3 	bl	8080b44 <_ZN5Print5printEc>
  return n;
}
 8080b5e:	4420      	add	r0, r4
 8080b60:	bd38      	pop	{r3, r4, r5, pc}

08080b62 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8080b62:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8080b64:	2a01      	cmp	r2, #1
 8080b66:	bf98      	it	ls
 8080b68:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8080b6a:	b530      	push	{r4, r5, lr}
 8080b6c:	b08b      	sub	sp, #44	; 0x2c
 8080b6e:	460c      	mov	r4, r1
  *str = '\0';
 8080b70:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8080b74:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 8080b76:	4625      	mov	r5, r4
 8080b78:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8080b7c:	fb04 5312 	mls	r3, r4, r2, r5
 8080b80:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080b82:	2b09      	cmp	r3, #9
 8080b84:	bf94      	ite	ls
 8080b86:	3330      	addls	r3, #48	; 0x30
 8080b88:	3337      	addhi	r3, #55	; 0x37
 8080b8a:	b2db      	uxtb	r3, r3
  } while(n);
 8080b8c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080b8e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8080b92:	d9f0      	bls.n	8080b76 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8080b94:	f7ff ffc6 	bl	8080b24 <_ZN5Print5writeEPKc>
}
 8080b98:	b00b      	add	sp, #44	; 0x2c
 8080b9a:	bd30      	pop	{r4, r5, pc}

08080b9c <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 8080b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080ba0:	b086      	sub	sp, #24
 8080ba2:	af00      	add	r7, sp, #0
 8080ba4:	4605      	mov	r5, r0
 8080ba6:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 8080ba8:	1d38      	adds	r0, r7, #4
 8080baa:	2114      	movs	r1, #20
{
 8080bac:	4614      	mov	r4, r2
    va_copy(args2, args);
 8080bae:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 8080bb0:	f7ff fe4e 	bl	8080850 <vsnprintf>

    if (n<bufsize)
 8080bb4:	2813      	cmp	r0, #19
 8080bb6:	d80e      	bhi.n	8080bd6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 8080bb8:	4628      	mov	r0, r5
 8080bba:	1d39      	adds	r1, r7, #4
 8080bbc:	f7ff ffb2 	bl	8080b24 <_ZN5Print5writeEPKc>
 8080bc0:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 8080bc2:	b11e      	cbz	r6, 8080bcc <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 8080bc4:	4628      	mov	r0, r5
 8080bc6:	f7ff ffc0 	bl	8080b4a <_ZN5Print7printlnEv>
 8080bca:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 8080bcc:	4620      	mov	r0, r4
 8080bce:	3718      	adds	r7, #24
 8080bd0:	46bd      	mov	sp, r7
 8080bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 8080bd6:	f100 0308 	add.w	r3, r0, #8
 8080bda:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 8080bde:	46e8      	mov	r8, sp
        char bigger[n+1];
 8080be0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 8080be4:	4622      	mov	r2, r4
 8080be6:	1c41      	adds	r1, r0, #1
 8080be8:	683b      	ldr	r3, [r7, #0]
 8080bea:	4668      	mov	r0, sp
 8080bec:	f7ff fe30 	bl	8080850 <vsnprintf>
  return write(str);
 8080bf0:	4669      	mov	r1, sp
 8080bf2:	4628      	mov	r0, r5
 8080bf4:	f7ff ff96 	bl	8080b24 <_ZN5Print5writeEPKc>
 8080bf8:	4604      	mov	r4, r0
 8080bfa:	46c5      	mov	sp, r8
 8080bfc:	e7e1      	b.n	8080bc2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

08080bfe <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 8080bfe:	6880      	ldr	r0, [r0, #8]
 8080c00:	6803      	ldr	r3, [r0, #0]
 8080c02:	68db      	ldr	r3, [r3, #12]
 8080c04:	4718      	bx	r3

08080c06 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 8080c06:	4770      	bx	lr

08080c08 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 8080c08:	4608      	mov	r0, r1
 8080c0a:	b111      	cbz	r1, 8080c12 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 8080c0c:	680b      	ldr	r3, [r1, #0]
 8080c0e:	685b      	ldr	r3, [r3, #4]
 8080c10:	4718      	bx	r3
}
 8080c12:	4770      	bx	lr

08080c14 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 8080c14:	4770      	bx	lr

08080c16 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 8080c16:	4770      	bx	lr

08080c18 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 8080c18:	4770      	bx	lr

08080c1a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 8080c1a:	b538      	push	{r3, r4, r5, lr}
 8080c1c:	4604      	mov	r4, r0
 8080c1e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 8080c20:	6800      	ldr	r0, [r0, #0]
 8080c22:	212e      	movs	r1, #46	; 0x2e
 8080c24:	f001 fdb9 	bl	808279a <strchrnul>
    size = s - category;
 8080c28:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 8080c2a:	4602      	mov	r2, r0
    size = s - category;
 8080c2c:	1ac0      	subs	r0, r0, r3
 8080c2e:	6028      	str	r0, [r5, #0]
    if (size) {
 8080c30:	b120      	cbz	r0, 8080c3c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 8080c32:	7813      	ldrb	r3, [r2, #0]
 8080c34:	b103      	cbz	r3, 8080c38 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 8080c36:	3201      	adds	r2, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080c38:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8080c3a:	6022      	str	r2, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
 8080c3c:	bd38      	pop	{r3, r4, r5, pc}

08080c3e <_ZN5spark16JSONStreamWriterD0Ev>:
 8080c3e:	b510      	push	{r4, lr}
 8080c40:	4604      	mov	r4, r0
 8080c42:	210c      	movs	r1, #12
 8080c44:	f001 fd35 	bl	80826b2 <_ZdlPvj>
 8080c48:	4620      	mov	r0, r4
 8080c4a:	bd10      	pop	{r4, pc}

08080c4c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 8080c4c:	b510      	push	{r4, lr}
 8080c4e:	4604      	mov	r4, r0
 8080c50:	2104      	movs	r1, #4
 8080c52:	f001 fd2e 	bl	80826b2 <_ZdlPvj>
 8080c56:	4620      	mov	r0, r4
 8080c58:	bd10      	pop	{r4, pc}

08080c5a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 8080c5a:	b510      	push	{r4, lr}
 8080c5c:	4604      	mov	r4, r0
 8080c5e:	2104      	movs	r1, #4
 8080c60:	f001 fd27 	bl	80826b2 <_ZdlPvj>
 8080c64:	4620      	mov	r0, r4
 8080c66:	bd10      	pop	{r4, pc}

08080c68 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 8080c68:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 8080c6a:	f001 fda0 	bl	80827ae <strcmp>
}
 8080c6e:	fab0 f080 	clz	r0, r0
 8080c72:	0940      	lsrs	r0, r0, #5
 8080c74:	bd08      	pop	{r3, pc}

08080c76 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 8080c76:	b510      	push	{r4, lr}
 8080c78:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 8080c7a:	f001 f95f 	bl	8081f3c <_Z16_fetch_usbserialv>
 8080c7e:	4284      	cmp	r4, r0
 8080c80:	d105      	bne.n	8080c8e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 8080c82:	f001 f95b 	bl	8081f3c <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 8080c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 8080c8a:	f001 b93d 	b.w	8081f08 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 8080c8e:	f001 f993 	bl	8081fb8 <_Z17_fetch_usbserial1v>
 8080c92:	4284      	cmp	r4, r0
 8080c94:	d102      	bne.n	8080c9c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 8080c96:	f001 f98f 	bl	8081fb8 <_Z17_fetch_usbserial1v>
 8080c9a:	e7f4      	b.n	8080c86 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 8080c9c:	f001 fa7a 	bl	8082194 <_Z22__fetch_global_Serial1v>
 8080ca0:	4284      	cmp	r4, r0
 8080ca2:	d105      	bne.n	8080cb0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 8080ca4:	f001 fa76 	bl	8082194 <_Z22__fetch_global_Serial1v>
}
 8080ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 8080cac:	f001 ba6f 	b.w	808218e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 8080cb0:	b12c      	cbz	r4, 8080cbe <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 8080cb2:	6823      	ldr	r3, [r4, #0]
 8080cb4:	4620      	mov	r0, r4
}
 8080cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8080cba:	685b      	ldr	r3, [r3, #4]
 8080cbc:	4718      	bx	r3
 8080cbe:	bd10      	pop	{r4, pc}

08080cc0 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 8080cc0:	b538      	push	{r3, r4, r5, lr}
 8080cc2:	4605      	mov	r5, r0
    return value(val, strlen(val));
 8080cc4:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 8080cc6:	460c      	mov	r4, r1
    return value(val, strlen(val));
 8080cc8:	f001 fd83 	bl	80827d2 <strlen>
 8080ccc:	4621      	mov	r1, r4
 8080cce:	4602      	mov	r2, r0
 8080cd0:	4628      	mov	r0, r5
}
 8080cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 8080cd6:	f001 bcc0 	b.w	808265a <_ZN5spark10JSONWriter5valueEPKcj>

08080cda <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 8080cda:	b570      	push	{r4, r5, r6, lr}
 8080cdc:	4604      	mov	r4, r0
    write(str, strlen(str));
 8080cde:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 8080ce0:	460d      	mov	r5, r1
    write(str, strlen(str));
 8080ce2:	f001 fd76 	bl	80827d2 <strlen>
 8080ce6:	6823      	ldr	r3, [r4, #0]
 8080ce8:	4602      	mov	r2, r0
 8080cea:	4629      	mov	r1, r5
 8080cec:	4620      	mov	r0, r4
}
 8080cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 8080cf2:	68db      	ldr	r3, [r3, #12]
 8080cf4:	4718      	bx	r3

08080cf6 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 8080cf6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 8080cf8:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 8080cfa:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 8080cfe:	2201      	movs	r2, #1
 8080d00:	68db      	ldr	r3, [r3, #12]
 8080d02:	f10d 0107 	add.w	r1, sp, #7
 8080d06:	4798      	blx	r3
}
 8080d08:	b003      	add	sp, #12
 8080d0a:	f85d fb04 	ldr.w	pc, [sp], #4

08080d0e <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 8080d0e:	b40e      	push	{r1, r2, r3}
 8080d10:	b503      	push	{r0, r1, lr}
 8080d12:	ab03      	add	r3, sp, #12
 8080d14:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 8080d18:	2100      	movs	r1, #0
 8080d1a:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 8080d1c:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 8080d1e:	f7ff ff3d 	bl	8080b9c <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 8080d22:	b002      	add	sp, #8
 8080d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8080d28:	b003      	add	sp, #12
 8080d2a:	4770      	bx	lr

08080d2c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8080d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 8080d30:	f04f 0814 	mov.w	r8, #20
 8080d34:	e9d0 9500 	ldrd	r9, r5, [r0]
 8080d38:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8080d3a:	464c      	mov	r4, r9
 8080d3c:	fb08 f505 	mul.w	r5, r8, r5
 8080d40:	9300      	str	r3, [sp, #0]
 8080d42:	10ab      	asrs	r3, r5, #2
 8080d44:	4d17      	ldr	r5, [pc, #92]	; (8080da4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 8080d46:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 8080d48:	2d00      	cmp	r5, #0
 8080d4a:	dd23      	ble.n	8080d94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 8080d4c:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 8080d4e:	fb08 f006 	mul.w	r0, r8, r6
 8080d52:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 8080d56:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8080d5a:	463a      	mov	r2, r7
 8080d5c:	455f      	cmp	r7, fp
 8080d5e:	bf28      	it	cs
 8080d60:	465a      	movcs	r2, fp
 8080d62:	5820      	ldr	r0, [r4, r0]
 8080d64:	9101      	str	r1, [sp, #4]
 8080d66:	f001 fd3c 	bl	80827e2 <strncmp>
                if (cmp == 0) {
 8080d6a:	2301      	movs	r3, #1
 8080d6c:	9901      	ldr	r1, [sp, #4]
 8080d6e:	b978      	cbnz	r0, 8080d90 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 8080d70:	455f      	cmp	r7, fp
 8080d72:	d103      	bne.n	8080d7c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 8080d74:	9a00      	ldr	r2, [sp, #0]
 8080d76:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8080d78:	4635      	mov	r5, r6
 8080d7a:	e7e5      	b.n	8080d48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 8080d7c:	bf8c      	ite	hi
 8080d7e:	2001      	movhi	r0, #1
 8080d80:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 8080d82:	2800      	cmp	r0, #0
 8080d84:	d0f8      	beq.n	8080d78 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 8080d86:	1bae      	subs	r6, r5, r6
	      ++__first;
 8080d88:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 8080d8c:	3e01      	subs	r6, #1
 8080d8e:	e7f3      	b.n	8080d78 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 8080d90:	0fc0      	lsrs	r0, r0, #31
 8080d92:	e7f6      	b.n	8080d82 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 8080d94:	eba4 0409 	sub.w	r4, r4, r9
}
 8080d98:	4802      	ldr	r0, [pc, #8]	; (8080da4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 8080d9a:	10a4      	asrs	r4, r4, #2
 8080d9c:	4360      	muls	r0, r4
 8080d9e:	b003      	add	sp, #12
 8080da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080da4:	cccccccd 	.word	0xcccccccd

08080da8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 8080da8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 8080daa:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 8080dac:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 8080dae:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 8080db0:	b303      	cbz	r3, 8080df4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 8080db2:	b1f9      	cbz	r1, 8080df4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 8080db4:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 8080db6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 8080dba:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 8080dbc:	a903      	add	r1, sp, #12
 8080dbe:	a801      	add	r0, sp, #4
 8080dc0:	f7ff ff2b 	bl	8080c1a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8080dc4:	4601      	mov	r1, r0
 8080dc6:	b1a8      	cbz	r0, 8080df4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 8080dc8:	f10d 030b 	add.w	r3, sp, #11
 8080dcc:	4620      	mov	r0, r4
 8080dce:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 8080dd0:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 8080dd4:	f7ff ffaa 	bl	8080d2c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 8080dd8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8080ddc:	b153      	cbz	r3, 8080df4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 8080dde:	2314      	movs	r3, #20
 8080de0:	6824      	ldr	r4, [r4, #0]
 8080de2:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 8080de6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 8080dea:	3408      	adds	r4, #8
            if (node.level >= 0) {
 8080dec:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 8080dee:	bfa8      	it	ge
 8080df0:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 8080df2:	e7e3      	b.n	8080dbc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 8080df4:	4630      	mov	r0, r6
 8080df6:	b004      	add	sp, #16
 8080df8:	bd70      	pop	{r4, r5, r6, pc}
	...

08080dfc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 8080dfc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 8080dfe:	4c0a      	ldr	r4, [pc, #40]	; (8080e28 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 8080e00:	7823      	ldrb	r3, [r4, #0]
 8080e02:	f3bf 8f5b 	dmb	ish
 8080e06:	07db      	lsls	r3, r3, #31
 8080e08:	d40b      	bmi.n	8080e22 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 8080e0a:	4620      	mov	r0, r4
 8080e0c:	f7ff f952 	bl	80800b4 <__cxa_guard_acquire>
 8080e10:	b138      	cbz	r0, 8080e22 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 8080e12:	4620      	mov	r0, r4
 8080e14:	f7ff f953 	bl	80800be <__cxa_guard_release>
 8080e18:	4a04      	ldr	r2, [pc, #16]	; (8080e2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 8080e1a:	4905      	ldr	r1, [pc, #20]	; (8080e30 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 8080e1c:	4805      	ldr	r0, [pc, #20]	; (8080e34 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 8080e1e:	f001 fc43 	bl	80826a8 <__aeabi_atexit>
}
 8080e22:	4804      	ldr	r0, [pc, #16]	; (8080e34 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 8080e24:	bd10      	pop	{r4, pc}
 8080e26:	bf00      	nop
 8080e28:	200000c8 	.word	0x200000c8
 8080e2c:	20000078 	.word	0x20000078
 8080e30:	08080c17 	.word	0x08080c17
 8080e34:	20000008 	.word	0x20000008

08080e38 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 8080e38:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 8080e3a:	4c0a      	ldr	r4, [pc, #40]	; (8080e64 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 8080e3c:	7823      	ldrb	r3, [r4, #0]
 8080e3e:	f3bf 8f5b 	dmb	ish
 8080e42:	07db      	lsls	r3, r3, #31
 8080e44:	d40b      	bmi.n	8080e5e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 8080e46:	4620      	mov	r0, r4
 8080e48:	f7ff f934 	bl	80800b4 <__cxa_guard_acquire>
 8080e4c:	b138      	cbz	r0, 8080e5e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 8080e4e:	4620      	mov	r0, r4
 8080e50:	f7ff f935 	bl	80800be <__cxa_guard_release>
 8080e54:	4a04      	ldr	r2, [pc, #16]	; (8080e68 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 8080e56:	4905      	ldr	r1, [pc, #20]	; (8080e6c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 8080e58:	4805      	ldr	r0, [pc, #20]	; (8080e70 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 8080e5a:	f001 fc25 	bl	80826a8 <__aeabi_atexit>
    return &factory;
}
 8080e5e:	4804      	ldr	r0, [pc, #16]	; (8080e70 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 8080e60:	bd10      	pop	{r4, pc}
 8080e62:	bf00      	nop
 8080e64:	200000cc 	.word	0x200000cc
 8080e68:	20000078 	.word	0x20000078
 8080e6c:	08080c15 	.word	0x08080c15
 8080e70:	2000000c 	.word	0x2000000c

08080e74 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 8080e74:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 8080e76:	2500      	movs	r5, #0
 8080e78:	4604      	mov	r4, r0
 8080e7a:	e9c0 5500 	strd	r5, r5, [r0]
 8080e7e:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8080e82:	6085      	str	r5, [r0, #8]
 8080e84:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 8080e86:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 8080e8a:	f7ff fb43 	bl	8080514 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 8080e8e:	f7ff ffb5 	bl	8080dfc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 8080e92:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 8080e94:	f7ff ffd0 	bl	8080e38 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 8080e98:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 8080e9a:	6220      	str	r0, [r4, #32]
}
 8080e9c:	4620      	mov	r0, r4
 8080e9e:	bd38      	pop	{r3, r4, r5, pc}

08080ea0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 8080ea0:	b510      	push	{r4, lr}
    static LogManager mgr;
 8080ea2:	4c0b      	ldr	r4, [pc, #44]	; (8080ed0 <_ZN5spark10LogManager8instanceEv+0x30>)
 8080ea4:	7823      	ldrb	r3, [r4, #0]
 8080ea6:	f3bf 8f5b 	dmb	ish
 8080eaa:	07db      	lsls	r3, r3, #31
 8080eac:	d40e      	bmi.n	8080ecc <_ZN5spark10LogManager8instanceEv+0x2c>
 8080eae:	4620      	mov	r0, r4
 8080eb0:	f7ff f900 	bl	80800b4 <__cxa_guard_acquire>
 8080eb4:	b150      	cbz	r0, 8080ecc <_ZN5spark10LogManager8instanceEv+0x2c>
 8080eb6:	4807      	ldr	r0, [pc, #28]	; (8080ed4 <_ZN5spark10LogManager8instanceEv+0x34>)
 8080eb8:	f7ff ffdc 	bl	8080e74 <_ZN5spark10LogManagerC1Ev>
 8080ebc:	4620      	mov	r0, r4
 8080ebe:	f7ff f8fe 	bl	80800be <__cxa_guard_release>
 8080ec2:	4a05      	ldr	r2, [pc, #20]	; (8080ed8 <_ZN5spark10LogManager8instanceEv+0x38>)
 8080ec4:	4905      	ldr	r1, [pc, #20]	; (8080edc <_ZN5spark10LogManager8instanceEv+0x3c>)
 8080ec6:	4803      	ldr	r0, [pc, #12]	; (8080ed4 <_ZN5spark10LogManager8instanceEv+0x34>)
 8080ec8:	f001 fbee 	bl	80826a8 <__aeabi_atexit>
    return &mgr;
}
 8080ecc:	4801      	ldr	r0, [pc, #4]	; (8080ed4 <_ZN5spark10LogManager8instanceEv+0x34>)
 8080ece:	bd10      	pop	{r4, pc}
 8080ed0:	200000c4 	.word	0x200000c4
 8080ed4:	200000d4 	.word	0x200000d4
 8080ed8:	20000078 	.word	0x20000078
 8080edc:	0808138f 	.word	0x0808138f

08080ee0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 8080ee0:	2300      	movs	r3, #0
 8080ee2:	4a02      	ldr	r2, [pc, #8]	; (8080eec <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 8080ee4:	4902      	ldr	r1, [pc, #8]	; (8080ef0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 8080ee6:	4803      	ldr	r0, [pc, #12]	; (8080ef4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 8080ee8:	f7ff bbe4 	b.w	80806b4 <log_set_callbacks>
 8080eec:	0808126d 	.word	0x0808126d
 8080ef0:	080811f9 	.word	0x080811f9
 8080ef4:	08081179 	.word	0x08081179

08080ef8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 8080ef8:	2300      	movs	r3, #0
 8080efa:	461a      	mov	r2, r3
 8080efc:	4619      	mov	r1, r3
 8080efe:	4618      	mov	r0, r3
 8080f00:	f7ff bbd8 	b.w	80806b4 <log_set_callbacks>

08080f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080f04:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080f06:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 8080f08:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 8080f0a:	b17c      	cbz	r4, 8080f2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 8080f0c:	6863      	ldr	r3, [r4, #4]
 8080f0e:	3b01      	subs	r3, #1
 8080f10:	6063      	str	r3, [r4, #4]
 8080f12:	b95b      	cbnz	r3, 8080f2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8080f14:	6823      	ldr	r3, [r4, #0]
 8080f16:	4620      	mov	r0, r4
 8080f18:	689b      	ldr	r3, [r3, #8]
 8080f1a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080f1c:	68a3      	ldr	r3, [r4, #8]
 8080f1e:	3b01      	subs	r3, #1
 8080f20:	60a3      	str	r3, [r4, #8]
 8080f22:	b91b      	cbnz	r3, 8080f2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080f24:	6823      	ldr	r3, [r4, #0]
 8080f26:	4620      	mov	r0, r4
 8080f28:	68db      	ldr	r3, [r3, #12]
 8080f2a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 8080f2c:	4628      	mov	r0, r5
 8080f2e:	bd38      	pop	{r3, r4, r5, pc}

08080f30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8080f30:	680b      	ldr	r3, [r1, #0]
 8080f32:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8080f34:	b113      	cbz	r3, 8080f3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 8080f36:	685a      	ldr	r2, [r3, #4]
 8080f38:	3201      	adds	r2, #1
 8080f3a:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 8080f3c:	4770      	bx	lr

08080f3e <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 8080f3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080f40:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 8080f42:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080f44:	f851 3b04 	ldr.w	r3, [r1], #4
 8080f48:	a801      	add	r0, sp, #4
 8080f4a:	9300      	str	r3, [sp, #0]
 8080f4c:	f7ff fff0 	bl	8080f30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8080f50:	466a      	mov	r2, sp
 8080f52:	4629      	mov	r1, r5
 8080f54:	4620      	mov	r0, r4
 8080f56:	f001 fa2b 	bl	80823b0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080f5a:	a801      	add	r0, sp, #4
 8080f5c:	f7ff ffd2 	bl	8080f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8080f60:	4620      	mov	r0, r4
 8080f62:	b003      	add	sp, #12
 8080f64:	bd30      	pop	{r4, r5, pc}

08080f66 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 8080f66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080f68:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 8080f6a:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080f6c:	f851 3b04 	ldr.w	r3, [r1], #4
 8080f70:	a801      	add	r0, sp, #4
 8080f72:	9300      	str	r3, [sp, #0]
 8080f74:	f7ff ffdc 	bl	8080f30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8080f78:	466a      	mov	r2, sp
 8080f7a:	4629      	mov	r1, r5
 8080f7c:	4620      	mov	r0, r4
 8080f7e:	f001 fa93 	bl	80824a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 8080f82:	a801      	add	r0, sp, #4
 8080f84:	f7ff ffbe 	bl	8080f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8080f88:	4620      	mov	r0, r4
 8080f8a:	b003      	add	sp, #12
 8080f8c:	bd30      	pop	{r4, r5, pc}

08080f8e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 8080f8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080f90:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 8080f92:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080f94:	f851 3b04 	ldr.w	r3, [r1], #4
 8080f98:	a801      	add	r0, sp, #4
 8080f9a:	9300      	str	r3, [sp, #0]
 8080f9c:	f7ff ffc8 	bl	8080f30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8080fa0:	466a      	mov	r2, sp
 8080fa2:	4629      	mov	r1, r5
 8080fa4:	4620      	mov	r0, r4
 8080fa6:	f001 fa5b 	bl	8082460 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 8080faa:	a801      	add	r0, sp, #4
 8080fac:	f7ff ffaa 	bl	8080f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8080fb0:	4620      	mov	r0, r4
 8080fb2:	b003      	add	sp, #12
 8080fb4:	bd30      	pop	{r4, r5, pc}
	...

08080fb8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 8080fb8:	b570      	push	{r4, r5, r6, lr}
 8080fba:	b08a      	sub	sp, #40	; 0x28
 8080fbc:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 8080fbe:	4601      	mov	r1, r0
 8080fc0:	a804      	add	r0, sp, #16
 8080fc2:	f7ff ffd0 	bl	8080f66 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 8080fc6:	4e14      	ldr	r6, [pc, #80]	; (8081018 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 8080fc8:	a804      	add	r0, sp, #16
 8080fca:	f001 fa85 	bl	80824d8 <_ZN5spark18JSONObjectIterator4nextEv>
 8080fce:	b1e8      	cbz	r0, 808100c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 8080fd0:	4668      	mov	r0, sp
 8080fd2:	a904      	add	r1, sp, #16
 8080fd4:	f7ff ffdb 	bl	8080f8e <_ZNK5spark18JSONObjectIterator4nameEv>
 8080fd8:	4631      	mov	r1, r6
 8080fda:	9802      	ldr	r0, [sp, #8]
 8080fdc:	f7ff fe44 	bl	8080c68 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 8080fe0:	4604      	mov	r4, r0
 8080fe2:	b110      	cbz	r0, 8080fea <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 8080fe4:	1e2c      	subs	r4, r5, #0
 8080fe6:	bf18      	it	ne
 8080fe8:	2401      	movne	r4, #1
 8080fea:	a801      	add	r0, sp, #4
 8080fec:	f7ff ff8a 	bl	8080f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080ff0:	2c00      	cmp	r4, #0
 8080ff2:	d0e9      	beq.n	8080fc8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 8080ff4:	4668      	mov	r0, sp
 8080ff6:	a904      	add	r1, sp, #16
 8080ff8:	f7ff ffa1 	bl	8080f3e <_ZNK5spark18JSONObjectIterator5valueEv>
 8080ffc:	4668      	mov	r0, sp
 8080ffe:	f001 fa0e 	bl	808241e <_ZNK5spark9JSONValue5toIntEv>
 8081002:	6028      	str	r0, [r5, #0]
 8081004:	a801      	add	r0, sp, #4
 8081006:	f7ff ff7d 	bl	8080f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808100a:	e7dd      	b.n	8080fc8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 808100c:	a805      	add	r0, sp, #20
 808100e:	f7ff ff79 	bl	8080f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8081012:	b00a      	add	sp, #40	; 0x28
 8081014:	bd70      	pop	{r4, r5, r6, pc}
 8081016:	bf00      	nop
 8081018:	08082a2a 	.word	0x08082a2a

0808101c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 808101c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808101e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 8081020:	4919      	ldr	r1, [pc, #100]	; (8081088 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 8081022:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8081024:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 8081026:	f001 fbc2 	bl	80827ae <strcmp>
 808102a:	b948      	cbnz	r0, 8081040 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 808102c:	f000 ff86 	bl	8081f3c <_Z16_fetch_usbserialv>
 8081030:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081034:	f000 ff64 	bl	8081f00 <_ZN9USBSerial5beginEl>
        return &Serial;
 8081038:	f000 ff80 	bl	8081f3c <_Z16_fetch_usbserialv>
}
 808103c:	b003      	add	sp, #12
 808103e:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 8081040:	4620      	mov	r0, r4
 8081042:	4912      	ldr	r1, [pc, #72]	; (808108c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 8081044:	f001 fbb3 	bl	80827ae <strcmp>
 8081048:	b940      	cbnz	r0, 808105c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 808104a:	f000 ffb5 	bl	8081fb8 <_Z17_fetch_usbserial1v>
 808104e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081052:	f000 ff55 	bl	8081f00 <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 8081056:	f000 ffaf 	bl	8081fb8 <_Z17_fetch_usbserial1v>
 808105a:	e7ef      	b.n	808103c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 808105c:	4620      	mov	r0, r4
 808105e:	490c      	ldr	r1, [pc, #48]	; (8081090 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 8081060:	f001 fba5 	bl	80827ae <strcmp>
 8081064:	b970      	cbnz	r0, 8081084 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 8081066:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 808106a:	a901      	add	r1, sp, #4
 808106c:	4628      	mov	r0, r5
        int baud = 9600;
 808106e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 8081070:	f7ff ffa2 	bl	8080fb8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 8081074:	f001 f88e 	bl	8082194 <_Z22__fetch_global_Serial1v>
 8081078:	9901      	ldr	r1, [sp, #4]
 808107a:	f001 f885 	bl	8082188 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 808107e:	f001 f889 	bl	8082194 <_Z22__fetch_global_Serial1v>
 8081082:	e7db      	b.n	808103c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 8081084:	2000      	movs	r0, #0
 8081086:	e7d9      	b.n	808103c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 8081088:	08082a2f 	.word	0x08082a2f
 808108c:	08082a36 	.word	0x08082a36
 8081090:	08082a39 	.word	0x08082a39

08081094 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 8081094:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 8081096:	2614      	movs	r6, #20
 8081098:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 808109c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 808109e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80810a2:	42ae      	cmp	r6, r5
 80810a4:	d005      	beq.n	80810b2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 80810a6:	f105 0008 	add.w	r0, r5, #8
 80810aa:	f7ff fff3 	bl	8081094 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80810ae:	3514      	adds	r5, #20
 80810b0:	e7f7      	b.n	80810a2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80810b2:	6820      	ldr	r0, [r4, #0]
 80810b4:	f7ff fbbc 	bl	8080830 <free>
}
 80810b8:	4620      	mov	r0, r4
 80810ba:	bd70      	pop	{r4, r5, r6, pc}

080810bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80810bc:	b570      	push	{r4, r5, r6, lr}
 80810be:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80810c0:	e9d0 5300 	ldrd	r5, r3, [r0]
 80810c4:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 80810c8:	42ae      	cmp	r6, r5
 80810ca:	d004      	beq.n	80810d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80810cc:	4628      	mov	r0, r5
 80810ce:	f7ff fc87 	bl	80809e0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 80810d2:	3510      	adds	r5, #16
 80810d4:	e7f8      	b.n	80810c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 80810d6:	6820      	ldr	r0, [r4, #0]
 80810d8:	f7ff fbaa 	bl	8080830 <free>
}
 80810dc:	4620      	mov	r0, r4
 80810de:	bd70      	pop	{r4, r5, r6, pc}

080810e0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 80810e0:	b510      	push	{r4, lr}
 80810e2:	4604      	mov	r4, r0
 80810e4:	300c      	adds	r0, #12
 80810e6:	f7ff ffd5 	bl	8081094 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80810ea:	4620      	mov	r0, r4
 80810ec:	f7ff ffe6 	bl	80810bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80810f0:	4620      	mov	r0, r4
 80810f2:	bd10      	pop	{r4, pc}

080810f4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 80810f4:	b510      	push	{r4, lr}
 80810f6:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 80810f8:	4b03      	ldr	r3, [pc, #12]	; (8081108 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80810fa:	f840 3b04 	str.w	r3, [r0], #4
 80810fe:	f7ff ffef 	bl	80810e0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 8081102:	4620      	mov	r0, r4
 8081104:	bd10      	pop	{r4, pc}
 8081106:	bf00      	nop
 8081108:	080829d4 	.word	0x080829d4

0808110c <_ZN5spark16StreamLogHandlerD0Ev>:
 808110c:	b510      	push	{r4, lr}
 808110e:	4604      	mov	r4, r0
 8081110:	f7ff fff0 	bl	80810f4 <_ZN5spark16StreamLogHandlerD1Ev>
 8081114:	4620      	mov	r0, r4
 8081116:	2124      	movs	r1, #36	; 0x24
 8081118:	f001 facb 	bl	80826b2 <_ZdlPvj>
 808111c:	4620      	mov	r0, r4
 808111e:	bd10      	pop	{r4, pc}

08081120 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 8081120:	b510      	push	{r4, lr}
 8081122:	4604      	mov	r4, r0
 8081124:	4b02      	ldr	r3, [pc, #8]	; (8081130 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 8081126:	6003      	str	r3, [r0, #0]
 8081128:	f7ff ffe4 	bl	80810f4 <_ZN5spark16StreamLogHandlerD1Ev>
 808112c:	4620      	mov	r0, r4
 808112e:	bd10      	pop	{r4, pc}
 8081130:	08082adc 	.word	0x08082adc

08081134 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 8081134:	b510      	push	{r4, lr}
 8081136:	4604      	mov	r4, r0
 8081138:	f7ff fff2 	bl	8081120 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 808113c:	4620      	mov	r0, r4
 808113e:	2124      	movs	r1, #36	; 0x24
 8081140:	f001 fab7 	bl	80826b2 <_ZdlPvj>
 8081144:	4620      	mov	r0, r4
 8081146:	bd10      	pop	{r4, pc}

08081148 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 8081148:	2200      	movs	r2, #0
 808114a:	e9c0 2200 	strd	r2, r2, [r0]
 808114e:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 8081150:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 8081152:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8081154:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081156:	6004      	str	r4, [r0, #0]
 8081158:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808115a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 808115c:	6044      	str	r4, [r0, #4]
 808115e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081160:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 8081162:	6084      	str	r4, [r0, #8]
}
 8081164:	bd10      	pop	{r4, pc}

08081166 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8081166:	b510      	push	{r4, lr}
 8081168:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 808116a:	6803      	ldr	r3, [r0, #0]
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 808116c:	6818      	ldr	r0, [r3, #0]
 808116e:	f7ff f9e9 	bl	8080544 <os_mutex_recursive_unlock>
 8081172:	4620      	mov	r0, r4
 8081174:	bd10      	pop	{r4, pc}
	...

08081178 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 8081178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808117c:	b087      	sub	sp, #28
 808117e:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8081180:	4b1c      	ldr	r3, [pc, #112]	; (80811f4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 8081182:	4680      	mov	r8, r0
 8081184:	685b      	ldr	r3, [r3, #4]
 8081186:	4689      	mov	r9, r1
 8081188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 808118c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 808118e:	b96b      	cbnz	r3, 80811ac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 8081190:	f7ff fe86 	bl	8080ea0 <_ZN5spark10LogManager8instanceEv>
 8081194:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8081196:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 808119a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808119c:	9305      	str	r3, [sp, #20]
 808119e:	f7ff f9c9 	bl	8080534 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 80811a2:	7b23      	ldrb	r3, [r4, #12]
 80811a4:	b12b      	cbz	r3, 80811b2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 80811a6:	a805      	add	r0, sp, #20
 80811a8:	f7ff ffdd 	bl	8081166 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80811ac:	b007      	add	sp, #28
 80811ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80811b2:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 80811b4:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 80811b8:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 80811ba:	e9d4 5300 	ldrd	r5, r3, [r4]
 80811be:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80811c2:	45aa      	cmp	sl, r5
 80811c4:	d012      	beq.n	80811ec <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 80811c6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 80811ca:	4631      	mov	r1, r6
 80811cc:	1d38      	adds	r0, r7, #4
 80811ce:	f7ff fdeb 	bl	8080da8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80811d2:	4581      	cmp	r9, r0
 80811d4:	d3f5      	bcc.n	80811c2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 80811d6:	9a03      	ldr	r2, [sp, #12]
 80811d8:	683b      	ldr	r3, [r7, #0]
 80811da:	9200      	str	r2, [sp, #0]
 80811dc:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80811e0:	464a      	mov	r2, r9
 80811e2:	4633      	mov	r3, r6
 80811e4:	4641      	mov	r1, r8
 80811e6:	4638      	mov	r0, r7
 80811e8:	47d8      	blx	fp
 80811ea:	e7ea      	b.n	80811c2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 80811ec:	2300      	movs	r3, #0
 80811ee:	7323      	strb	r3, [r4, #12]
 80811f0:	e7d9      	b.n	80811a6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 80811f2:	bf00      	nop
 80811f4:	e000ed00 	.word	0xe000ed00

080811f8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80811f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80811fc:	469b      	mov	fp, r3
 80811fe:	4b1a      	ldr	r3, [pc, #104]	; (8081268 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 8081200:	4680      	mov	r8, r0
 8081202:	685b      	ldr	r3, [r3, #4]
 8081204:	4689      	mov	r9, r1
 8081206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 808120a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 808120c:	b96b      	cbnz	r3, 808122a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 808120e:	f7ff fe47 	bl	8080ea0 <_ZN5spark10LogManager8instanceEv>
 8081212:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8081214:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8081218:	6a40      	ldr	r0, [r0, #36]	; 0x24
 808121a:	9301      	str	r3, [sp, #4]
 808121c:	f7ff f98a 	bl	8080534 <os_mutex_recursive_lock>
        if (that->isActive()) {
 8081220:	7b23      	ldrb	r3, [r4, #12]
 8081222:	b12b      	cbz	r3, 8081230 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 8081224:	a801      	add	r0, sp, #4
 8081226:	f7ff ff9e 	bl	8081166 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 808122a:	b003      	add	sp, #12
 808122c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 8081230:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 8081232:	b2f6      	uxtb	r6, r6
 8081234:	7323      	strb	r3, [r4, #12]
 8081236:	e9d4 5300 	ldrd	r5, r3, [r4]
 808123a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 808123e:	4555      	cmp	r5, sl
 8081240:	d00e      	beq.n	8081260 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 8081242:	f855 7b04 	ldr.w	r7, [r5], #4
 8081246:	4659      	mov	r1, fp
 8081248:	1d38      	adds	r0, r7, #4
 808124a:	f7ff fdad 	bl	8080da8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 808124e:	4286      	cmp	r6, r0
 8081250:	d3f5      	bcc.n	808123e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 8081252:	683b      	ldr	r3, [r7, #0]
 8081254:	464a      	mov	r2, r9
 8081256:	4641      	mov	r1, r8
 8081258:	4638      	mov	r0, r7
 808125a:	68db      	ldr	r3, [r3, #12]
 808125c:	4798      	blx	r3
 808125e:	e7ee      	b.n	808123e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 8081260:	2300      	movs	r3, #0
 8081262:	7323      	strb	r3, [r4, #12]
 8081264:	e7de      	b.n	8081224 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 8081266:	bf00      	nop
 8081268:	e000ed00 	.word	0xe000ed00

0808126c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 808126c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8081270:	4b16      	ldr	r3, [pc, #88]	; (80812cc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 8081272:	4605      	mov	r5, r0
 8081274:	685b      	ldr	r3, [r3, #4]
 8081276:	460f      	mov	r7, r1
 8081278:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 808127c:	bb1b      	cbnz	r3, 80812c6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 808127e:	f7ff fe0f 	bl	8080ea0 <_ZN5spark10LogManager8instanceEv>
 8081282:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8081284:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8081288:	6a40      	ldr	r0, [r0, #36]	; 0x24
 808128a:	9301      	str	r3, [sp, #4]
 808128c:	f7ff f952 	bl	8080534 <os_mutex_recursive_lock>
 8081290:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 8081294:	2446      	movs	r4, #70	; 0x46
 8081296:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 808129a:	45b0      	cmp	r8, r6
 808129c:	d109      	bne.n	80812b2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 808129e:	a801      	add	r0, sp, #4
 80812a0:	f7ff ff61 	bl	8081166 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 80812a4:	42a5      	cmp	r5, r4
 80812a6:	bfb4      	ite	lt
 80812a8:	2000      	movlt	r0, #0
 80812aa:	2001      	movge	r0, #1
}
 80812ac:	b002      	add	sp, #8
 80812ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 80812b2:	f856 0b04 	ldr.w	r0, [r6], #4
 80812b6:	4639      	mov	r1, r7
 80812b8:	3004      	adds	r0, #4
 80812ba:	f7ff fd75 	bl	8080da8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 80812be:	4284      	cmp	r4, r0
 80812c0:	bfa8      	it	ge
 80812c2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 80812c4:	e7e9      	b.n	808129a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 80812c6:	2000      	movs	r0, #0
 80812c8:	e7f0      	b.n	80812ac <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 80812ca:	bf00      	nop
 80812cc:	e000ed00 	.word	0xe000ed00

080812d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80812d0:	460b      	mov	r3, r1
 80812d2:	b570      	push	{r4, r5, r6, lr}
 80812d4:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80812d6:	c805      	ldmia	r0, {r0, r2}
 80812d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 80812dc:	4282      	cmp	r2, r0
 80812de:	d007      	beq.n	80812f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 80812e0:	4601      	mov	r1, r0
            if (*p == value) {
 80812e2:	681d      	ldr	r5, [r3, #0]
 80812e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80812e8:	42ae      	cmp	r6, r5
 80812ea:	d003      	beq.n	80812f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 80812ec:	4608      	mov	r0, r1
 80812ee:	e7f5      	b.n	80812dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 80812f0:	2000      	movs	r0, #0
}
 80812f2:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 80812f4:	1a52      	subs	r2, r2, r1
 80812f6:	f001 f9fd 	bl	80826f4 <memmove>
    --size_;
 80812fa:	6863      	ldr	r3, [r4, #4]
    return true;
 80812fc:	2001      	movs	r0, #1
    --size_;
 80812fe:	3b01      	subs	r3, #1
 8081300:	6063      	str	r3, [r4, #4]
    return true;
 8081302:	e7f6      	b.n	80812f2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

08081304 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 8081304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8081306:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 8081308:	f100 0324 	add.w	r3, r0, #36	; 0x24
 808130c:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 808130e:	9101      	str	r1, [sp, #4]
 8081310:	9303      	str	r3, [sp, #12]
 8081312:	f7ff f90f 	bl	8080534 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 8081316:	4620      	mov	r0, r4
 8081318:	a901      	add	r1, sp, #4
 808131a:	f7ff ffd9 	bl	80812d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 808131e:	b118      	cbz	r0, 8081328 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 8081320:	6863      	ldr	r3, [r4, #4]
 8081322:	b90b      	cbnz	r3, 8081328 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 8081324:	f7ff fde8 	bl	8080ef8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 8081328:	a803      	add	r0, sp, #12
 808132a:	f7ff ff1c 	bl	8081166 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 808132e:	b004      	add	sp, #16
 8081330:	bd10      	pop	{r4, pc}

08081332 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 8081332:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 8081334:	b570      	push	{r4, r5, r6, lr}
 8081336:	4604      	mov	r4, r0
 8081338:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 808133c:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 8081340:	42ae      	cmp	r6, r5
 8081342:	d015      	beq.n	8081370 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 8081344:	4620      	mov	r0, r4
 8081346:	f105 0110 	add.w	r1, r5, #16
 808134a:	f7ff ffc1 	bl	80812d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 808134e:	6863      	ldr	r3, [r4, #4]
 8081350:	b90b      	cbnz	r3, 8081356 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 8081352:	f7ff fdd1 	bl	8080ef8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 8081356:	69e0      	ldr	r0, [r4, #28]
 8081358:	6929      	ldr	r1, [r5, #16]
 808135a:	6803      	ldr	r3, [r0, #0]
 808135c:	68db      	ldr	r3, [r3, #12]
 808135e:	4798      	blx	r3
        if (h.stream) {
 8081360:	6969      	ldr	r1, [r5, #20]
 8081362:	b119      	cbz	r1, 808136c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 8081364:	6a20      	ldr	r0, [r4, #32]
 8081366:	6803      	ldr	r3, [r0, #0]
 8081368:	68db      	ldr	r3, [r3, #12]
 808136a:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 808136c:	3518      	adds	r5, #24
 808136e:	e7e7      	b.n	8081340 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 8081370:	2618      	movs	r6, #24
 8081372:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 8081376:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 808137a:	42ae      	cmp	r6, r5
 808137c:	d004      	beq.n	8081388 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 808137e:	4628      	mov	r0, r5
 8081380:	f7ff fb2e 	bl	80809e0 <_ZN6StringD1Ev>
 8081384:	3518      	adds	r5, #24
 8081386:	e7f8      	b.n	808137a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 8081388:	2300      	movs	r3, #0
 808138a:	6163      	str	r3, [r4, #20]
}
 808138c:	bd70      	pop	{r4, r5, r6, pc}

0808138e <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 808138e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8081390:	4604      	mov	r4, r0
    resetSystemCallbacks();
 8081392:	f7ff fdb1 	bl	8080ef8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 8081396:	f104 0324 	add.w	r3, r4, #36	; 0x24
 808139a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 808139c:	9301      	str	r3, [sp, #4]
 808139e:	f7ff f8c9 	bl	8080534 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 80813a2:	4620      	mov	r0, r4
 80813a4:	f7ff ffc5 	bl	8081332 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 80813a8:	a801      	add	r0, sp, #4
 80813aa:	f7ff fedc 	bl	8081166 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 80813ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80813b0:	b108      	cbz	r0, 80813b6 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 80813b2:	f7ff f8b7 	bl	8080524 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 80813b6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80813ba:	2618      	movs	r6, #24
 80813bc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80813c0:	42ae      	cmp	r6, r5
 80813c2:	d004      	beq.n	80813ce <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 80813c4:	4628      	mov	r0, r5
 80813c6:	f7ff fb0b 	bl	80809e0 <_ZN6StringD1Ev>
 80813ca:	3518      	adds	r5, #24
 80813cc:	e7f8      	b.n	80813c0 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 80813ce:	6920      	ldr	r0, [r4, #16]
 80813d0:	f7ff fa2e 	bl	8080830 <free>
 80813d4:	6820      	ldr	r0, [r4, #0]
 80813d6:	f7ff fa2b 	bl	8080830 <free>
}
 80813da:	4620      	mov	r0, r4
 80813dc:	b002      	add	sp, #8
 80813de:	bd70      	pop	{r4, r5, r6, pc}

080813e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 80813e0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80813e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80813e4:	4606      	mov	r6, r0
 80813e6:	460c      	mov	r4, r1
 80813e8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80813ea:	d927      	bls.n	808143c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 80813ec:	4290      	cmp	r0, r2
 80813ee:	d226      	bcs.n	808143e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 80813f0:	2600      	movs	r6, #0
            --end;
 80813f2:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80813f6:	1a6c      	subs	r4, r5, r1
 80813f8:	f1a1 0714 	sub.w	r7, r1, #20
 80813fc:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80813fe:	42af      	cmp	r7, r5
 8081400:	d03d      	beq.n	808147e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 8081402:	b1a4      	cbz	r4, 808142e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 8081404:	682b      	ldr	r3, [r5, #0]
 8081406:	6023      	str	r3, [r4, #0]
 8081408:	88ab      	ldrh	r3, [r5, #4]
 808140a:	80a3      	strh	r3, [r4, #4]
 808140c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 8081410:	e9c4 6602 	strd	r6, r6, [r4, #8]
 8081414:	6126      	str	r6, [r4, #16]
 8081416:	80e3      	strh	r3, [r4, #6]
 8081418:	68ab      	ldr	r3, [r5, #8]
 808141a:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808141c:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808141e:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081420:	68ea      	ldr	r2, [r5, #12]
 8081422:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8081424:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081426:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081428:	692a      	ldr	r2, [r5, #16]
 808142a:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 808142c:	612b      	str	r3, [r5, #16]
 808142e:	f105 0008 	add.w	r0, r5, #8
 8081432:	f7ff fe2f 	bl	8081094 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 8081436:	3d14      	subs	r5, #20
 8081438:	3c14      	subs	r4, #20
 808143a:	e7e0      	b.n	80813fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 808143c:	d01f      	beq.n	808147e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 808143e:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 8081440:	42ac      	cmp	r4, r5
 8081442:	d01c      	beq.n	808147e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 8081444:	b1a6      	cbz	r6, 8081470 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 8081446:	6823      	ldr	r3, [r4, #0]
 8081448:	6033      	str	r3, [r6, #0]
 808144a:	88a3      	ldrh	r3, [r4, #4]
 808144c:	80b3      	strh	r3, [r6, #4]
 808144e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 8081452:	e9c6 7702 	strd	r7, r7, [r6, #8]
 8081456:	6137      	str	r7, [r6, #16]
 8081458:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 808145a:	68a3      	ldr	r3, [r4, #8]
 808145c:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808145e:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081460:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081462:	68e2      	ldr	r2, [r4, #12]
 8081464:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8081466:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081468:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 808146a:	6922      	ldr	r2, [r4, #16]
 808146c:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 808146e:	6123      	str	r3, [r4, #16]
 8081470:	f104 0008 	add.w	r0, r4, #8
 8081474:	f7ff fe0e 	bl	8081094 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 8081478:	3414      	adds	r4, #20
 808147a:	3614      	adds	r6, #20
 808147c:	e7e0      	b.n	8081440 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 808147e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081480 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 8081480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8081482:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 8081486:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 8081488:	4604      	mov	r4, r0
 808148a:	460e      	mov	r6, r1
 808148c:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 808148e:	db0d      	blt.n	80814ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 8081490:	3501      	adds	r5, #1
        if (n > 0) {
 8081492:	2d00      	cmp	r5, #0
 8081494:	6800      	ldr	r0, [r0, #0]
 8081496:	dd04      	ble.n	80814a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 8081498:	00a9      	lsls	r1, r5, #2
 808149a:	f7ff f9d1 	bl	8080840 <realloc>
            if (!d) {
 808149e:	b918      	cbnz	r0, 80814a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 80814a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 80814a2:	f7ff f9c5 	bl	8080830 <free>
        T* d = nullptr;
 80814a6:	2000      	movs	r0, #0
        data_ = d;
 80814a8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80814aa:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 80814ac:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 80814ae:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 80814b0:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 80814b4:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 80814b6:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 80814ba:	1d08      	adds	r0, r1, #4
 80814bc:	f001 f91a 	bl	80826f4 <memmove>
    new(p) T(std::move(value));
 80814c0:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 80814c4:	6863      	ldr	r3, [r4, #4]
    return true;
 80814c6:	2001      	movs	r0, #1
    ++size_;
 80814c8:	3301      	adds	r3, #1
 80814ca:	6063      	str	r3, [r4, #4]
    return true;
 80814cc:	e7e8      	b.n	80814a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

080814ce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 80814ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80814d0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80814d2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80814d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 80814d8:	460d      	mov	r5, r1
 80814da:	9301      	str	r3, [sp, #4]
 80814dc:	f7ff f82a 	bl	8080534 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 80814e0:	e9d4 3100 	ldrd	r3, r1, [r4]
 80814e4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 80814e8:	4283      	cmp	r3, r0
 80814ea:	461a      	mov	r2, r3
 80814ec:	d00a      	beq.n	8081504 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 80814ee:	6812      	ldr	r2, [r2, #0]
 80814f0:	3304      	adds	r3, #4
 80814f2:	42aa      	cmp	r2, r5
 80814f4:	d1f8      	bne.n	80814e8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 80814f6:	a801      	add	r0, sp, #4
 80814f8:	f7ff fe35 	bl	8081166 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 80814fc:	2500      	movs	r5, #0
}
 80814fe:	4628      	mov	r0, r5
 8081500:	b003      	add	sp, #12
 8081502:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 8081504:	462a      	mov	r2, r5
 8081506:	4620      	mov	r0, r4
 8081508:	f7ff ffba 	bl	8081480 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 808150c:	4605      	mov	r5, r0
 808150e:	2800      	cmp	r0, #0
 8081510:	d0f1      	beq.n	80814f6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 8081512:	6863      	ldr	r3, [r4, #4]
 8081514:	2b01      	cmp	r3, #1
 8081516:	d101      	bne.n	808151c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 8081518:	f7ff fce2 	bl	8080ee0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 808151c:	a801      	add	r0, sp, #4
 808151e:	f7ff fe22 	bl	8081166 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 8081522:	e7ec      	b.n	80814fe <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

08081524 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 8081524:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 8081526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081528:	4604      	mov	r4, r0
 808152a:	460d      	mov	r5, r1
 808152c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 808152e:	d914      	bls.n	808155a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 8081530:	4290      	cmp	r0, r2
 8081532:	d213      	bcs.n	808155c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 8081534:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 8081538:	1a75      	subs	r5, r6, r1
 808153a:	f1a1 0710 	sub.w	r7, r1, #16
 808153e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 8081540:	42b7      	cmp	r7, r6
 8081542:	d018      	beq.n	8081576 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 8081544:	b11c      	cbz	r4, 808154e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 8081546:	4631      	mov	r1, r6
 8081548:	4620      	mov	r0, r4
 808154a:	f7ff fab0 	bl	8080aae <_ZN6StringC1EOS_>
                end->~T();
 808154e:	4630      	mov	r0, r6
 8081550:	f7ff fa46 	bl	80809e0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 8081554:	3e10      	subs	r6, #16
 8081556:	3c10      	subs	r4, #16
 8081558:	e7f2      	b.n	8081540 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 808155a:	d00c      	beq.n	8081576 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 808155c:	42b5      	cmp	r5, r6
 808155e:	d00a      	beq.n	8081576 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 8081560:	b11c      	cbz	r4, 808156a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 8081562:	4629      	mov	r1, r5
 8081564:	4620      	mov	r0, r4
 8081566:	f7ff faa2 	bl	8080aae <_ZN6StringC1EOS_>
                p->~T();
 808156a:	4628      	mov	r0, r5
 808156c:	f7ff fa38 	bl	80809e0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 8081570:	3510      	adds	r5, #16
 8081572:	3410      	adds	r4, #16
 8081574:	e7f2      	b.n	808155c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 8081576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081578 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 8081578:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 808157a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 808157c:	4605      	mov	r5, r0
        if (n > 0) {
 808157e:	dd11      	ble.n	80815a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 8081580:	0130      	lsls	r0, r6, #4
 8081582:	f7ff f94d 	bl	8080820 <malloc>
            if (!d) {
 8081586:	4604      	mov	r4, r0
 8081588:	b158      	cbz	r0, 80815a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 808158a:	e9d5 1200 	ldrd	r1, r2, [r5]
 808158e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8081592:	f7ff ffc7 	bl	8081524 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 8081596:	6828      	ldr	r0, [r5, #0]
 8081598:	f7ff f94a 	bl	8080830 <free>
        return true;
 808159c:	2001      	movs	r0, #1
        data_ = d;
 808159e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80815a0:	60ae      	str	r6, [r5, #8]
    }
 80815a2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 80815a4:	2400      	movs	r4, #0
 80815a6:	e7f6      	b.n	8081596 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

080815a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80815a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80815ac:	4691      	mov	r9, r2
        capacity_(0) {
 80815ae:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80815b0:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80815b2:	b097      	sub	sp, #92	; 0x5c
 80815b4:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 80815b6:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80815ba:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 80815bc:	4299      	cmp	r1, r3
        capacity_(0) {
 80815be:	e9c0 3300 	strd	r3, r3, [r0]
 80815c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80815c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80815ca:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80815ce:	7602      	strb	r2, [r0, #24]
 80815d0:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 80815d2:	dc23      	bgt.n	808161c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 80815d4:	e9d9 5700 	ldrd	r5, r7, [r9]
 80815d8:	2314      	movs	r3, #20
 80815da:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 80815de:	42af      	cmp	r7, r5
 80815e0:	d03b      	beq.n	808165a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 80815e2:	4629      	mov	r1, r5
 80815e4:	a80d      	add	r0, sp, #52	; 0x34
 80815e6:	f7ff fa62 	bl	8080aae <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 80815ea:	a90d      	add	r1, sp, #52	; 0x34
 80815ec:	a811      	add	r0, sp, #68	; 0x44
 80815ee:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80815f0:	f7ff fa5d 	bl	8080aae <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80815f4:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 80815f8:	4299      	cmp	r1, r3
 80815fa:	da1b      	bge.n	8081634 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 80815fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 80815fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 8081600:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 8081604:	4631      	mov	r1, r6
 8081606:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 808160a:	f106 0010 	add.w	r0, r6, #16
 808160e:	f7ff ff89 	bl	8081524 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 8081612:	b9ee      	cbnz	r6, 8081650 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 8081614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8081616:	3301      	adds	r3, #1
 8081618:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 808161a:	e011      	b.n	8081640 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 808161c:	a80a      	add	r0, sp, #40	; 0x28
 808161e:	f7ff ffab 	bl	8081578 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 8081622:	2800      	cmp	r0, #0
 8081624:	d1d6      	bne.n	80815d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 8081626:	a80a      	add	r0, sp, #40	; 0x28
 8081628:	f7ff fd48 	bl	80810bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 808162c:	4620      	mov	r0, r4
 808162e:	b017      	add	sp, #92	; 0x5c
 8081630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8081634:	3101      	adds	r1, #1
 8081636:	a80a      	add	r0, sp, #40	; 0x28
 8081638:	f7ff ff9e 	bl	8081578 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 808163c:	2800      	cmp	r0, #0
 808163e:	d1dd      	bne.n	80815fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 8081640:	a811      	add	r0, sp, #68	; 0x44
 8081642:	f7ff f9cd 	bl	80809e0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 8081646:	a80d      	add	r0, sp, #52	; 0x34
 8081648:	f7ff f9ca 	bl	80809e0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 808164c:	3514      	adds	r5, #20
 808164e:	e7c6      	b.n	80815de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 8081650:	4630      	mov	r0, r6
 8081652:	a911      	add	r1, sp, #68	; 0x44
 8081654:	f7ff fa2b 	bl	8080aae <_ZN6StringC1EOS_>
 8081658:	e7dc      	b.n	8081614 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 808165a:	2600      	movs	r6, #0
 808165c:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 8081660:	4637      	mov	r7, r6
 8081662:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 8081666:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 8081668:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808166c:	429e      	cmp	r6, r3
 808166e:	f280 8097 	bge.w	80817a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 8081672:	0133      	lsls	r3, r6, #4
 8081674:	58d3      	ldr	r3, [r2, r3]
 8081676:	9308      	str	r3, [sp, #32]
        if (!category) {
 8081678:	b90b      	cbnz	r3, 808167e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 808167a:	3601      	adds	r6, #1
 808167c:	e7f4      	b.n	8081668 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 808167e:	fb0a f306 	mul.w	r3, sl, r6
 8081682:	9709      	str	r7, [sp, #36]	; 0x24
 8081684:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 8081686:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 8081688:	a909      	add	r1, sp, #36	; 0x24
 808168a:	a808      	add	r0, sp, #32
 808168c:	f7ff fac5 	bl	8080c1a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8081690:	4683      	mov	fp, r0
 8081692:	2800      	cmp	r0, #0
 8081694:	d0f1      	beq.n	808167a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 8081696:	4601      	mov	r1, r0
 8081698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808169a:	4628      	mov	r0, r5
 808169c:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 80816a0:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80816a4:	f7ff fb42 	bl	8080d2c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80816a8:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80816ac:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80816ae:	f1b8 0f00 	cmp.w	r8, #0
 80816b2:	d166      	bne.n	8081782 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 80816b4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80816b8:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 80816bc:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 80816c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80816c4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80816c8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80816cc:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80816d0:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 80816d4:	4293      	cmp	r3, r2
 80816d6:	db1a      	blt.n	808170e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 80816d8:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 80816dc:	f1bb 0f00 	cmp.w	fp, #0
 80816e0:	dd4a      	ble.n	8081778 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 80816e2:	fb0a f00b 	mul.w	r0, sl, fp
 80816e6:	f7ff f89b 	bl	8080820 <malloc>
            if (!d) {
 80816ea:	9004      	str	r0, [sp, #16]
 80816ec:	2800      	cmp	r0, #0
 80816ee:	d045      	beq.n	808177c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 80816f0:	e9d5 1200 	ldrd	r1, r2, [r5]
 80816f4:	fb0a 1202 	mla	r2, sl, r2, r1
 80816f8:	f7ff fe72 	bl	80813e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80816fc:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 80816fe:	6828      	ldr	r0, [r5, #0]
 8081700:	9304      	str	r3, [sp, #16]
 8081702:	f7ff f895 	bl	8080830 <free>
        data_ = d;
 8081706:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 8081708:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 808170c:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 808170e:	9b01      	ldr	r3, [sp, #4]
 8081710:	f8d5 b000 	ldr.w	fp, [r5]
 8081714:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 8081718:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 808171a:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 808171e:	f101 0014 	add.w	r0, r1, #20
 8081722:	fb0a b202 	mla	r2, sl, r2, fp
 8081726:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 8081728:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 808172a:	f7ff fe59 	bl	80813e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 808172e:	9904      	ldr	r1, [sp, #16]
 8081730:	b1a9      	cbz	r1, 808175e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 8081732:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8081734:	9b05      	ldr	r3, [sp, #20]
 8081736:	f84b 2003 	str.w	r2, [fp, r3]
 808173a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 808173e:	808b      	strh	r3, [r1, #4]
 8081740:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 8081744:	e9c1 7702 	strd	r7, r7, [r1, #8]
 8081748:	610f      	str	r7, [r1, #16]
 808174a:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 808174c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808174e:	608b      	str	r3, [r1, #8]
 8081750:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 8081752:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 8081754:	60cb      	str	r3, [r1, #12]
 8081756:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 8081758:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 808175a:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 808175c:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 808175e:	686b      	ldr	r3, [r5, #4]
 8081760:	3301      	adds	r3, #1
 8081762:	606b      	str	r3, [r5, #4]
 8081764:	a813      	add	r0, sp, #76	; 0x4c
 8081766:	f7ff fc95 	bl	8081094 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 808176a:	f1b8 0f00 	cmp.w	r8, #0
 808176e:	d008      	beq.n	8081782 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 8081770:	a80d      	add	r0, sp, #52	; 0x34
 8081772:	f7ff fc8f 	bl	8081094 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8081776:	e756      	b.n	8081626 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 8081778:	4643      	mov	r3, r8
 808177a:	e7c0      	b.n	80816fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 808177c:	f04f 0801 	mov.w	r8, #1
 8081780:	e7f0      	b.n	8081764 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 8081782:	9b01      	ldr	r3, [sp, #4]
 8081784:	682d      	ldr	r5, [r5, #0]
 8081786:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 808178a:	9b08      	ldr	r3, [sp, #32]
 808178c:	781b      	ldrb	r3, [r3, #0]
 808178e:	b92b      	cbnz	r3, 808179c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 8081790:	f8d9 3000 	ldr.w	r3, [r9]
 8081794:	9a02      	ldr	r2, [sp, #8]
 8081796:	4413      	add	r3, r2
 8081798:	7c1b      	ldrb	r3, [r3, #16]
 808179a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 808179c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 808179e:	e773      	b.n	8081688 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80817a0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80817a2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80817a4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 80817a6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80817a8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80817aa:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 80817ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 80817ae:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80817b0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80817b2:	60a2      	str	r2, [r4, #8]
 80817b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 80817b6:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80817b8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80817ba:	60e2      	str	r2, [r4, #12]
 80817bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 80817be:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80817c0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80817c2:	6122      	str	r2, [r4, #16]
 80817c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 80817c6:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 80817c8:	9b03      	ldr	r3, [sp, #12]
 80817ca:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 80817cc:	6162      	str	r2, [r4, #20]
 80817ce:	7623      	strb	r3, [r4, #24]
 80817d0:	e7ce      	b.n	8081770 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

080817d4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80817d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 80817d6:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80817d8:	460e      	mov	r6, r1
 80817da:	4604      	mov	r4, r0
        filter_(level, filters) {
 80817dc:	4b08      	ldr	r3, [pc, #32]	; (8081800 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 80817de:	4611      	mov	r1, r2
 80817e0:	f845 3b04 	str.w	r3, [r5], #4
 80817e4:	a801      	add	r0, sp, #4
 80817e6:	f7fe fdd0 	bl	808038a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80817ea:	4631      	mov	r1, r6
 80817ec:	aa01      	add	r2, sp, #4
 80817ee:	4628      	mov	r0, r5
 80817f0:	f7ff feda 	bl	80815a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80817f4:	a801      	add	r0, sp, #4
 80817f6:	f7fe fd87 	bl	8080308 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80817fa:	4620      	mov	r0, r4
 80817fc:	b004      	add	sp, #16
 80817fe:	bd70      	pop	{r4, r5, r6, pc}
 8081800:	080829d4 	.word	0x080829d4

08081804 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 8081804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081806:	460f      	mov	r7, r1
 8081808:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 808180a:	4638      	mov	r0, r7
 808180c:	4925      	ldr	r1, [pc, #148]	; (80818a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 808180e:	4616      	mov	r6, r2
 8081810:	461d      	mov	r5, r3
 8081812:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8081814:	f000 ffcb 	bl	80827ae <strcmp>
 8081818:	bb00      	cbnz	r0, 808185c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 808181a:	b1e4      	cbz	r4, 8081856 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 808181c:	4629      	mov	r1, r5
 808181e:	4668      	mov	r0, sp
 8081820:	f7ff fc92 	bl	8081148 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8081824:	2024      	movs	r0, #36	; 0x24
 8081826:	4920      	ldr	r1, [pc, #128]	; (80818a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 8081828:	f000 ff45 	bl	80826b6 <_ZnwjRKSt9nothrow_t>
 808182c:	4605      	mov	r5, r0
 808182e:	b170      	cbz	r0, 808184e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 8081830:	4669      	mov	r1, sp
 8081832:	a803      	add	r0, sp, #12
 8081834:	f7fe fda9 	bl	808038a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8081838:	4631      	mov	r1, r6
 808183a:	aa03      	add	r2, sp, #12
 808183c:	4628      	mov	r0, r5
 808183e:	f7ff ffc9 	bl	80817d4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8081842:	a803      	add	r0, sp, #12
 8081844:	f7fe fd60 	bl	8080308 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 8081848:	4b18      	ldr	r3, [pc, #96]	; (80818ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 808184a:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 808184c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 808184e:	4668      	mov	r0, sp
 8081850:	f7fe fd5a 	bl	8080308 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081854:	462c      	mov	r4, r5
}
 8081856:	4620      	mov	r0, r4
 8081858:	b007      	add	sp, #28
 808185a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 808185c:	4638      	mov	r0, r7
 808185e:	4914      	ldr	r1, [pc, #80]	; (80818b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 8081860:	f000 ffa5 	bl	80827ae <strcmp>
 8081864:	b9e0      	cbnz	r0, 80818a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 8081866:	2c00      	cmp	r4, #0
 8081868:	d0f5      	beq.n	8081856 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 808186a:	4629      	mov	r1, r5
 808186c:	4668      	mov	r0, sp
 808186e:	f7ff fc6b 	bl	8081148 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8081872:	2024      	movs	r0, #36	; 0x24
 8081874:	490c      	ldr	r1, [pc, #48]	; (80818a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 8081876:	f000 ff1e 	bl	80826b6 <_ZnwjRKSt9nothrow_t>
 808187a:	4605      	mov	r5, r0
 808187c:	2800      	cmp	r0, #0
 808187e:	d0e6      	beq.n	808184e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 8081880:	4669      	mov	r1, sp
 8081882:	a803      	add	r0, sp, #12
 8081884:	f7fe fd81 	bl	808038a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8081888:	4631      	mov	r1, r6
 808188a:	aa03      	add	r2, sp, #12
 808188c:	4628      	mov	r0, r5
 808188e:	f7ff ffa1 	bl	80817d4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8081892:	a803      	add	r0, sp, #12
 8081894:	f7fe fd38 	bl	8080308 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081898:	4b06      	ldr	r3, [pc, #24]	; (80818b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 808189a:	622c      	str	r4, [r5, #32]
 808189c:	602b      	str	r3, [r5, #0]
}
 808189e:	e7d6      	b.n	808184e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 80818a0:	2400      	movs	r4, #0
 80818a2:	e7d8      	b.n	8081856 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 80818a4:	08082a41 	.word	0x08082a41
 80818a8:	08082c1d 	.word	0x08082c1d
 80818ac:	08082adc 	.word	0x08082adc
 80818b0:	08082a45 	.word	0x08082a45
 80818b4:	08082ac4 	.word	0x08082ac4

080818b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 80818b8:	4b01      	ldr	r3, [pc, #4]	; (80818c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80818ba:	4a02      	ldr	r2, [pc, #8]	; (80818c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80818bc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80818be:	4770      	bx	lr
 80818c0:	200000d0 	.word	0x200000d0
 80818c4:	08082a56 	.word	0x08082a56

080818c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80818c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80818cc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 80818ce:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80818d2:	4604      	mov	r4, r0
 80818d4:	460e      	mov	r6, r1
 80818d6:	4617      	mov	r7, r2
 80818d8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 80818da:	f000 fb2f 	bl	8081f3c <_Z16_fetch_usbserialv>
 80818de:	4581      	cmp	r9, r0
 80818e0:	d04d      	beq.n	808197e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 80818e2:	792b      	ldrb	r3, [r5, #4]
 80818e4:	0719      	lsls	r1, r3, #28
 80818e6:	d504      	bpl.n	80818f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 80818e8:	4620      	mov	r0, r4
 80818ea:	696a      	ldr	r2, [r5, #20]
 80818ec:	4954      	ldr	r1, [pc, #336]	; (8081a40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 80818ee:	f7ff fa0e 	bl	8080d0e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 80818f2:	f1b8 0f00 	cmp.w	r8, #0
 80818f6:	d00d      	beq.n	8081914 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 80818f8:	215b      	movs	r1, #91	; 0x5b
 80818fa:	4620      	mov	r0, r4
 80818fc:	f7ff f9fb 	bl	8080cf6 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 8081900:	4641      	mov	r1, r8
 8081902:	4620      	mov	r0, r4
 8081904:	f7ff f9e9 	bl	8080cda <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 8081908:	6823      	ldr	r3, [r4, #0]
 808190a:	2202      	movs	r2, #2
 808190c:	4620      	mov	r0, r4
 808190e:	68db      	ldr	r3, [r3, #12]
 8081910:	494c      	ldr	r1, [pc, #304]	; (8081a44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 8081912:	4798      	blx	r3
    if (attr.has_file) {
 8081914:	792b      	ldrb	r3, [r5, #4]
 8081916:	07da      	lsls	r2, r3, #31
 8081918:	d524      	bpl.n	8081964 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 808191a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 808191e:	212f      	movs	r1, #47	; 0x2f
 8081920:	4640      	mov	r0, r8
 8081922:	f000 ff70 	bl	8082806 <strrchr>
    if (s1) {
 8081926:	b108      	cbz	r0, 808192c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 8081928:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 808192c:	4641      	mov	r1, r8
 808192e:	4620      	mov	r0, r4
 8081930:	f7ff f9d3 	bl	8080cda <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 8081934:	792b      	ldrb	r3, [r5, #4]
 8081936:	079b      	lsls	r3, r3, #30
 8081938:	d508      	bpl.n	808194c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 808193a:	213a      	movs	r1, #58	; 0x3a
 808193c:	4620      	mov	r0, r4
 808193e:	f7ff f9da 	bl	8080cf6 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 8081942:	4620      	mov	r0, r4
 8081944:	68ea      	ldr	r2, [r5, #12]
 8081946:	4940      	ldr	r1, [pc, #256]	; (8081a48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 8081948:	f7ff f9e1 	bl	8080d0e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 808194c:	792a      	ldrb	r2, [r5, #4]
 808194e:	6823      	ldr	r3, [r4, #0]
 8081950:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 8081954:	4620      	mov	r0, r4
            write(", ", 2);
 8081956:	f04f 0202 	mov.w	r2, #2
 808195a:	68db      	ldr	r3, [r3, #12]
 808195c:	bf14      	ite	ne
 808195e:	493b      	ldrne	r1, [pc, #236]	; (8081a4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 8081960:	493b      	ldreq	r1, [pc, #236]	; (8081a50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 8081962:	4798      	blx	r3
    if (attr.has_function) {
 8081964:	792b      	ldrb	r3, [r5, #4]
 8081966:	0758      	lsls	r0, r3, #29
 8081968:	d51d      	bpl.n	80819a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 808196a:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 808196c:	460b      	mov	r3, r1
 808196e:	461a      	mov	r2, r3
    for (; *s; ++s) {
 8081970:	f813 0b01 	ldrb.w	r0, [r3], #1
 8081974:	b160      	cbz	r0, 8081990 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 8081976:	2820      	cmp	r0, #32
 8081978:	d108      	bne.n	808198c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 808197a:	4619      	mov	r1, r3
 808197c:	e7f7      	b.n	808196e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 808197e:	4835      	ldr	r0, [pc, #212]	; (8081a54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 8081980:	f000 fc5f 	bl	8082242 <_ZN5spark12NetworkClass9listeningEv>
 8081984:	2800      	cmp	r0, #0
 8081986:	d0ac      	beq.n	80818e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 8081988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 808198c:	2828      	cmp	r0, #40	; 0x28
 808198e:	d1ee      	bne.n	808196e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 8081990:	6823      	ldr	r3, [r4, #0]
 8081992:	1a52      	subs	r2, r2, r1
 8081994:	4620      	mov	r0, r4
 8081996:	68db      	ldr	r3, [r3, #12]
 8081998:	4798      	blx	r3
        write("(): ", 4);
 808199a:	6823      	ldr	r3, [r4, #0]
 808199c:	2204      	movs	r2, #4
 808199e:	4620      	mov	r0, r4
 80819a0:	68db      	ldr	r3, [r3, #12]
 80819a2:	492d      	ldr	r1, [pc, #180]	; (8081a58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80819a4:	4798      	blx	r3
    return log_level_name(level, nullptr);
 80819a6:	2100      	movs	r1, #0
 80819a8:	4638      	mov	r0, r7
 80819aa:	f7fe fe7b 	bl	80806a4 <log_level_name>
 80819ae:	4601      	mov	r1, r0
    write(s);
 80819b0:	4620      	mov	r0, r4
 80819b2:	f7ff f992 	bl	8080cda <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80819b6:	6823      	ldr	r3, [r4, #0]
 80819b8:	2202      	movs	r2, #2
 80819ba:	4620      	mov	r0, r4
 80819bc:	68db      	ldr	r3, [r3, #12]
 80819be:	4924      	ldr	r1, [pc, #144]	; (8081a50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80819c0:	4798      	blx	r3
    if (msg) {
 80819c2:	b11e      	cbz	r6, 80819cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 80819c4:	4631      	mov	r1, r6
 80819c6:	4620      	mov	r0, r4
 80819c8:	f7ff f987 	bl	8080cda <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 80819cc:	792b      	ldrb	r3, [r5, #4]
 80819ce:	f013 0f30 	tst.w	r3, #48	; 0x30
 80819d2:	d02c      	beq.n	8081a2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 80819d4:	6823      	ldr	r3, [r4, #0]
 80819d6:	4921      	ldr	r1, [pc, #132]	; (8081a5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80819d8:	68db      	ldr	r3, [r3, #12]
 80819da:	2202      	movs	r2, #2
 80819dc:	4620      	mov	r0, r4
 80819de:	4798      	blx	r3
        if (attr.has_code) {
 80819e0:	792b      	ldrb	r3, [r5, #4]
 80819e2:	06d9      	lsls	r1, r3, #27
 80819e4:	d50a      	bpl.n	80819fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 80819e6:	6823      	ldr	r3, [r4, #0]
 80819e8:	2207      	movs	r2, #7
 80819ea:	4620      	mov	r0, r4
 80819ec:	491c      	ldr	r1, [pc, #112]	; (8081a60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80819ee:	68db      	ldr	r3, [r3, #12]
 80819f0:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 80819f2:	4620      	mov	r0, r4
 80819f4:	69aa      	ldr	r2, [r5, #24]
 80819f6:	491b      	ldr	r1, [pc, #108]	; (8081a64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80819f8:	f7ff f989 	bl	8080d0e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 80819fc:	792b      	ldrb	r3, [r5, #4]
 80819fe:	069a      	lsls	r2, r3, #26
 8081a00:	d511      	bpl.n	8081a26 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 8081a02:	06db      	lsls	r3, r3, #27
 8081a04:	d505      	bpl.n	8081a12 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 8081a06:	6823      	ldr	r3, [r4, #0]
 8081a08:	2202      	movs	r2, #2
 8081a0a:	4620      	mov	r0, r4
 8081a0c:	68db      	ldr	r3, [r3, #12]
 8081a0e:	490f      	ldr	r1, [pc, #60]	; (8081a4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 8081a10:	4798      	blx	r3
            write("details = ", 10);
 8081a12:	6823      	ldr	r3, [r4, #0]
 8081a14:	4620      	mov	r0, r4
 8081a16:	4914      	ldr	r1, [pc, #80]	; (8081a68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 8081a18:	220a      	movs	r2, #10
 8081a1a:	68db      	ldr	r3, [r3, #12]
 8081a1c:	4798      	blx	r3
            write(attr.details);
 8081a1e:	4620      	mov	r0, r4
 8081a20:	69e9      	ldr	r1, [r5, #28]
 8081a22:	f7ff f95a 	bl	8080cda <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 8081a26:	215d      	movs	r1, #93	; 0x5d
 8081a28:	4620      	mov	r0, r4
 8081a2a:	f7ff f964 	bl	8080cf6 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 8081a2e:	6823      	ldr	r3, [r4, #0]
 8081a30:	4620      	mov	r0, r4
}
 8081a32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 8081a36:	2202      	movs	r2, #2
 8081a38:	68db      	ldr	r3, [r3, #12]
 8081a3a:	490c      	ldr	r1, [pc, #48]	; (8081a6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 8081a3c:	4718      	bx	r3
 8081a3e:	bf00      	nop
 8081a40:	08082a5a 	.word	0x08082a5a
 8081a44:	08082a61 	.word	0x08082a61
 8081a48:	080829bd 	.word	0x080829bd
 8081a4c:	08082a64 	.word	0x08082a64
 8081a50:	08082a69 	.word	0x08082a69
 8081a54:	2000059c 	.word	0x2000059c
 8081a58:	08082a67 	.word	0x08082a67
 8081a5c:	08082a6c 	.word	0x08082a6c
 8081a60:	08082a6f 	.word	0x08082a6f
 8081a64:	08082a77 	.word	0x08082a77
 8081a68:	08082a7a 	.word	0x08082a7a
 8081a6c:	08082a85 	.word	0x08082a85

08081a70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8081a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081a74:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 8081a76:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8081a7a:	4605      	mov	r5, r0
 8081a7c:	460f      	mov	r7, r1
 8081a7e:	4690      	mov	r8, r2
 8081a80:	461e      	mov	r6, r3
 8081a82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 8081a84:	f000 fa5a 	bl	8081f3c <_Z16_fetch_usbserialv>
 8081a88:	4581      	cmp	r9, r0
 8081a8a:	d105      	bne.n	8081a98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 8081a8c:	4849      	ldr	r0, [pc, #292]	; (8081bb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 8081a8e:	f000 fbd8 	bl	8082242 <_ZN5spark12NetworkClass9listeningEv>
 8081a92:	2800      	cmp	r0, #0
 8081a94:	f040 808a 	bne.w	8081bac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 8081a98:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 8081a9c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 8081a9e:	4a46      	ldr	r2, [pc, #280]	; (8081bb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 8081aa0:	a801      	add	r0, sp, #4
 8081aa2:	9201      	str	r2, [sp, #4]
 8081aa4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 8081aa6:	f88d 9008 	strb.w	r9, [sp, #8]
 8081aaa:	f000 fd3e 	bl	808252a <_ZN5spark10JSONWriter11beginObjectEv>
 8081aae:	4649      	mov	r1, r9
 8081ab0:	4640      	mov	r0, r8
 8081ab2:	f7fe fdf7 	bl	80806a4 <log_level_name>
 8081ab6:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 8081ab8:	4940      	ldr	r1, [pc, #256]	; (8081bbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 8081aba:	2201      	movs	r2, #1
 8081abc:	a801      	add	r0, sp, #4
 8081abe:	f000 fdbd 	bl	808263c <_ZN5spark10JSONWriter4nameEPKcj>
 8081ac2:	4641      	mov	r1, r8
 8081ac4:	f7ff f8fc 	bl	8080cc0 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 8081ac8:	b13f      	cbz	r7, 8081ada <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 8081aca:	493d      	ldr	r1, [pc, #244]	; (8081bc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 8081acc:	2201      	movs	r2, #1
 8081ace:	a801      	add	r0, sp, #4
 8081ad0:	f000 fdb4 	bl	808263c <_ZN5spark10JSONWriter4nameEPKcj>
 8081ad4:	4639      	mov	r1, r7
 8081ad6:	f7ff f8f3 	bl	8080cc0 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 8081ada:	b13e      	cbz	r6, 8081aec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 8081adc:	4939      	ldr	r1, [pc, #228]	; (8081bc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 8081ade:	2201      	movs	r2, #1
 8081ae0:	a801      	add	r0, sp, #4
 8081ae2:	f000 fdab 	bl	808263c <_ZN5spark10JSONWriter4nameEPKcj>
 8081ae6:	4631      	mov	r1, r6
 8081ae8:	f7ff f8ea 	bl	8080cc0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 8081aec:	7923      	ldrb	r3, [r4, #4]
 8081aee:	07df      	lsls	r7, r3, #31
 8081af0:	d50e      	bpl.n	8081b10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 8081af2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 8081af4:	212f      	movs	r1, #47	; 0x2f
 8081af6:	4630      	mov	r0, r6
 8081af8:	f000 fe85 	bl	8082806 <strrchr>
    if (s1) {
 8081afc:	b100      	cbz	r0, 8081b00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 8081afe:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 8081b00:	4931      	ldr	r1, [pc, #196]	; (8081bc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 8081b02:	2201      	movs	r2, #1
 8081b04:	a801      	add	r0, sp, #4
 8081b06:	f000 fd99 	bl	808263c <_ZN5spark10JSONWriter4nameEPKcj>
 8081b0a:	4631      	mov	r1, r6
 8081b0c:	f7ff f8d8 	bl	8080cc0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 8081b10:	7923      	ldrb	r3, [r4, #4]
 8081b12:	079e      	lsls	r6, r3, #30
 8081b14:	d507      	bpl.n	8081b26 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 8081b16:	492d      	ldr	r1, [pc, #180]	; (8081bcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 8081b18:	2202      	movs	r2, #2
 8081b1a:	a801      	add	r0, sp, #4
 8081b1c:	f000 fd8e 	bl	808263c <_ZN5spark10JSONWriter4nameEPKcj>
 8081b20:	68e1      	ldr	r1, [r4, #12]
 8081b22:	f000 fd0f 	bl	8082544 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 8081b26:	7923      	ldrb	r3, [r4, #4]
 8081b28:	0758      	lsls	r0, r3, #29
 8081b2a:	d514      	bpl.n	8081b56 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 8081b2c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 8081b2e:	4633      	mov	r3, r6
 8081b30:	461f      	mov	r7, r3
    for (; *s; ++s) {
 8081b32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8081b36:	b12a      	cbz	r2, 8081b44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 8081b38:	2a20      	cmp	r2, #32
 8081b3a:	d101      	bne.n	8081b40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 8081b3c:	461e      	mov	r6, r3
 8081b3e:	e7f7      	b.n	8081b30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 8081b40:	2a28      	cmp	r2, #40	; 0x28
 8081b42:	d1f5      	bne.n	8081b30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 8081b44:	2202      	movs	r2, #2
 8081b46:	4922      	ldr	r1, [pc, #136]	; (8081bd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 8081b48:	a801      	add	r0, sp, #4
 8081b4a:	f000 fd77 	bl	808263c <_ZN5spark10JSONWriter4nameEPKcj>
 8081b4e:	4631      	mov	r1, r6
 8081b50:	1bba      	subs	r2, r7, r6
 8081b52:	f000 fd82 	bl	808265a <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 8081b56:	7923      	ldrb	r3, [r4, #4]
 8081b58:	0719      	lsls	r1, r3, #28
 8081b5a:	d507      	bpl.n	8081b6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 8081b5c:	491d      	ldr	r1, [pc, #116]	; (8081bd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 8081b5e:	2201      	movs	r2, #1
 8081b60:	a801      	add	r0, sp, #4
 8081b62:	f000 fd6b 	bl	808263c <_ZN5spark10JSONWriter4nameEPKcj>
 8081b66:	6961      	ldr	r1, [r4, #20]
 8081b68:	f000 fcfe 	bl	8082568 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 8081b6c:	7923      	ldrb	r3, [r4, #4]
 8081b6e:	06da      	lsls	r2, r3, #27
 8081b70:	d508      	bpl.n	8081b84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 8081b72:	2204      	movs	r2, #4
 8081b74:	4918      	ldr	r1, [pc, #96]	; (8081bd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 8081b76:	eb0d 0002 	add.w	r0, sp, r2
 8081b7a:	f000 fd5f 	bl	808263c <_ZN5spark10JSONWriter4nameEPKcj>
 8081b7e:	69a1      	ldr	r1, [r4, #24]
 8081b80:	f000 fce0 	bl	8082544 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 8081b84:	7923      	ldrb	r3, [r4, #4]
 8081b86:	069b      	lsls	r3, r3, #26
 8081b88:	d507      	bpl.n	8081b9a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 8081b8a:	4914      	ldr	r1, [pc, #80]	; (8081bdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 8081b8c:	2206      	movs	r2, #6
 8081b8e:	a801      	add	r0, sp, #4
 8081b90:	f000 fd54 	bl	808263c <_ZN5spark10JSONWriter4nameEPKcj>
 8081b94:	69e1      	ldr	r1, [r4, #28]
 8081b96:	f7ff f893 	bl	8080cc0 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 8081b9a:	a801      	add	r0, sp, #4
 8081b9c:	f000 fcaf 	bl	80824fe <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 8081ba0:	6a28      	ldr	r0, [r5, #32]
 8081ba2:	2202      	movs	r2, #2
 8081ba4:	6803      	ldr	r3, [r0, #0]
 8081ba6:	490e      	ldr	r1, [pc, #56]	; (8081be0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 8081ba8:	68db      	ldr	r3, [r3, #12]
 8081baa:	4798      	blx	r3
}
 8081bac:	b005      	add	sp, #20
 8081bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8081bb2:	bf00      	nop
 8081bb4:	2000059c 	.word	0x2000059c
 8081bb8:	08082aac 	.word	0x08082aac
 8081bbc:	08082a34 	.word	0x08082a34
 8081bc0:	08082a88 	.word	0x08082a88
 8081bc4:	08082a8a 	.word	0x08082a8a
 8081bc8:	08082a8c 	.word	0x08082a8c
 8081bcc:	08082a8e 	.word	0x08082a8e
 8081bd0:	08082a91 	.word	0x08082a91
 8081bd4:	08082a94 	.word	0x08082a94
 8081bd8:	08082a96 	.word	0x08082a96
 8081bdc:	08082a9b 	.word	0x08082a9b
 8081be0:	08082a85 	.word	0x08082a85

08081be4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8081be4:	4b02      	ldr	r3, [pc, #8]	; (8081bf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8081be6:	681a      	ldr	r2, [r3, #0]
 8081be8:	4b02      	ldr	r3, [pc, #8]	; (8081bf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8081bea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8081bec:	4770      	bx	lr
 8081bee:	bf00      	nop
 8081bf0:	20000010 	.word	0x20000010
 8081bf4:	200000fc 	.word	0x200000fc

08081bf8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081bf8:	2100      	movs	r1, #0
 8081bfa:	f7fe bd6b 	b.w	80806d4 <system_delay_ms>

08081bfe <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081bfe:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8081c00:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8081c02:	4604      	mov	r4, r0
      if (_M_manager)
 8081c04:	b113      	cbz	r3, 8081c0c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081c06:	2203      	movs	r2, #3
 8081c08:	4601      	mov	r1, r0
 8081c0a:	4798      	blx	r3
    }
 8081c0c:	4620      	mov	r0, r4
 8081c0e:	bd10      	pop	{r4, pc}

08081c10 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8081c10:	b510      	push	{r4, lr}
 8081c12:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081c14:	f7ff fff3 	bl	8081bfe <_ZNSt14_Function_baseD1Ev>
 8081c18:	4620      	mov	r0, r4
 8081c1a:	bd10      	pop	{r4, pc}

08081c1c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8081c1c:	2300      	movs	r3, #0
 8081c1e:	4803      	ldr	r0, [pc, #12]	; (8081c2c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8081c20:	4a03      	ldr	r2, [pc, #12]	; (8081c30 <_GLOBAL__sub_I_RGB+0x14>)
 8081c22:	4904      	ldr	r1, [pc, #16]	; (8081c34 <_GLOBAL__sub_I_RGB+0x18>)
 8081c24:	6083      	str	r3, [r0, #8]
 8081c26:	f000 bd3f 	b.w	80826a8 <__aeabi_atexit>
 8081c2a:	bf00      	nop
 8081c2c:	20000100 	.word	0x20000100
 8081c30:	20000078 	.word	0x20000078
 8081c34:	08081c11 	.word	0x08081c11

08081c38 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8081c38:	4b01      	ldr	r3, [pc, #4]	; (8081c40 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8081c3a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8081c3c:	4770      	bx	lr
 8081c3e:	bf00      	nop
 8081c40:	20000014 	.word	0x20000014

08081c44 <serialEventRun>:
{
 8081c44:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8081c46:	4b17      	ldr	r3, [pc, #92]	; (8081ca4 <serialEventRun+0x60>)
 8081c48:	b143      	cbz	r3, 8081c5c <serialEventRun+0x18>
 8081c4a:	f000 f977 	bl	8081f3c <_Z16_fetch_usbserialv>
 8081c4e:	6803      	ldr	r3, [r0, #0]
 8081c50:	691b      	ldr	r3, [r3, #16]
 8081c52:	4798      	blx	r3
 8081c54:	2800      	cmp	r0, #0
 8081c56:	dd01      	ble.n	8081c5c <serialEventRun+0x18>
        serialEvent();
 8081c58:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8081c5c:	4b12      	ldr	r3, [pc, #72]	; (8081ca8 <serialEventRun+0x64>)
 8081c5e:	b143      	cbz	r3, 8081c72 <serialEventRun+0x2e>
 8081c60:	f000 fa98 	bl	8082194 <_Z22__fetch_global_Serial1v>
 8081c64:	6803      	ldr	r3, [r0, #0]
 8081c66:	691b      	ldr	r3, [r3, #16]
 8081c68:	4798      	blx	r3
 8081c6a:	2800      	cmp	r0, #0
 8081c6c:	dd01      	ble.n	8081c72 <serialEventRun+0x2e>
        serialEvent1();
 8081c6e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8081c72:	4b0e      	ldr	r3, [pc, #56]	; (8081cac <serialEventRun+0x68>)
 8081c74:	b10b      	cbz	r3, 8081c7a <serialEventRun+0x36>
 8081c76:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8081c7a:	4b0d      	ldr	r3, [pc, #52]	; (8081cb0 <serialEventRun+0x6c>)
 8081c7c:	b10b      	cbz	r3, 8081c82 <serialEventRun+0x3e>
 8081c7e:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8081c82:	4b0c      	ldr	r3, [pc, #48]	; (8081cb4 <serialEventRun+0x70>)
 8081c84:	b10b      	cbz	r3, 8081c8a <serialEventRun+0x46>
 8081c86:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8081c8a:	4b0b      	ldr	r3, [pc, #44]	; (8081cb8 <serialEventRun+0x74>)
 8081c8c:	b143      	cbz	r3, 8081ca0 <serialEventRun+0x5c>
 8081c8e:	f000 f993 	bl	8081fb8 <_Z17_fetch_usbserial1v>
 8081c92:	6803      	ldr	r3, [r0, #0]
 8081c94:	691b      	ldr	r3, [r3, #16]
 8081c96:	4798      	blx	r3
 8081c98:	2800      	cmp	r0, #0
 8081c9a:	dd01      	ble.n	8081ca0 <serialEventRun+0x5c>
        usbSerialEvent1();
 8081c9c:	f3af 8000 	nop.w
}
 8081ca0:	bd08      	pop	{r3, pc}
 8081ca2:	bf00      	nop
	...

08081cbc <_post_loop>:
{
 8081cbc:	b508      	push	{r3, lr}
	serialEventRun();
 8081cbe:	f7ff ffc1 	bl	8081c44 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8081cc2:	f7fe fc17 	bl	80804f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8081cc6:	4b01      	ldr	r3, [pc, #4]	; (8081ccc <_post_loop+0x10>)
 8081cc8:	6018      	str	r0, [r3, #0]
}
 8081cca:	bd08      	pop	{r3, pc}
 8081ccc:	200005a4 	.word	0x200005a4

08081cd0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8081cd0:	4802      	ldr	r0, [pc, #8]	; (8081cdc <_Z33system_initialize_user_backup_ramv+0xc>)
 8081cd2:	4a03      	ldr	r2, [pc, #12]	; (8081ce0 <_Z33system_initialize_user_backup_ramv+0x10>)
 8081cd4:	4903      	ldr	r1, [pc, #12]	; (8081ce4 <_Z33system_initialize_user_backup_ramv+0x14>)
 8081cd6:	1a12      	subs	r2, r2, r0
 8081cd8:	f000 bcfe 	b.w	80826d8 <memcpy>
 8081cdc:	40024000 	.word	0x40024000
 8081ce0:	40024004 	.word	0x40024004
 8081ce4:	08082d40 	.word	0x08082d40

08081ce8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081ce8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8081cea:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081cec:	461a      	mov	r2, r3
 8081cee:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081cf2:	9300      	str	r3, [sp, #0]
 8081cf4:	f7fe fd08 	bl	8080708 <system_ctrl_set_result>
}
 8081cf8:	b003      	add	sp, #12
 8081cfa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08081d00 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8081d00:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8081d02:	8843      	ldrh	r3, [r0, #2]
 8081d04:	2b0a      	cmp	r3, #10
 8081d06:	d008      	beq.n	8081d1a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8081d08:	2b50      	cmp	r3, #80	; 0x50
 8081d0a:	d10b      	bne.n	8081d24 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8081d0c:	4b09      	ldr	r3, [pc, #36]	; (8081d34 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8081d0e:	681b      	ldr	r3, [r3, #0]
 8081d10:	b14b      	cbz	r3, 8081d26 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8081d12:	b003      	add	sp, #12
 8081d14:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8081d18:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8081d1a:	f7ff ffe5 	bl	8081ce8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8081d1e:	b003      	add	sp, #12
 8081d20:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081d24:	2300      	movs	r3, #0
 8081d26:	461a      	mov	r2, r3
 8081d28:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081d2c:	9300      	str	r3, [sp, #0]
 8081d2e:	f7fe fceb 	bl	8080708 <system_ctrl_set_result>
}
 8081d32:	e7f4      	b.n	8081d1e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8081d34:	20000114 	.word	0x20000114

08081d38 <module_user_init_hook>:
{
 8081d38:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8081d3a:	4c12      	ldr	r4, [pc, #72]	; (8081d84 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8081d3c:	2100      	movs	r1, #0
 8081d3e:	4812      	ldr	r0, [pc, #72]	; (8081d88 <module_user_init_hook+0x50>)
 8081d40:	f7fe fd8e 	bl	8080860 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8081d44:	4d11      	ldr	r5, [pc, #68]	; (8081d8c <module_user_init_hook+0x54>)
 8081d46:	6823      	ldr	r3, [r4, #0]
 8081d48:	42ab      	cmp	r3, r5
 8081d4a:	bf0c      	ite	eq
 8081d4c:	2201      	moveq	r2, #1
 8081d4e:	2200      	movne	r2, #0
 8081d50:	4b0f      	ldr	r3, [pc, #60]	; (8081d90 <module_user_init_hook+0x58>)
 8081d52:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8081d54:	d002      	beq.n	8081d5c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 8081d56:	f7ff ffbb 	bl	8081cd0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8081d5a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8081d5c:	f7fe fbba 	bl	80804d4 <HAL_RNG_GetRandomNumber>
 8081d60:	4604      	mov	r4, r0
    srand(seed);
 8081d62:	f000 fce9 	bl	8082738 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8081d66:	4b0b      	ldr	r3, [pc, #44]	; (8081d94 <module_user_init_hook+0x5c>)
 8081d68:	b113      	cbz	r3, 8081d70 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8081d6a:	4620      	mov	r0, r4
 8081d6c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8081d70:	2100      	movs	r1, #0
 8081d72:	4808      	ldr	r0, [pc, #32]	; (8081d94 <module_user_init_hook+0x5c>)
 8081d74:	f7fe fd44 	bl	8080800 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8081d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8081d7c:	2100      	movs	r1, #0
 8081d7e:	4806      	ldr	r0, [pc, #24]	; (8081d98 <module_user_init_hook+0x60>)
 8081d80:	f7fe bcb8 	b.w	80806f4 <system_ctrl_set_app_request_handler>
 8081d84:	40024000 	.word	0x40024000
 8081d88:	08081c39 	.word	0x08081c39
 8081d8c:	9a271c1e 	.word	0x9a271c1e
 8081d90:	20000110 	.word	0x20000110
 8081d94:	00000000 	.word	0x00000000
 8081d98:	08081d01 	.word	0x08081d01

08081d9c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:
} // namespace

spark_cloud_disconnect_options CloudDisconnectOptions::toSystemOptions() const
{
    spark_cloud_disconnect_options opts = {};
    opts.size = sizeof(opts);
 8081d9c:	2308      	movs	r3, #8

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 8081d9e:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
 8081da0:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
 8081da4:	6803      	ldr	r3, [r0, #0]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8081da6:	2100      	movs	r1, #0
    opts.flags = flags_;
 8081da8:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
 8081dac:	7a03      	ldrb	r3, [r0, #8]
 8081dae:	f88d 3003 	strb.w	r3, [sp, #3]
    opts.timeout = timeout_;
 8081db2:	6843      	ldr	r3, [r0, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8081db4:	4668      	mov	r0, sp
    opts.timeout = timeout_;
 8081db6:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8081db8:	f7fe fd2a 	bl	8080810 <spark_cloud_disconnect>
}
 8081dbc:	b003      	add	sp, #12
 8081dbe:	f85d fb04 	ldr.w	pc, [sp], #4

08081dc2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8081dc2:	4770      	bx	lr

08081dc4 <_ZN9IPAddressD0Ev>:
 8081dc4:	b510      	push	{r4, lr}
 8081dc6:	4604      	mov	r4, r0
 8081dc8:	2108      	movs	r1, #8
 8081dca:	f000 fc72 	bl	80826b2 <_ZdlPvj>
 8081dce:	4620      	mov	r0, r4
 8081dd0:	bd10      	pop	{r4, pc}

08081dd2 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8081dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081dd4:	460e      	mov	r6, r1
 8081dd6:	2400      	movs	r4, #0
 8081dd8:	f100 0708 	add.w	r7, r0, #8
 8081ddc:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8081dde:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8081de2:	220a      	movs	r2, #10
 8081de4:	4630      	mov	r0, r6
 8081de6:	f7fe febc 	bl	8080b62 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081dea:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081dec:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8081dee:	d101      	bne.n	8081df4 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8081df0:	4620      	mov	r0, r4
 8081df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8081df4:	2c00      	cmp	r4, #0
 8081df6:	d0f2      	beq.n	8081dde <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8081df8:	212e      	movs	r1, #46	; 0x2e
 8081dfa:	4630      	mov	r0, r6
 8081dfc:	f7fe fea2 	bl	8080b44 <_ZN5Print5printEc>
 8081e00:	4404      	add	r4, r0
 8081e02:	e7ec      	b.n	8081dde <_ZNK9IPAddress7printToER5Print+0xc>

08081e04 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8081e04:	4a02      	ldr	r2, [pc, #8]	; (8081e10 <_ZN9IPAddressC1Ev+0xc>)
 8081e06:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8081e08:	2200      	movs	r2, #0
 8081e0a:	6042      	str	r2, [r0, #4]
}
 8081e0c:	4770      	bx	lr
 8081e0e:	bf00      	nop
 8081e10:	08082b40 	.word	0x08082b40

08081e14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8081e14:	4a02      	ldr	r2, [pc, #8]	; (8081e20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8081e16:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8081e18:	680a      	ldr	r2, [r1, #0]
 8081e1a:	6042      	str	r2, [r0, #4]
}
 8081e1c:	4770      	bx	lr
 8081e1e:	bf00      	nop
 8081e20:	08082b40 	.word	0x08082b40

08081e24 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8081e24:	4a01      	ldr	r2, [pc, #4]	; (8081e2c <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 8081e26:	e9c0 2100 	strd	r2, r1, [r0]
}
 8081e2a:	4770      	bx	lr
 8081e2c:	08082b40 	.word	0x08082b40

08081e30 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8081e30:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8081e32:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8081e36:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8081e3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8081e3e:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8081e42:	6044      	str	r4, [r0, #4]
}
 8081e44:	bd10      	pop	{r4, pc}
	...

08081e48 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8081e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081e4a:	4d04      	ldr	r5, [pc, #16]	; (8081e5c <_ZN9IPAddressC1Ehhhh+0x14>)
 8081e4c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8081e4e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8081e52:	9500      	str	r5, [sp, #0]
 8081e54:	f7ff ffec 	bl	8081e30 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8081e58:	b003      	add	sp, #12
 8081e5a:	bd30      	pop	{r4, r5, pc}
 8081e5c:	08082b40 	.word	0x08082b40

08081e60 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081e60:	7441      	strb	r1, [r0, #17]
}
 8081e62:	4770      	bx	lr

08081e64 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8081e64:	4770      	bx	lr

08081e66 <_ZN9USBSerial4readEv>:
{
 8081e66:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8081e68:	2100      	movs	r1, #0
 8081e6a:	7c00      	ldrb	r0, [r0, #16]
 8081e6c:	f7fe fbea 	bl	8080644 <HAL_USB_USART_Receive_Data>
}
 8081e70:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8081e74:	bd08      	pop	{r3, pc}

08081e76 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 8081e76:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8081e78:	2101      	movs	r1, #1
 8081e7a:	7c00      	ldrb	r0, [r0, #16]
 8081e7c:	f7fe fbe2 	bl	8080644 <HAL_USB_USART_Receive_Data>
}
 8081e80:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8081e84:	bd08      	pop	{r3, pc}

08081e86 <_ZN9USBSerial17availableForWriteEv>:
{
 8081e86:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8081e88:	7c00      	ldrb	r0, [r0, #16]
 8081e8a:	f7fe fbd3 	bl	8080634 <HAL_USB_USART_Available_Data_For_Write>
}
 8081e8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081e92:	bd08      	pop	{r3, pc}

08081e94 <_ZN9USBSerial9availableEv>:
{
 8081e94:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8081e96:	7c00      	ldrb	r0, [r0, #16]
 8081e98:	f7fe fbc4 	bl	8080624 <HAL_USB_USART_Available_Data>
}
 8081e9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081ea0:	bd08      	pop	{r3, pc}

08081ea2 <_ZN9USBSerial5writeEh>:
{
 8081ea2:	b538      	push	{r3, r4, r5, lr}
 8081ea4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081ea6:	7c00      	ldrb	r0, [r0, #16]
{
 8081ea8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081eaa:	f7fe fbc3 	bl	8080634 <HAL_USB_USART_Available_Data_For_Write>
 8081eae:	2800      	cmp	r0, #0
 8081eb0:	dc01      	bgt.n	8081eb6 <_ZN9USBSerial5writeEh+0x14>
 8081eb2:	7c60      	ldrb	r0, [r4, #17]
 8081eb4:	b128      	cbz	r0, 8081ec2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8081eb6:	4629      	mov	r1, r5
 8081eb8:	7c20      	ldrb	r0, [r4, #16]
 8081eba:	f7fe fbcb 	bl	8080654 <HAL_USB_USART_Send_Data>
 8081ebe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8081ec2:	bd38      	pop	{r3, r4, r5, pc}

08081ec4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8081ec4:	7c00      	ldrb	r0, [r0, #16]
 8081ec6:	f7fe bbcd 	b.w	8080664 <HAL_USB_USART_Flush_Data>

08081eca <_ZN9USBSerialD0Ev>:
 8081eca:	b510      	push	{r4, lr}
 8081ecc:	4604      	mov	r4, r0
 8081ece:	2114      	movs	r1, #20
 8081ed0:	f000 fbef 	bl	80826b2 <_ZdlPvj>
 8081ed4:	4620      	mov	r0, r4
 8081ed6:	bd10      	pop	{r4, pc}

08081ed8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8081ed8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8081eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081ede:	4604      	mov	r4, r0
 8081ee0:	4608      	mov	r0, r1
 8081ee2:	2100      	movs	r1, #0
 8081ee4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8081ee8:	4b04      	ldr	r3, [pc, #16]	; (8081efc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8081eea:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8081eec:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8081eee:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8081ef0:	4611      	mov	r1, r2
  _blocking = true;
 8081ef2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8081ef4:	f7fe fb7e 	bl	80805f4 <HAL_USB_USART_Init>
}
 8081ef8:	4620      	mov	r0, r4
 8081efa:	bd10      	pop	{r4, pc}
 8081efc:	08082b54 	.word	0x08082b54

08081f00 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8081f00:	2200      	movs	r2, #0
 8081f02:	7c00      	ldrb	r0, [r0, #16]
 8081f04:	f7fe bb7e 	b.w	8080604 <HAL_USB_USART_Begin>

08081f08 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 8081f08:	7c00      	ldrb	r0, [r0, #16]
 8081f0a:	f7fe bb83 	b.w	8080614 <HAL_USB_USART_End>
	...

08081f10 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8081f10:	b510      	push	{r4, lr}
 8081f12:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081f14:	2214      	movs	r2, #20
 8081f16:	2100      	movs	r1, #0
 8081f18:	f000 fc06 	bl	8082728 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8081f1c:	4b05      	ldr	r3, [pc, #20]	; (8081f34 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081f1e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8081f20:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8081f22:	4b05      	ldr	r3, [pc, #20]	; (8081f38 <_Z19acquireSerialBufferv+0x28>)
 8081f24:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8081f26:	f240 1301 	movw	r3, #257	; 0x101
 8081f2a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081f2c:	2381      	movs	r3, #129	; 0x81
 8081f2e:	8223      	strh	r3, [r4, #16]
}
 8081f30:	bd10      	pop	{r4, pc}
 8081f32:	bf00      	nop
 8081f34:	20000148 	.word	0x20000148
 8081f38:	20000249 	.word	0x20000249

08081f3c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8081f3c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081f3e:	4d0f      	ldr	r5, [pc, #60]	; (8081f7c <_Z16_fetch_usbserialv+0x40>)
{
 8081f40:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8081f42:	a801      	add	r0, sp, #4
 8081f44:	f7ff ffe4 	bl	8081f10 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081f48:	7829      	ldrb	r1, [r5, #0]
 8081f4a:	f3bf 8f5b 	dmb	ish
 8081f4e:	f011 0401 	ands.w	r4, r1, #1
 8081f52:	d110      	bne.n	8081f76 <_Z16_fetch_usbserialv+0x3a>
 8081f54:	4628      	mov	r0, r5
 8081f56:	f7fe f8ad 	bl	80800b4 <__cxa_guard_acquire>
 8081f5a:	b160      	cbz	r0, 8081f76 <_Z16_fetch_usbserialv+0x3a>
 8081f5c:	4621      	mov	r1, r4
 8081f5e:	aa01      	add	r2, sp, #4
 8081f60:	4807      	ldr	r0, [pc, #28]	; (8081f80 <_Z16_fetch_usbserialv+0x44>)
 8081f62:	f7ff ffb9 	bl	8081ed8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081f66:	4628      	mov	r0, r5
 8081f68:	f7fe f8a9 	bl	80800be <__cxa_guard_release>
 8081f6c:	4a05      	ldr	r2, [pc, #20]	; (8081f84 <_Z16_fetch_usbserialv+0x48>)
 8081f6e:	4906      	ldr	r1, [pc, #24]	; (8081f88 <_Z16_fetch_usbserialv+0x4c>)
 8081f70:	4803      	ldr	r0, [pc, #12]	; (8081f80 <_Z16_fetch_usbserialv+0x44>)
 8081f72:	f000 fb99 	bl	80826a8 <__aeabi_atexit>
	return _usbserial;
}
 8081f76:	4802      	ldr	r0, [pc, #8]	; (8081f80 <_Z16_fetch_usbserialv+0x44>)
 8081f78:	b007      	add	sp, #28
 8081f7a:	bd30      	pop	{r4, r5, pc}
 8081f7c:	20000118 	.word	0x20000118
 8081f80:	20000120 	.word	0x20000120
 8081f84:	20000078 	.word	0x20000078
 8081f88:	08081e65 	.word	0x08081e65

08081f8c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8081f8c:	b510      	push	{r4, lr}
 8081f8e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081f90:	2214      	movs	r2, #20
 8081f92:	2100      	movs	r1, #0
 8081f94:	f000 fbc8 	bl	8082728 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081f98:	4b05      	ldr	r3, [pc, #20]	; (8081fb0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081f9a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8081f9c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8081f9e:	4b05      	ldr	r3, [pc, #20]	; (8081fb4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8081fa0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8081fa2:	f240 1301 	movw	r3, #257	; 0x101
 8081fa6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081fa8:	2381      	movs	r3, #129	; 0x81
 8081faa:	8223      	strh	r3, [r4, #16]
}
 8081fac:	bd10      	pop	{r4, pc}
 8081fae:	bf00      	nop
 8081fb0:	200002ca 	.word	0x200002ca
 8081fb4:	200003cb 	.word	0x200003cb

08081fb8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8081fb8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081fba:	4c0f      	ldr	r4, [pc, #60]	; (8081ff8 <_Z17_fetch_usbserial1v+0x40>)
{
 8081fbc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8081fbe:	a801      	add	r0, sp, #4
 8081fc0:	f7ff ffe4 	bl	8081f8c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081fc4:	7823      	ldrb	r3, [r4, #0]
 8081fc6:	f3bf 8f5b 	dmb	ish
 8081fca:	07db      	lsls	r3, r3, #31
 8081fcc:	d410      	bmi.n	8081ff0 <_Z17_fetch_usbserial1v+0x38>
 8081fce:	4620      	mov	r0, r4
 8081fd0:	f7fe f870 	bl	80800b4 <__cxa_guard_acquire>
 8081fd4:	b160      	cbz	r0, 8081ff0 <_Z17_fetch_usbserial1v+0x38>
 8081fd6:	2101      	movs	r1, #1
 8081fd8:	aa01      	add	r2, sp, #4
 8081fda:	4808      	ldr	r0, [pc, #32]	; (8081ffc <_Z17_fetch_usbserial1v+0x44>)
 8081fdc:	f7ff ff7c 	bl	8081ed8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081fe0:	4620      	mov	r0, r4
 8081fe2:	f7fe f86c 	bl	80800be <__cxa_guard_release>
 8081fe6:	4a06      	ldr	r2, [pc, #24]	; (8082000 <_Z17_fetch_usbserial1v+0x48>)
 8081fe8:	4906      	ldr	r1, [pc, #24]	; (8082004 <_Z17_fetch_usbserial1v+0x4c>)
 8081fea:	4804      	ldr	r0, [pc, #16]	; (8081ffc <_Z17_fetch_usbserial1v+0x44>)
 8081fec:	f000 fb5c 	bl	80826a8 <__aeabi_atexit>
  return _usbserial1;
}
 8081ff0:	4802      	ldr	r0, [pc, #8]	; (8081ffc <_Z17_fetch_usbserial1v+0x44>)
 8081ff2:	b006      	add	sp, #24
 8081ff4:	bd10      	pop	{r4, pc}
 8081ff6:	bf00      	nop
 8081ff8:	2000011c 	.word	0x2000011c
 8081ffc:	20000134 	.word	0x20000134
 8082000:	20000078 	.word	0x20000078
 8082004:	08081e65 	.word	0x08081e65

08082008 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8082008:	2200      	movs	r2, #0
 808200a:	6840      	ldr	r0, [r0, #4]
 808200c:	4611      	mov	r1, r2
 808200e:	f7fe bba7 	b.w	8080760 <network_ready>

08082012 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082012:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8082014:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8082016:	b085      	sub	sp, #20
 8082018:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808201a:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 808201c:	460f      	mov	r7, r1
 808201e:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8082020:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082022:	f000 fbd6 	bl	80827d2 <strlen>
 8082026:	687b      	ldr	r3, [r7, #4]
 8082028:	b281      	uxth	r1, r0
 808202a:	9600      	str	r6, [sp, #0]
 808202c:	4628      	mov	r0, r5
 808202e:	aa03      	add	r2, sp, #12
 8082030:	f7fe fad8 	bl	80805e4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082034:	b130      	cbz	r0, 8082044 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 8082036:	4631      	mov	r1, r6
 8082038:	4620      	mov	r0, r4
 808203a:	f7ff fef3 	bl	8081e24 <_ZN9IPAddressC1Em>
    }
 808203e:	4620      	mov	r0, r4
 8082040:	b005      	add	sp, #20
 8082042:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082044:	4620      	mov	r0, r4
 8082046:	a903      	add	r1, sp, #12
 8082048:	f7ff fee4 	bl	8081e14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 808204c:	e7f7      	b.n	808203e <_ZN5spark13CellularClass7resolveEPKc+0x2c>

0808204e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 808204e:	2200      	movs	r2, #0
 8082050:	6840      	ldr	r0, [r0, #4]
 8082052:	4611      	mov	r1, r2
 8082054:	f7fe bba4 	b.w	80807a0 <network_listening>

08082058 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 8082058:	2200      	movs	r2, #0
 808205a:	6840      	ldr	r0, [r0, #4]
 808205c:	4611      	mov	r1, r2
 808205e:	f7fe bbaf 	b.w	80807c0 <network_get_listen_timeout>

08082062 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8082062:	2200      	movs	r2, #0
 8082064:	6840      	ldr	r0, [r0, #4]
 8082066:	f7fe bba3 	b.w	80807b0 <network_set_listen_timeout>

0808206a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 808206a:	2200      	movs	r2, #0
 808206c:	6840      	ldr	r0, [r0, #4]
 808206e:	f081 0101 	eor.w	r1, r1, #1
 8082072:	f7fe bb8d 	b.w	8080790 <network_listen>

08082076 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 8082076:	2300      	movs	r3, #0
 8082078:	6840      	ldr	r0, [r0, #4]
 808207a:	461a      	mov	r2, r3
 808207c:	4619      	mov	r1, r3
 808207e:	f7fe bb7f 	b.w	8080780 <network_off>

08082082 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 8082082:	2300      	movs	r3, #0
 8082084:	6840      	ldr	r0, [r0, #4]
 8082086:	461a      	mov	r2, r3
 8082088:	4619      	mov	r1, r3
 808208a:	f7fe bb71 	b.w	8080770 <network_on>

0808208e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 808208e:	2200      	movs	r2, #0
 8082090:	6840      	ldr	r0, [r0, #4]
 8082092:	4611      	mov	r1, r2
 8082094:	f7fe bb54 	b.w	8080740 <network_connecting>

08082098 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8082098:	2200      	movs	r2, #0
 808209a:	2102      	movs	r1, #2
 808209c:	6840      	ldr	r0, [r0, #4]
 808209e:	f7fe bb57 	b.w	8080750 <network_disconnect>

080820a2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80820a2:	2300      	movs	r3, #0
 80820a4:	6840      	ldr	r0, [r0, #4]
 80820a6:	461a      	mov	r2, r3
 80820a8:	f7fe bb42 	b.w	8080730 <network_connect>

080820ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 80820ac:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80820ae:	2428      	movs	r4, #40	; 0x28
 80820b0:	4b07      	ldr	r3, [pc, #28]	; (80820d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 80820b2:	4622      	mov	r2, r4
 80820b4:	4618      	mov	r0, r3
 80820b6:	2100      	movs	r1, #0
 80820b8:	f000 fb36 	bl	8082728 <memset>
        cid = -1;
 80820bc:	f04f 32ff 	mov.w	r2, #4294967295
 80820c0:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80820c2:	2204      	movs	r2, #4
 80820c4:	4b03      	ldr	r3, [pc, #12]	; (80820d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 80820c6:	8004      	strh	r4, [r0, #0]
 80820c8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 80820ca:	4a03      	ldr	r2, [pc, #12]	; (80820d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 80820cc:	601a      	str	r2, [r3, #0]
 80820ce:	bd10      	pop	{r4, pc}
 80820d0:	20000454 	.word	0x20000454
 80820d4:	2000044c 	.word	0x2000044c
 80820d8:	08082b84 	.word	0x08082b84

080820dc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80820dc:	4770      	bx	lr

080820de <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80820de:	7441      	strb	r1, [r0, #17]
}
 80820e0:	4770      	bx	lr

080820e2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80820e2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80820e4:	7c00      	ldrb	r0, [r0, #16]
 80820e6:	f7fe fa6d 	bl	80805c4 <hal_usart_available_data_for_write>
}
 80820ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80820ee:	bd08      	pop	{r3, pc}

080820f0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80820f0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80820f2:	7c00      	ldrb	r0, [r0, #16]
 80820f4:	f7fe fa46 	bl	8080584 <hal_usart_available>
}
 80820f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80820fc:	bd08      	pop	{r3, pc}

080820fe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80820fe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8082100:	7c00      	ldrb	r0, [r0, #16]
 8082102:	f7fe fa4f 	bl	80805a4 <hal_usart_peek>
}
 8082106:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808210a:	bd08      	pop	{r3, pc}

0808210c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808210c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 808210e:	7c00      	ldrb	r0, [r0, #16]
 8082110:	f7fe fa40 	bl	8080594 <hal_usart_read>
}
 8082114:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082118:	bd08      	pop	{r3, pc}

0808211a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 808211a:	7c00      	ldrb	r0, [r0, #16]
 808211c:	f7fe ba4a 	b.w	80805b4 <hal_usart_flush>

08082120 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8082120:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8082122:	7c46      	ldrb	r6, [r0, #17]
{
 8082124:	4604      	mov	r4, r0
 8082126:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8082128:	b12e      	cbz	r6, 8082136 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 808212a:	4629      	mov	r1, r5
 808212c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808212e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8082132:	f7fe ba1f 	b.w	8080574 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8082136:	7c00      	ldrb	r0, [r0, #16]
 8082138:	f7fe fa44 	bl	80805c4 <hal_usart_available_data_for_write>
 808213c:	2800      	cmp	r0, #0
 808213e:	dcf4      	bgt.n	808212a <_ZN11USARTSerial5writeEh+0xa>
}
 8082140:	4630      	mov	r0, r6
 8082142:	bd70      	pop	{r4, r5, r6, pc}

08082144 <_ZN11USARTSerialD0Ev>:
 8082144:	b510      	push	{r4, lr}
 8082146:	4604      	mov	r4, r0
 8082148:	2114      	movs	r1, #20
 808214a:	f000 fab2 	bl	80826b2 <_ZdlPvj>
 808214e:	4620      	mov	r0, r4
 8082150:	bd10      	pop	{r4, pc}
	...

08082154 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8082154:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8082158:	b510      	push	{r4, lr}
 808215a:	4604      	mov	r4, r0
 808215c:	4608      	mov	r0, r1
 808215e:	4611      	mov	r1, r2
 8082160:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8082164:	e9c4 c201 	strd	ip, r2, [r4, #4]
 8082168:	4a04      	ldr	r2, [pc, #16]	; (808217c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 808216a:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808216c:	6022      	str	r2, [r4, #0]
  _blocking = true;
 808216e:	2201      	movs	r2, #1
 8082170:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 8082172:	461a      	mov	r2, r3
 8082174:	f7fe f9ee 	bl	8080554 <hal_usart_init>
}
 8082178:	4620      	mov	r0, r4
 808217a:	bd10      	pop	{r4, pc}
 808217c:	08082bb8 	.word	0x08082bb8

08082180 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 8082180:	2300      	movs	r3, #0
 8082182:	7c00      	ldrb	r0, [r0, #16]
 8082184:	f7fe ba26 	b.w	80805d4 <hal_usart_begin_config>

08082188 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 8082188:	2200      	movs	r2, #0
 808218a:	f7ff bff9 	b.w	8082180 <_ZN11USARTSerial5beginEmm>

0808218e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 808218e:	7c00      	ldrb	r0, [r0, #16]
 8082190:	f7fe b9e8 	b.w	8080564 <hal_usart_end>

08082194 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8082194:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8082196:	4d0d      	ldr	r5, [pc, #52]	; (80821cc <_Z22__fetch_global_Serial1v+0x38>)
 8082198:	7829      	ldrb	r1, [r5, #0]
 808219a:	f3bf 8f5b 	dmb	ish
 808219e:	f011 0401 	ands.w	r4, r1, #1
 80821a2:	d111      	bne.n	80821c8 <_Z22__fetch_global_Serial1v+0x34>
 80821a4:	4628      	mov	r0, r5
 80821a6:	f7fd ff85 	bl	80800b4 <__cxa_guard_acquire>
 80821aa:	b168      	cbz	r0, 80821c8 <_Z22__fetch_global_Serial1v+0x34>
 80821ac:	4621      	mov	r1, r4
 80821ae:	4a08      	ldr	r2, [pc, #32]	; (80821d0 <_Z22__fetch_global_Serial1v+0x3c>)
 80821b0:	4b08      	ldr	r3, [pc, #32]	; (80821d4 <_Z22__fetch_global_Serial1v+0x40>)
 80821b2:	4809      	ldr	r0, [pc, #36]	; (80821d8 <_Z22__fetch_global_Serial1v+0x44>)
 80821b4:	f7ff ffce 	bl	8082154 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80821b8:	4628      	mov	r0, r5
 80821ba:	f7fd ff80 	bl	80800be <__cxa_guard_release>
 80821be:	4a07      	ldr	r2, [pc, #28]	; (80821dc <_Z22__fetch_global_Serial1v+0x48>)
 80821c0:	4907      	ldr	r1, [pc, #28]	; (80821e0 <_Z22__fetch_global_Serial1v+0x4c>)
 80821c2:	4805      	ldr	r0, [pc, #20]	; (80821d8 <_Z22__fetch_global_Serial1v+0x44>)
 80821c4:	f000 fa70 	bl	80826a8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80821c8:	4803      	ldr	r0, [pc, #12]	; (80821d8 <_Z22__fetch_global_Serial1v+0x44>)
 80821ca:	bd38      	pop	{r3, r4, r5, pc}
 80821cc:	2000047c 	.word	0x2000047c
 80821d0:	20000480 	.word	0x20000480
 80821d4:	20000504 	.word	0x20000504
 80821d8:	20000588 	.word	0x20000588
 80821dc:	20000078 	.word	0x20000078
 80821e0:	080820dd 	.word	0x080820dd

080821e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80821e4:	2300      	movs	r3, #0
 80821e6:	6840      	ldr	r0, [r0, #4]
 80821e8:	461a      	mov	r2, r3
 80821ea:	f7fe baa1 	b.w	8080730 <network_connect>

080821ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80821ee:	2200      	movs	r2, #0
 80821f0:	2102      	movs	r1, #2
 80821f2:	6840      	ldr	r0, [r0, #4]
 80821f4:	f7fe baac 	b.w	8080750 <network_disconnect>

080821f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80821f8:	2200      	movs	r2, #0
 80821fa:	6840      	ldr	r0, [r0, #4]
 80821fc:	4611      	mov	r1, r2
 80821fe:	f7fe ba9f 	b.w	8080740 <network_connecting>

08082202 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8082202:	2200      	movs	r2, #0
 8082204:	6840      	ldr	r0, [r0, #4]
 8082206:	4611      	mov	r1, r2
 8082208:	f7fe baaa 	b.w	8080760 <network_ready>

0808220c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808220c:	2300      	movs	r3, #0
 808220e:	6840      	ldr	r0, [r0, #4]
 8082210:	461a      	mov	r2, r3
 8082212:	4619      	mov	r1, r3
 8082214:	f7fe baac 	b.w	8080770 <network_on>

08082218 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8082218:	2300      	movs	r3, #0
 808221a:	6840      	ldr	r0, [r0, #4]
 808221c:	461a      	mov	r2, r3
 808221e:	4619      	mov	r1, r3
 8082220:	f7fe baae 	b.w	8080780 <network_off>

08082224 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8082224:	2200      	movs	r2, #0
 8082226:	6840      	ldr	r0, [r0, #4]
 8082228:	f081 0101 	eor.w	r1, r1, #1
 808222c:	f7fe bab0 	b.w	8080790 <network_listen>

08082230 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8082230:	2200      	movs	r2, #0
 8082232:	6840      	ldr	r0, [r0, #4]
 8082234:	f7fe babc 	b.w	80807b0 <network_set_listen_timeout>

08082238 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082238:	2200      	movs	r2, #0
 808223a:	6840      	ldr	r0, [r0, #4]
 808223c:	4611      	mov	r1, r2
 808223e:	f7fe babf 	b.w	80807c0 <network_get_listen_timeout>

08082242 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8082242:	2200      	movs	r2, #0
 8082244:	6840      	ldr	r0, [r0, #4]
 8082246:	4611      	mov	r1, r2
 8082248:	f7fe baaa 	b.w	80807a0 <network_listening>

0808224c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808224c:	b570      	push	{r4, r5, r6, lr}
 808224e:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8082250:	2600      	movs	r6, #0
 8082252:	b086      	sub	sp, #24
 8082254:	4604      	mov	r4, r0
    IPAddress addr;
 8082256:	a804      	add	r0, sp, #16
 8082258:	f7ff fdd4 	bl	8081e04 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808225c:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 808225e:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082260:	f000 fab7 	bl	80827d2 <strlen>
 8082264:	4b0a      	ldr	r3, [pc, #40]	; (8082290 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8082266:	9600      	str	r6, [sp, #0]
 8082268:	b281      	uxth	r1, r0
 808226a:	685b      	ldr	r3, [r3, #4]
 808226c:	4628      	mov	r0, r5
 808226e:	aa03      	add	r2, sp, #12
 8082270:	f7fe f9b8 	bl	80805e4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082274:	b130      	cbz	r0, 8082284 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8082276:	4631      	mov	r1, r6
 8082278:	4620      	mov	r0, r4
 808227a:	f7ff fdd3 	bl	8081e24 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808227e:	4620      	mov	r0, r4
 8082280:	b006      	add	sp, #24
 8082282:	bd70      	pop	{r4, r5, r6, pc}
 8082284:	4620      	mov	r0, r4
 8082286:	a903      	add	r1, sp, #12
 8082288:	f7ff fdc4 	bl	8081e14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 808228c:	e7f7      	b.n	808227e <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 808228e:	bf00      	nop
 8082290:	2000044c 	.word	0x2000044c

08082294 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8082294:	4b02      	ldr	r3, [pc, #8]	; (80822a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8082296:	4a03      	ldr	r2, [pc, #12]	; (80822a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8082298:	601a      	str	r2, [r3, #0]
 808229a:	2200      	movs	r2, #0
 808229c:	605a      	str	r2, [r3, #4]

} // spark
 808229e:	4770      	bx	lr
 80822a0:	2000059c 	.word	0x2000059c
 80822a4:	08082be8 	.word	0x08082be8

080822a8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 80822a8:	2201      	movs	r2, #1
 80822aa:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 80822ae:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80822b2:	4618      	mov	r0, r3
 80822b4:	2901      	cmp	r1, #1
 80822b6:	d108      	bne.n	80822ca <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 80822b8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80822bc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 80822c0:	3a01      	subs	r2, #1
 80822c2:	f103 0310 	add.w	r3, r3, #16
 80822c6:	d1f2      	bne.n	80822ae <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 80822c8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 80822ca:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80822cc:	bf04      	itt	eq
 80822ce:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 80822d2:	1852      	addeq	r2, r2, r1
 80822d4:	e7f4      	b.n	80822c0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

080822d6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 80822d6:	b40e      	push	{r1, r2, r3}
 80822d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80822dc:	b087      	sub	sp, #28
 80822de:	af00      	add	r7, sp, #0
 80822e0:	f107 0534 	add.w	r5, r7, #52	; 0x34
 80822e4:	f855 8b04 	ldr.w	r8, [r5], #4
 80822e8:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80822ea:	462b      	mov	r3, r5
 80822ec:	4642      	mov	r2, r8
 80822ee:	2110      	movs	r1, #16
 80822f0:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 80822f4:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80822f6:	f7fe faab 	bl	8080850 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 80822fa:	280f      	cmp	r0, #15
 80822fc:	d91b      	bls.n	8082336 <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 80822fe:	f100 0308 	add.w	r3, r0, #8
 8082302:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 8082306:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 8082308:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 808230c:	4642      	mov	r2, r8
 808230e:	1c41      	adds	r1, r0, #1
 8082310:	462b      	mov	r3, r5
 8082312:	4668      	mov	r0, sp
        va_start(args, fmt);
 8082314:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 8082316:	f7fe fa9b 	bl	8080850 <vsnprintf>
        if (n > 0) {
 808231a:	1e02      	subs	r2, r0, #0
 808231c:	dd04      	ble.n	8082328 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 808231e:	6823      	ldr	r3, [r4, #0]
 8082320:	4669      	mov	r1, sp
 8082322:	4620      	mov	r0, r4
 8082324:	689b      	ldr	r3, [r3, #8]
 8082326:	4798      	blx	r3
 8082328:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 808232a:	371c      	adds	r7, #28
 808232c:	46bd      	mov	sp, r7
 808232e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8082332:	b003      	add	sp, #12
 8082334:	4770      	bx	lr
    } else if (n > 0) {
 8082336:	2800      	cmp	r0, #0
 8082338:	d0f7      	beq.n	808232a <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 808233a:	6823      	ldr	r3, [r4, #0]
 808233c:	4602      	mov	r2, r0
 808233e:	689b      	ldr	r3, [r3, #8]
 8082340:	4620      	mov	r0, r4
 8082342:	f107 0108 	add.w	r1, r7, #8
 8082346:	4798      	blx	r3
}
 8082348:	e7ef      	b.n	808232a <_ZN5spark10JSONWriter6printfEPKcz+0x54>

0808234a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 808234a:	b510      	push	{r4, lr}
 808234c:	4604      	mov	r4, r0
          _M_dispose();
 808234e:	6803      	ldr	r3, [r0, #0]
 8082350:	689b      	ldr	r3, [r3, #8]
 8082352:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8082354:	68a3      	ldr	r3, [r4, #8]
 8082356:	3b01      	subs	r3, #1
 8082358:	60a3      	str	r3, [r4, #8]
 808235a:	b92b      	cbnz	r3, 8082368 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 808235c:	6823      	ldr	r3, [r4, #0]
 808235e:	4620      	mov	r0, r4
    }
 8082360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 8082364:	68db      	ldr	r3, [r3, #12]
 8082366:	4718      	bx	r3
    }
 8082368:	bd10      	pop	{r4, pc}

0808236a <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 808236a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 808236c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 808236e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 8082372:	2201      	movs	r2, #1
 8082374:	689b      	ldr	r3, [r3, #8]
 8082376:	f10d 0107 	add.w	r1, sp, #7
 808237a:	4798      	blx	r3
}
 808237c:	b003      	add	sp, #12
 808237e:	f85d fb04 	ldr.w	pc, [sp], #4

08082382 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
 8082382:	b538      	push	{r3, r4, r5, lr}
 8082384:	680b      	ldr	r3, [r1, #0]
 8082386:	4604      	mov	r4, r0
 8082388:	6003      	str	r3, [r0, #0]
 808238a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 808238c:	6843      	ldr	r3, [r0, #4]
 808238e:	429d      	cmp	r5, r3
 8082390:	d00c      	beq.n	80823ac <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 8082392:	b115      	cbz	r5, 808239a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 8082394:	686b      	ldr	r3, [r5, #4]
 8082396:	3301      	adds	r3, #1
 8082398:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 808239a:	6860      	ldr	r0, [r4, #4]
 808239c:	b128      	cbz	r0, 80823aa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 808239e:	6843      	ldr	r3, [r0, #4]
 80823a0:	3b01      	subs	r3, #1
 80823a2:	6043      	str	r3, [r0, #4]
 80823a4:	b90b      	cbnz	r3, 80823aa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 80823a6:	f7ff ffd0 	bl	808234a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80823aa:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 80823ac:	4620      	mov	r0, r4
 80823ae:	bd38      	pop	{r3, r4, r5, pc}

080823b0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80823b0:	460b      	mov	r3, r1
 80823b2:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80823b4:	2200      	movs	r2, #0
 80823b6:	b510      	push	{r4, lr}
 80823b8:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80823ba:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 80823be:	6083      	str	r3, [r0, #8]
    if (t) {
 80823c0:	b90b      	cbnz	r3, 80823c6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 80823c2:	4620      	mov	r0, r4
 80823c4:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 80823c6:	f7ff ffdc 	bl	8082382 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 80823ca:	e7fa      	b.n	80823c2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

080823cc <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 80823cc:	4603      	mov	r3, r0
    if (!t_) {
 80823ce:	6880      	ldr	r0, [r0, #8]
 80823d0:	b320      	cbz	r0, 808241c <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 80823d2:	7802      	ldrb	r2, [r0, #0]
 80823d4:	2a03      	cmp	r2, #3
 80823d6:	d81a      	bhi.n	808240e <_ZNK5spark9JSONValue4typeEv+0x42>
 80823d8:	e8df f002 	tbb	[pc, r2]
 80823dc:	1b021704 	.word	0x1b021704
 80823e0:	2005      	movs	r0, #5
 80823e2:	4770      	bx	lr
        const char c = d_->json[t_->start];
 80823e4:	681b      	ldr	r3, [r3, #0]
 80823e6:	685a      	ldr	r2, [r3, #4]
 80823e8:	6843      	ldr	r3, [r0, #4]
 80823ea:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80823ec:	282d      	cmp	r0, #45	; 0x2d
 80823ee:	d012      	beq.n	8082416 <_ZNK5spark9JSONValue4typeEv+0x4a>
 80823f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80823f4:	2b09      	cmp	r3, #9
 80823f6:	d90e      	bls.n	8082416 <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80823f8:	2874      	cmp	r0, #116	; 0x74
 80823fa:	d00e      	beq.n	808241a <_ZNK5spark9JSONValue4typeEv+0x4e>
 80823fc:	2866      	cmp	r0, #102	; 0x66
 80823fe:	d00c      	beq.n	808241a <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 8082400:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 8082404:	4258      	negs	r0, r3
 8082406:	4158      	adcs	r0, r3
 8082408:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 808240a:	2006      	movs	r0, #6
 808240c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 808240e:	2000      	movs	r0, #0
 8082410:	4770      	bx	lr
        return JSON_TYPE_STRING;
 8082412:	2004      	movs	r0, #4
 8082414:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 8082416:	2003      	movs	r0, #3
 8082418:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 808241a:	2002      	movs	r0, #2
}
 808241c:	4770      	bx	lr

0808241e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 808241e:	b510      	push	{r4, lr}
 8082420:	4604      	mov	r4, r0
    switch (type()) {
 8082422:	f7ff ffd3 	bl	80823cc <_ZNK5spark9JSONValue4typeEv>
 8082426:	2802      	cmp	r0, #2
 8082428:	d00e      	beq.n	8082448 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 808242a:	1ec3      	subs	r3, r0, #3
 808242c:	b2db      	uxtb	r3, r3
 808242e:	2b01      	cmp	r3, #1
 8082430:	d814      	bhi.n	808245c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 8082432:	6822      	ldr	r2, [r4, #0]
 8082434:	68a3      	ldr	r3, [r4, #8]
 8082436:	6850      	ldr	r0, [r2, #4]
 8082438:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 808243a:	220a      	movs	r2, #10
}
 808243c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 8082440:	2100      	movs	r1, #0
 8082442:	4418      	add	r0, r3
 8082444:	f000 ba6e 	b.w	8082924 <strtol>
        const char* const s = d_->json + t_->start;
 8082448:	6822      	ldr	r2, [r4, #0]
 808244a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 808244c:	6852      	ldr	r2, [r2, #4]
 808244e:	685b      	ldr	r3, [r3, #4]
 8082450:	5cd0      	ldrb	r0, [r2, r3]
 8082452:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 8082456:	4258      	negs	r0, r3
 8082458:	4158      	adcs	r0, r3
}
 808245a:	bd10      	pop	{r4, pc}
    switch (type()) {
 808245c:	2000      	movs	r0, #0
 808245e:	e7fc      	b.n	808245a <_ZNK5spark9JSONValue5toIntEv+0x3c>

08082460 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 8082460:	460b      	mov	r3, r1
 8082462:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 8082464:	2200      	movs	r2, #0
 8082466:	b510      	push	{r4, lr}
 8082468:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 808246a:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 808246e:	480d      	ldr	r0, [pc, #52]	; (80824a4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 8082470:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 8082474:	b1a3      	cbz	r3, 80824a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 8082476:	781a      	ldrb	r2, [r3, #0]
 8082478:	2a03      	cmp	r2, #3
 808247a:	d006      	beq.n	808248a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 808247c:	b982      	cbnz	r2, 80824a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 808247e:	680a      	ldr	r2, [r1, #0]
 8082480:	6850      	ldr	r0, [r2, #4]
 8082482:	685a      	ldr	r2, [r3, #4]
 8082484:	5c82      	ldrb	r2, [r0, r2]
 8082486:	2a6e      	cmp	r2, #110	; 0x6e
 8082488:	d007      	beq.n	808249a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 808248a:	680a      	ldr	r2, [r1, #0]
 808248c:	6858      	ldr	r0, [r3, #4]
 808248e:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 8082490:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 8082492:	4402      	add	r2, r0
            n_ = t->end - t->start;
 8082494:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 8082496:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 8082498:	60e3      	str	r3, [r4, #12]
 808249a:	4620      	mov	r0, r4
 808249c:	f7ff ff71 	bl	8082382 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80824a0:	4620      	mov	r0, r4
 80824a2:	bd10      	pop	{r4, pc}
 80824a4:	08082a87 	.word	0x08082a87

080824a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80824a8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 80824aa:	2500      	movs	r5, #0
 80824ac:	460b      	mov	r3, r1
 80824ae:	4604      	mov	r4, r0
 80824b0:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 80824b2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 80824b6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80824ba:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 80824be:	b14b      	cbz	r3, 80824d4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 80824c0:	781a      	ldrb	r2, [r3, #0]
 80824c2:	2a01      	cmp	r2, #1
 80824c4:	d106      	bne.n	80824d4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 80824c6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 80824ca:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 80824cc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 80824ce:	6143      	str	r3, [r0, #20]
 80824d0:	f7ff ff57 	bl	8082382 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80824d4:	4620      	mov	r0, r4
 80824d6:	bd38      	pop	{r3, r4, r5, pc}

080824d8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 80824d8:	b510      	push	{r4, lr}
    if (!n_) {
 80824da:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 80824dc:	4604      	mov	r4, r0
    if (!n_) {
 80824de:	b163      	cbz	r3, 80824fa <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 80824e0:	6880      	ldr	r0, [r0, #8]
    --n_;
 80824e2:	3b01      	subs	r3, #1
    k_ = t_; // Name
 80824e4:	60e0      	str	r0, [r4, #12]
    ++t_;
 80824e6:	3010      	adds	r0, #16
 80824e8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80824ea:	6120      	str	r0, [r4, #16]
    --n_;
 80824ec:	6163      	str	r3, [r4, #20]
    if (n_) {
 80824ee:	b113      	cbz	r3, 80824f6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 80824f0:	f7ff feda 	bl	80822a8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80824f4:	60a0      	str	r0, [r4, #8]
    return true;
 80824f6:	2001      	movs	r0, #1
 80824f8:	e000      	b.n	80824fc <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 80824fa:	4618      	mov	r0, r3
}
 80824fc:	bd10      	pop	{r4, pc}

080824fe <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 80824fe:	b510      	push	{r4, lr}
    write('}');
 8082500:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 8082502:	4604      	mov	r4, r0
    write('}');
 8082504:	f7ff ff31 	bl	808236a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 8082508:	2301      	movs	r3, #1
}
 808250a:	4620      	mov	r0, r4
    state_ = NEXT;
 808250c:	7123      	strb	r3, [r4, #4]
}
 808250e:	bd10      	pop	{r4, pc}

08082510 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 8082510:	b508      	push	{r3, lr}
    switch (state_) {
 8082512:	7903      	ldrb	r3, [r0, #4]
 8082514:	2b01      	cmp	r3, #1
 8082516:	d002      	beq.n	808251e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 8082518:	2b02      	cmp	r3, #2
 808251a:	d004      	beq.n	8082526 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 808251c:	bd08      	pop	{r3, pc}
        write(',');
 808251e:	212c      	movs	r1, #44	; 0x2c
        write(':');
 8082520:	f7ff ff23 	bl	808236a <_ZN5spark10JSONWriter5writeEc>
}
 8082524:	e7fa      	b.n	808251c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 8082526:	213a      	movs	r1, #58	; 0x3a
 8082528:	e7fa      	b.n	8082520 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

0808252a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 808252a:	b510      	push	{r4, lr}
 808252c:	4604      	mov	r4, r0
    writeSeparator();
 808252e:	f7ff ffef 	bl	8082510 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 8082532:	4620      	mov	r0, r4
 8082534:	217b      	movs	r1, #123	; 0x7b
 8082536:	f7ff ff18 	bl	808236a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 808253a:	2300      	movs	r3, #0
}
 808253c:	4620      	mov	r0, r4
    state_ = BEGIN;
 808253e:	7123      	strb	r3, [r4, #4]
}
 8082540:	bd10      	pop	{r4, pc}
	...

08082544 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 8082544:	b538      	push	{r3, r4, r5, lr}
 8082546:	4604      	mov	r4, r0
 8082548:	460d      	mov	r5, r1
    writeSeparator();
 808254a:	f7ff ffe1 	bl	8082510 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 808254e:	6823      	ldr	r3, [r4, #0]
 8082550:	4620      	mov	r0, r4
 8082552:	462a      	mov	r2, r5
 8082554:	68db      	ldr	r3, [r3, #12]
 8082556:	4903      	ldr	r1, [pc, #12]	; (8082564 <_ZN5spark10JSONWriter5valueEi+0x20>)
 8082558:	4798      	blx	r3
    state_ = NEXT;
 808255a:	2301      	movs	r3, #1
}
 808255c:	4620      	mov	r0, r4
    state_ = NEXT;
 808255e:	7123      	strb	r3, [r4, #4]
}
 8082560:	bd38      	pop	{r3, r4, r5, pc}
 8082562:	bf00      	nop
 8082564:	080829bd 	.word	0x080829bd

08082568 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 8082568:	b538      	push	{r3, r4, r5, lr}
 808256a:	4604      	mov	r4, r0
 808256c:	460d      	mov	r5, r1
    writeSeparator();
 808256e:	f7ff ffcf 	bl	8082510 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 8082572:	6823      	ldr	r3, [r4, #0]
 8082574:	4620      	mov	r0, r4
 8082576:	462a      	mov	r2, r5
 8082578:	68db      	ldr	r3, [r3, #12]
 808257a:	4903      	ldr	r1, [pc, #12]	; (8082588 <_ZN5spark10JSONWriter5valueEj+0x20>)
 808257c:	4798      	blx	r3
    state_ = NEXT;
 808257e:	2301      	movs	r3, #1
}
 8082580:	4620      	mov	r0, r4
    state_ = NEXT;
 8082582:	7123      	strb	r3, [r4, #4]
}
 8082584:	bd38      	pop	{r3, r4, r5, pc}
 8082586:	bf00      	nop
 8082588:	08082c14 	.word	0x08082c14

0808258c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808258c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082590:	460d      	mov	r5, r1
 8082592:	4617      	mov	r7, r2
    write('"');
 8082594:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 8082596:	4604      	mov	r4, r0
    write('"');
 8082598:	f7ff fee7 	bl	808236a <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 808259c:	4629      	mov	r1, r5
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 808259e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8082638 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 80825a2:	442f      	add	r7, r5
    while (s != end) {
 80825a4:	42bd      	cmp	r5, r7
 80825a6:	462a      	mov	r2, r5
 80825a8:	d038      	beq.n	808261c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 80825aa:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80825ae:	2e22      	cmp	r6, #34	; 0x22
 80825b0:	d003      	beq.n	80825ba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80825b2:	2e5c      	cmp	r6, #92	; 0x5c
 80825b4:	d001      	beq.n	80825ba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80825b6:	2e1f      	cmp	r6, #31
 80825b8:	d8f4      	bhi.n	80825a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 80825ba:	6823      	ldr	r3, [r4, #0]
 80825bc:	1a52      	subs	r2, r2, r1
 80825be:	4620      	mov	r0, r4
 80825c0:	689b      	ldr	r3, [r3, #8]
 80825c2:	4798      	blx	r3
            write('\\');
 80825c4:	215c      	movs	r1, #92	; 0x5c
 80825c6:	4620      	mov	r0, r4
 80825c8:	f7ff fecf 	bl	808236a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80825cc:	2e0d      	cmp	r6, #13
 80825ce:	d80a      	bhi.n	80825e6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 80825d0:	2e07      	cmp	r6, #7
 80825d2:	d91c      	bls.n	808260e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80825d4:	f1a6 0308 	sub.w	r3, r6, #8
 80825d8:	2b05      	cmp	r3, #5
 80825da:	d818      	bhi.n	808260e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80825dc:	e8df f003 	tbb	[pc, r3]
 80825e0:	17110f0d 	.word	0x17110f0d
 80825e4:	1513      	.short	0x1513
 80825e6:	2e22      	cmp	r6, #34	; 0x22
 80825e8:	d001      	beq.n	80825ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80825ea:	2e5c      	cmp	r6, #92	; 0x5c
 80825ec:	d10f      	bne.n	808260e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 80825ee:	4631      	mov	r1, r6
                write('b');
 80825f0:	4620      	mov	r0, r4
 80825f2:	f7ff feba 	bl	808236a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 80825f6:	4629      	mov	r1, r5
    while (s != end) {
 80825f8:	e7d4      	b.n	80825a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 80825fa:	2162      	movs	r1, #98	; 0x62
 80825fc:	e7f8      	b.n	80825f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 80825fe:	2174      	movs	r1, #116	; 0x74
 8082600:	e7f6      	b.n	80825f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 8082602:	216e      	movs	r1, #110	; 0x6e
 8082604:	e7f4      	b.n	80825f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 8082606:	2166      	movs	r1, #102	; 0x66
 8082608:	e7f2      	b.n	80825f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 808260a:	2172      	movs	r1, #114	; 0x72
 808260c:	e7f0      	b.n	80825f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 808260e:	6823      	ldr	r3, [r4, #0]
 8082610:	4632      	mov	r2, r6
 8082612:	4641      	mov	r1, r8
 8082614:	4620      	mov	r0, r4
 8082616:	68db      	ldr	r3, [r3, #12]
 8082618:	4798      	blx	r3
                break;
 808261a:	e7ec      	b.n	80825f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
 808261c:	428d      	cmp	r5, r1
 808261e:	d004      	beq.n	808262a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 8082620:	6823      	ldr	r3, [r4, #0]
 8082622:	4620      	mov	r0, r4
 8082624:	689b      	ldr	r3, [r3, #8]
 8082626:	1a6a      	subs	r2, r5, r1
 8082628:	4798      	blx	r3
    }
    write('"');
 808262a:	2122      	movs	r1, #34	; 0x22
 808262c:	4620      	mov	r0, r4
 808262e:	f7ff fe9c 	bl	808236a <_ZN5spark10JSONWriter5writeEc>
}
 8082632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082636:	bf00      	nop
 8082638:	08082c17 	.word	0x08082c17

0808263c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 808263c:	b570      	push	{r4, r5, r6, lr}
 808263e:	4604      	mov	r4, r0
 8082640:	460d      	mov	r5, r1
 8082642:	4616      	mov	r6, r2
    writeSeparator();
 8082644:	f7ff ff64 	bl	8082510 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 8082648:	4620      	mov	r0, r4
 808264a:	4632      	mov	r2, r6
 808264c:	4629      	mov	r1, r5
 808264e:	f7ff ff9d 	bl	808258c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 8082652:	2302      	movs	r3, #2
}
 8082654:	4620      	mov	r0, r4
    state_ = VALUE;
 8082656:	7123      	strb	r3, [r4, #4]
}
 8082658:	bd70      	pop	{r4, r5, r6, pc}

0808265a <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 808265a:	b570      	push	{r4, r5, r6, lr}
 808265c:	4604      	mov	r4, r0
 808265e:	460d      	mov	r5, r1
 8082660:	4616      	mov	r6, r2
    writeSeparator();
 8082662:	f7ff ff55 	bl	8082510 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 8082666:	4620      	mov	r0, r4
 8082668:	4632      	mov	r2, r6
 808266a:	4629      	mov	r1, r5
 808266c:	f7ff ff8e 	bl	808258c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 8082670:	2301      	movs	r3, #1
}
 8082672:	4620      	mov	r0, r4
    state_ = NEXT;
 8082674:	7123      	strb	r3, [r4, #4]
}
 8082676:	bd70      	pop	{r4, r5, r6, pc}

08082678 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8082678:	2300      	movs	r3, #0
 808267a:	b513      	push	{r0, r1, r4, lr}
 808267c:	4c07      	ldr	r4, [pc, #28]	; (808269c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808267e:	461a      	mov	r2, r3
 8082680:	4619      	mov	r1, r3
 8082682:	4620      	mov	r0, r4
 8082684:	9300      	str	r3, [sp, #0]
 8082686:	f7ff fbdf 	bl	8081e48 <_ZN9IPAddressC1Ehhhh>
 808268a:	4620      	mov	r0, r4
 808268c:	4a04      	ldr	r2, [pc, #16]	; (80826a0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808268e:	4905      	ldr	r1, [pc, #20]	; (80826a4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8082690:	b002      	add	sp, #8
 8082692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8082696:	f000 b807 	b.w	80826a8 <__aeabi_atexit>
 808269a:	bf00      	nop
 808269c:	200005a8 	.word	0x200005a8
 80826a0:	20000078 	.word	0x20000078
 80826a4:	08081dc3 	.word	0x08081dc3

080826a8 <__aeabi_atexit>:
 80826a8:	460b      	mov	r3, r1
 80826aa:	4601      	mov	r1, r0
 80826ac:	4618      	mov	r0, r3
 80826ae:	f000 b805 	b.w	80826bc <__cxa_atexit>

080826b2 <_ZdlPvj>:
 80826b2:	f7fd bcf2 	b.w	808009a <_ZdlPv>

080826b6 <_ZnwjRKSt9nothrow_t>:
 80826b6:	f7fd bcee 	b.w	8080096 <_Znwj>
	...

080826bc <__cxa_atexit>:
 80826bc:	b510      	push	{r4, lr}
 80826be:	4604      	mov	r4, r0
 80826c0:	4804      	ldr	r0, [pc, #16]	; (80826d4 <__cxa_atexit+0x18>)
 80826c2:	4613      	mov	r3, r2
 80826c4:	b120      	cbz	r0, 80826d0 <__cxa_atexit+0x14>
 80826c6:	460a      	mov	r2, r1
 80826c8:	2002      	movs	r0, #2
 80826ca:	4621      	mov	r1, r4
 80826cc:	f3af 8000 	nop.w
 80826d0:	bd10      	pop	{r4, pc}
 80826d2:	bf00      	nop
 80826d4:	00000000 	.word	0x00000000

080826d8 <memcpy>:
 80826d8:	440a      	add	r2, r1
 80826da:	4291      	cmp	r1, r2
 80826dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80826e0:	d100      	bne.n	80826e4 <memcpy+0xc>
 80826e2:	4770      	bx	lr
 80826e4:	b510      	push	{r4, lr}
 80826e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80826ea:	4291      	cmp	r1, r2
 80826ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80826f0:	d1f9      	bne.n	80826e6 <memcpy+0xe>
 80826f2:	bd10      	pop	{r4, pc}

080826f4 <memmove>:
 80826f4:	4288      	cmp	r0, r1
 80826f6:	b510      	push	{r4, lr}
 80826f8:	eb01 0402 	add.w	r4, r1, r2
 80826fc:	d902      	bls.n	8082704 <memmove+0x10>
 80826fe:	4284      	cmp	r4, r0
 8082700:	4623      	mov	r3, r4
 8082702:	d807      	bhi.n	8082714 <memmove+0x20>
 8082704:	1e43      	subs	r3, r0, #1
 8082706:	42a1      	cmp	r1, r4
 8082708:	d008      	beq.n	808271c <memmove+0x28>
 808270a:	f811 2b01 	ldrb.w	r2, [r1], #1
 808270e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8082712:	e7f8      	b.n	8082706 <memmove+0x12>
 8082714:	4601      	mov	r1, r0
 8082716:	4402      	add	r2, r0
 8082718:	428a      	cmp	r2, r1
 808271a:	d100      	bne.n	808271e <memmove+0x2a>
 808271c:	bd10      	pop	{r4, pc}
 808271e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8082722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8082726:	e7f7      	b.n	8082718 <memmove+0x24>

08082728 <memset>:
 8082728:	4603      	mov	r3, r0
 808272a:	4402      	add	r2, r0
 808272c:	4293      	cmp	r3, r2
 808272e:	d100      	bne.n	8082732 <memset+0xa>
 8082730:	4770      	bx	lr
 8082732:	f803 1b01 	strb.w	r1, [r3], #1
 8082736:	e7f9      	b.n	808272c <memset+0x4>

08082738 <srand>:
 8082738:	b538      	push	{r3, r4, r5, lr}
 808273a:	4b0d      	ldr	r3, [pc, #52]	; (8082770 <srand+0x38>)
 808273c:	4604      	mov	r4, r0
 808273e:	681d      	ldr	r5, [r3, #0]
 8082740:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8082742:	b97b      	cbnz	r3, 8082764 <srand+0x2c>
 8082744:	2018      	movs	r0, #24
 8082746:	f7fe f86b 	bl	8080820 <malloc>
 808274a:	4a0a      	ldr	r2, [pc, #40]	; (8082774 <srand+0x3c>)
 808274c:	4b0a      	ldr	r3, [pc, #40]	; (8082778 <srand+0x40>)
 808274e:	63a8      	str	r0, [r5, #56]	; 0x38
 8082750:	e9c0 2300 	strd	r2, r3, [r0]
 8082754:	4b09      	ldr	r3, [pc, #36]	; (808277c <srand+0x44>)
 8082756:	2201      	movs	r2, #1
 8082758:	6083      	str	r3, [r0, #8]
 808275a:	230b      	movs	r3, #11
 808275c:	8183      	strh	r3, [r0, #12]
 808275e:	2300      	movs	r3, #0
 8082760:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8082764:	2200      	movs	r2, #0
 8082766:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8082768:	611c      	str	r4, [r3, #16]
 808276a:	615a      	str	r2, [r3, #20]
 808276c:	bd38      	pop	{r3, r4, r5, pc}
 808276e:	bf00      	nop
 8082770:	20000014 	.word	0x20000014
 8082774:	abcd330e 	.word	0xabcd330e
 8082778:	e66d1234 	.word	0xe66d1234
 808277c:	0005deec 	.word	0x0005deec

08082780 <strchr>:
 8082780:	4603      	mov	r3, r0
 8082782:	b2c9      	uxtb	r1, r1
 8082784:	4618      	mov	r0, r3
 8082786:	f813 2b01 	ldrb.w	r2, [r3], #1
 808278a:	b112      	cbz	r2, 8082792 <strchr+0x12>
 808278c:	428a      	cmp	r2, r1
 808278e:	d1f9      	bne.n	8082784 <strchr+0x4>
 8082790:	4770      	bx	lr
 8082792:	2900      	cmp	r1, #0
 8082794:	bf18      	it	ne
 8082796:	2000      	movne	r0, #0
 8082798:	4770      	bx	lr

0808279a <strchrnul>:
 808279a:	b510      	push	{r4, lr}
 808279c:	4604      	mov	r4, r0
 808279e:	f7ff ffef 	bl	8082780 <strchr>
 80827a2:	b918      	cbnz	r0, 80827ac <strchrnul+0x12>
 80827a4:	4620      	mov	r0, r4
 80827a6:	f000 f814 	bl	80827d2 <strlen>
 80827aa:	4420      	add	r0, r4
 80827ac:	bd10      	pop	{r4, pc}

080827ae <strcmp>:
 80827ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80827b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80827b6:	2a01      	cmp	r2, #1
 80827b8:	bf28      	it	cs
 80827ba:	429a      	cmpcs	r2, r3
 80827bc:	d0f7      	beq.n	80827ae <strcmp>
 80827be:	1ad0      	subs	r0, r2, r3
 80827c0:	4770      	bx	lr

080827c2 <strcpy>:
 80827c2:	4603      	mov	r3, r0
 80827c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80827c8:	f803 2b01 	strb.w	r2, [r3], #1
 80827cc:	2a00      	cmp	r2, #0
 80827ce:	d1f9      	bne.n	80827c4 <strcpy+0x2>
 80827d0:	4770      	bx	lr

080827d2 <strlen>:
 80827d2:	4603      	mov	r3, r0
 80827d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80827d8:	2a00      	cmp	r2, #0
 80827da:	d1fb      	bne.n	80827d4 <strlen+0x2>
 80827dc:	1a18      	subs	r0, r3, r0
 80827de:	3801      	subs	r0, #1
 80827e0:	4770      	bx	lr

080827e2 <strncmp>:
 80827e2:	b510      	push	{r4, lr}
 80827e4:	b16a      	cbz	r2, 8082802 <strncmp+0x20>
 80827e6:	3901      	subs	r1, #1
 80827e8:	1884      	adds	r4, r0, r2
 80827ea:	f810 3b01 	ldrb.w	r3, [r0], #1
 80827ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80827f2:	4293      	cmp	r3, r2
 80827f4:	d103      	bne.n	80827fe <strncmp+0x1c>
 80827f6:	42a0      	cmp	r0, r4
 80827f8:	d001      	beq.n	80827fe <strncmp+0x1c>
 80827fa:	2b00      	cmp	r3, #0
 80827fc:	d1f5      	bne.n	80827ea <strncmp+0x8>
 80827fe:	1a98      	subs	r0, r3, r2
 8082800:	bd10      	pop	{r4, pc}
 8082802:	4610      	mov	r0, r2
 8082804:	e7fc      	b.n	8082800 <strncmp+0x1e>

08082806 <strrchr>:
 8082806:	b538      	push	{r3, r4, r5, lr}
 8082808:	4603      	mov	r3, r0
 808280a:	460c      	mov	r4, r1
 808280c:	b969      	cbnz	r1, 808282a <strrchr+0x24>
 808280e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8082812:	f7ff bfb5 	b.w	8082780 <strchr>
 8082816:	4605      	mov	r5, r0
 8082818:	1c43      	adds	r3, r0, #1
 808281a:	4621      	mov	r1, r4
 808281c:	4618      	mov	r0, r3
 808281e:	f7ff ffaf 	bl	8082780 <strchr>
 8082822:	2800      	cmp	r0, #0
 8082824:	d1f7      	bne.n	8082816 <strrchr+0x10>
 8082826:	4628      	mov	r0, r5
 8082828:	bd38      	pop	{r3, r4, r5, pc}
 808282a:	2500      	movs	r5, #0
 808282c:	e7f5      	b.n	808281a <strrchr+0x14>
	...

08082830 <_strtol_l.isra.0>:
 8082830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8082834:	468c      	mov	ip, r1
 8082836:	4686      	mov	lr, r0
 8082838:	4e39      	ldr	r6, [pc, #228]	; (8082920 <_strtol_l.isra.0+0xf0>)
 808283a:	4660      	mov	r0, ip
 808283c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8082840:	5da5      	ldrb	r5, [r4, r6]
 8082842:	f015 0508 	ands.w	r5, r5, #8
 8082846:	d1f8      	bne.n	808283a <_strtol_l.isra.0+0xa>
 8082848:	2c2d      	cmp	r4, #45	; 0x2d
 808284a:	d133      	bne.n	80828b4 <_strtol_l.isra.0+0x84>
 808284c:	f04f 0801 	mov.w	r8, #1
 8082850:	f89c 4000 	ldrb.w	r4, [ip]
 8082854:	f100 0c02 	add.w	ip, r0, #2
 8082858:	2b00      	cmp	r3, #0
 808285a:	d05c      	beq.n	8082916 <_strtol_l.isra.0+0xe6>
 808285c:	2b10      	cmp	r3, #16
 808285e:	d10c      	bne.n	808287a <_strtol_l.isra.0+0x4a>
 8082860:	2c30      	cmp	r4, #48	; 0x30
 8082862:	d10a      	bne.n	808287a <_strtol_l.isra.0+0x4a>
 8082864:	f89c 0000 	ldrb.w	r0, [ip]
 8082868:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808286c:	2858      	cmp	r0, #88	; 0x58
 808286e:	d14d      	bne.n	808290c <_strtol_l.isra.0+0xdc>
 8082870:	2310      	movs	r3, #16
 8082872:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8082876:	f10c 0c02 	add.w	ip, ip, #2
 808287a:	2600      	movs	r6, #0
 808287c:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8082880:	3f01      	subs	r7, #1
 8082882:	fbb7 f9f3 	udiv	r9, r7, r3
 8082886:	4630      	mov	r0, r6
 8082888:	fb03 7a19 	mls	sl, r3, r9, r7
 808288c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8082890:	2d09      	cmp	r5, #9
 8082892:	d818      	bhi.n	80828c6 <_strtol_l.isra.0+0x96>
 8082894:	462c      	mov	r4, r5
 8082896:	42a3      	cmp	r3, r4
 8082898:	dd24      	ble.n	80828e4 <_strtol_l.isra.0+0xb4>
 808289a:	1c75      	adds	r5, r6, #1
 808289c:	d007      	beq.n	80828ae <_strtol_l.isra.0+0x7e>
 808289e:	4581      	cmp	r9, r0
 80828a0:	d31d      	bcc.n	80828de <_strtol_l.isra.0+0xae>
 80828a2:	d101      	bne.n	80828a8 <_strtol_l.isra.0+0x78>
 80828a4:	45a2      	cmp	sl, r4
 80828a6:	db1a      	blt.n	80828de <_strtol_l.isra.0+0xae>
 80828a8:	2601      	movs	r6, #1
 80828aa:	fb00 4003 	mla	r0, r0, r3, r4
 80828ae:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80828b2:	e7eb      	b.n	808288c <_strtol_l.isra.0+0x5c>
 80828b4:	2c2b      	cmp	r4, #43	; 0x2b
 80828b6:	bf08      	it	eq
 80828b8:	f89c 4000 	ldrbeq.w	r4, [ip]
 80828bc:	46a8      	mov	r8, r5
 80828be:	bf08      	it	eq
 80828c0:	f100 0c02 	addeq.w	ip, r0, #2
 80828c4:	e7c8      	b.n	8082858 <_strtol_l.isra.0+0x28>
 80828c6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80828ca:	2d19      	cmp	r5, #25
 80828cc:	d801      	bhi.n	80828d2 <_strtol_l.isra.0+0xa2>
 80828ce:	3c37      	subs	r4, #55	; 0x37
 80828d0:	e7e1      	b.n	8082896 <_strtol_l.isra.0+0x66>
 80828d2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80828d6:	2d19      	cmp	r5, #25
 80828d8:	d804      	bhi.n	80828e4 <_strtol_l.isra.0+0xb4>
 80828da:	3c57      	subs	r4, #87	; 0x57
 80828dc:	e7db      	b.n	8082896 <_strtol_l.isra.0+0x66>
 80828de:	f04f 36ff 	mov.w	r6, #4294967295
 80828e2:	e7e4      	b.n	80828ae <_strtol_l.isra.0+0x7e>
 80828e4:	1c73      	adds	r3, r6, #1
 80828e6:	d106      	bne.n	80828f6 <_strtol_l.isra.0+0xc6>
 80828e8:	2322      	movs	r3, #34	; 0x22
 80828ea:	4638      	mov	r0, r7
 80828ec:	f8ce 3000 	str.w	r3, [lr]
 80828f0:	b942      	cbnz	r2, 8082904 <_strtol_l.isra.0+0xd4>
 80828f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80828f6:	f1b8 0f00 	cmp.w	r8, #0
 80828fa:	d000      	beq.n	80828fe <_strtol_l.isra.0+0xce>
 80828fc:	4240      	negs	r0, r0
 80828fe:	2a00      	cmp	r2, #0
 8082900:	d0f7      	beq.n	80828f2 <_strtol_l.isra.0+0xc2>
 8082902:	b10e      	cbz	r6, 8082908 <_strtol_l.isra.0+0xd8>
 8082904:	f10c 31ff 	add.w	r1, ip, #4294967295
 8082908:	6011      	str	r1, [r2, #0]
 808290a:	e7f2      	b.n	80828f2 <_strtol_l.isra.0+0xc2>
 808290c:	2430      	movs	r4, #48	; 0x30
 808290e:	2b00      	cmp	r3, #0
 8082910:	d1b3      	bne.n	808287a <_strtol_l.isra.0+0x4a>
 8082912:	2308      	movs	r3, #8
 8082914:	e7b1      	b.n	808287a <_strtol_l.isra.0+0x4a>
 8082916:	2c30      	cmp	r4, #48	; 0x30
 8082918:	d0a4      	beq.n	8082864 <_strtol_l.isra.0+0x34>
 808291a:	230a      	movs	r3, #10
 808291c:	e7ad      	b.n	808287a <_strtol_l.isra.0+0x4a>
 808291e:	bf00      	nop
 8082920:	08082c1f 	.word	0x08082c1f

08082924 <strtol>:
 8082924:	4613      	mov	r3, r2
 8082926:	460a      	mov	r2, r1
 8082928:	4601      	mov	r1, r0
 808292a:	4802      	ldr	r0, [pc, #8]	; (8082934 <strtol+0x10>)
 808292c:	6800      	ldr	r0, [r0, #0]
 808292e:	f7ff bf7f 	b.w	8082830 <_strtol_l.isra.0>
 8082932:	bf00      	nop
 8082934:	20000014 	.word	0x20000014

08082938 <dynalib_user>:
 8082938:	0808001d 0808005d 08080085 08080089     ....]...........
 8082948:	00000000 3d3d0a0a 4c203d3d 20504f4f     ......==== LOOP 
 8082958:	3d3d3d3d 6c654300 616c756c 203d2072     ====.Cellular = 
 8082968:	202e6425 6f6c4320 3d206475 2e642520     %d.  Cloud = %d.
 8082978:	6d697400 6f742065 6e6f6320 7463656e     .time to connect
 8082988:	6c25203a 68430075 206c6c69 20726f66     : %lu.Chill for 
 8082998:	46003032 454c4941 6f740044 206c6174     20.FAILED.total 
 80829a8:	656d6974 6c25203a 66202c75 756c6961     time: %lu, failu
 80829b8:	3a736572 00642520 74206f67 6c73206f     res: %d.go to sl
 80829c8:	00706565                                eep.

080829cc <_ZTVN5spark10LogHandlerE>:
	...
 80829dc:	080800a1 080800c5                       ........

080829e4 <_ZTVN5spark16SerialLogHandlerE>:
	...
 80829ec:	080800d1 08080105 080818c9 080800c7     ................
 80829fc:	69726977 5300676e 65747379 6c73206d     wiring.System sl
 8082a0c:	20706565 666e6f63 72756769 6f697461     eep configuratio
 8082a1c:	7369206e 766e6920 64696c61 6162002e     n is invalid..ba
 8082a2c:	53006475 61697265 5355006c 72655342     ud.Serial.USBSer
 8082a3c:	316c6169 4f534a00 7274534e 4c6d6165     ial1.JSONStreamL
 8082a4c:	6148676f 656c646e 70610072 30250070     ogHandler.app.%0
 8082a5c:	20753031 00205d00 2800202c 00203a29     10u .] ., .(): .
 8082a6c:	63005b20 2065646f 2500203d 65640069      [.code = .%i.de
 8082a7c:	6c696174 203d2073 000a0d00 0063006d     tails = ....m.c.
 8082a8c:	6e6c0066 006e6600 6f630074 64006564     f.ln.fn.t.code.d
 8082a9c:	69617465 0000006c                       etail...

08082aa4 <_ZTVN5spark16JSONStreamWriterE>:
	...
 8082aac:	08080c19 08080c3f 08080bff 080822d7     ....?........"..

08082abc <_ZTVN5spark16StreamLogHandlerE>:
	...
 8082ac4:	080810f5 0808110d 080818c9 080800c7     ................

08082ad4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 8082adc:	08081121 08081135 08081a71 08080c07     !...5...q.......

08082aec <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 8082af4:	08080c17 08080c4d 08081805 08080c09     ....M...........

08082b04 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 8082b0c:	08080c15 08080c5b 0808101d 08080c77     ....[.......w...
 8082b1c:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
 8082b2c:	007a2553 74637361 00656d69              S%z.asctime.

08082b38 <_ZTV9IPAddress>:
	...
 8082b40:	08081dd3 08081dc3 08081dc5              ............

08082b4c <_ZTV9USBSerial>:
	...
 8082b54:	08081e65 08081ecb 08081ea3 08080af9     e...............
 8082b64:	08081e95 08081e67 08081e77 08081ec5     ....g...w.......
 8082b74:	08081e87 08081e61                       ....a...

08082b7c <_ZTVN5spark13CellularClassE>:
	...
 8082b84:	080820a3 08082099 0808208f 08082009     . ... ... ... ..
 8082b94:	08082083 08082077 0808206b 08082063     . ..w ..k ..c ..
 8082ba4:	08082059 0808204f 08082013              Y ..O ... ..

08082bb0 <_ZTV11USARTSerial>:
	...
 8082bb8:	080820dd 08082145 08082121 08080af9     . ..E!..!!......
 8082bc8:	080820f1 0808210d 080820ff 0808211b     . ...!... ...!..
 8082bd8:	080820df 080820e3                       . ... ..

08082be0 <_ZTVN5spark12NetworkClassE>:
	...
 8082be8:	080821e5 080821ef 080821f9 08082203     .!...!...!..."..
 8082bf8:	0808220d 08082219 08082225 08082231     ."..."..%"..1"..
 8082c08:	08082239 08082243 0808224d 75007525     9"..C"..M"..%u.u
 8082c18:	78343025                                 %04x.

08082c1d <_ZSt7nothrow>:
	...

08082c1e <_ctype_>:
 8082c1e:	20202000 20202020 28282020 20282828     .         ((((( 
 8082c2e:	20202020 20202020 20202020 20202020                     
 8082c3e:	10108820 10101010 10101010 10101010      ...............
 8082c4e:	04040410 04040404 10040404 10101010     ................
 8082c5e:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8082c6e:	01010101 01010101 01010101 10101010     ................
 8082c7e:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8082c8e:	02020202 02020202 02020202 10101010     ................
 8082c9e:	00000020 00000000 00000000 00000000      ...............
	...

08082d1f <link_const_variable_data_end>:
	...

08082d20 <link_constructors_location>:
 8082d20:	080803f1 	.word	0x080803f1
 8082d24:	080809a5 	.word	0x080809a5
 8082d28:	080818b9 	.word	0x080818b9
 8082d2c:	08081be5 	.word	0x08081be5
 8082d30:	08081c1d 	.word	0x08081c1d
 8082d34:	080820ad 	.word	0x080820ad
 8082d38:	08082295 	.word	0x08082295
 8082d3c:	08082679 	.word	0x08082679
