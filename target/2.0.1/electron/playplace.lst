
c:/Users/karaw/Documents/aquarealtime/resdev/software/playplace/target/2.0.1/electron/playplace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001284  0808001c  0808001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080812a0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080812a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004d8  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  08081310  08081310  00021310  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08081338  08081338  00021338  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b7054  00000000  00000000  0002133c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000dbec  00000000  00000000  000d8390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00012cc3  00000000  00000000  000e5f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001618  00000000  00000000  000f8c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000040c0  00000000  00000000  000fa257  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00020343  00000000  00000000  000fe317  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001e3f5  00000000  00000000  0011e65a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ae97c  00000000  00000000  0013ca4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000036fc  00000000  00000000  001eb3cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <link_dynalib_end+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <link_dynalib_end+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f000 ffdf 	bl	8080ff0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <link_dynalib_end+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <link_dynalib_end+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f000 ffe7 	bl	808100c <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <link_dynalib_end+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000000 	.word	0x20000000
 8080048:	080812a4 	.word	0x080812a4
 808004c:	2000006c 	.word	0x2000006c
 8080050:	2000006c 	.word	0x2000006c
 8080054:	20000544 	.word	0x20000544
 8080058:	20000544 	.word	0x20000544

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f000 fcf7 	bl	8080a50 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080062:	2500      	movs	r5, #0
 8080064:	4e05      	ldr	r6, [pc, #20]	; (808007c <module_user_init+0x20>)
 8080066:	4c06      	ldr	r4, [pc, #24]	; (8080080 <module_user_init+0x24>)
 8080068:	1ba4      	subs	r4, r4, r6
 808006a:	08a4      	lsrs	r4, r4, #2
 808006c:	42a5      	cmp	r5, r4
 808006e:	d100      	bne.n	8080072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080072:	f856 3b04 	ldr.w	r3, [r6], #4
 8080076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f7      	b.n	808006c <module_user_init+0x10>
 808007c:	08081280 	.word	0x08081280
 8080080:	080812a0 	.word	0x080812a0

08080084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080084:	f000 b87c 	b.w	8080180 <setup>

08080088 <module_user_loop>:
}

void module_user_loop() {
 8080088:	b508      	push	{r3, lr}
    loop();
 808008a:	f000 f8b9 	bl	8080200 <loop>
    _post_loop();
}
 808008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 8080092:	f000 bc9f 	b.w	80809d4 <_post_loop>

08080096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 8080096:	f000 bac3 	b.w	8080620 <malloc>

0808009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 808009a:	f000 bac9 	b.w	8080630 <free>

0808009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 808009e:	7800      	ldrb	r0, [r0, #0]
 80800a0:	fab0 f080 	clz	r0, r0
 80800a4:	0940      	lsrs	r0, r0, #5
 80800a6:	4770      	bx	lr

080800a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800a8:	2301      	movs	r3, #1
 80800aa:	7003      	strb	r3, [r0, #0]
 80800ac:	4770      	bx	lr

080800ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80800ae:	b510      	push	{r4, lr}
 80800b0:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80800b2:	6800      	ldr	r0, [r0, #0]
 80800b4:	b108      	cbz	r0, 80800ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80800b6:	f000 fabb 	bl	8080630 <free>
class SystemClass {
 80800ba:	4620      	mov	r0, r4
 80800bc:	bd10      	pop	{r4, pc}

080800be <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80800be:	b40e      	push	{r1, r2, r3}
 80800c0:	b503      	push	{r0, r1, lr}
 80800c2:	ab03      	add	r3, sp, #12
 80800c4:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 80800c8:	2101      	movs	r1, #1
        va_start(args, format);
 80800ca:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 80800cc:	f000 fbdc 	bl	8080888 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80800d0:	b002      	add	sp, #8
 80800d2:	f85d eb04 	ldr.w	lr, [sp], #4
 80800d6:	b003      	add	sp, #12
 80800d8:	4770      	bx	lr

080800da <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80800da:	2300      	movs	r3, #0
 80800dc:	6840      	ldr	r0, [r0, #4]
 80800de:	461a      	mov	r2, r3
 80800e0:	4619      	mov	r1, r3
 80800e2:	f000 ba4d 	b.w	8080580 <network_off>

080800e6 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80800e6:	2200      	movs	r2, #0
 80800e8:	6840      	ldr	r0, [r0, #4]
 80800ea:	4611      	mov	r1, r2
 80800ec:	f000 ba38 	b.w	8080560 <network_ready>

080800f0 <_ZN8particle24SystemSleepConfigurationC1Ev>:
};

class SystemSleepConfiguration: protected SystemSleepConfigurationHelper {
public:
    // Constructor
    SystemSleepConfiguration()
 80800f0:	b510      	push	{r4, lr}
 80800f2:	4604      	mov	r4, r0
            : SystemSleepConfigurationHelper(&config_),
 80800f4:	3004      	adds	r0, #4
              config_(),
              valid_(true) {
 80800f6:	2210      	movs	r2, #16
 80800f8:	2100      	movs	r1, #0
        : config_(config) {
 80800fa:	6020      	str	r0, [r4, #0]
              valid_(true) {
 80800fc:	f000 ff86 	bl	808100c <memset>
 8080100:	2301      	movs	r3, #1
 8080102:	7523      	strb	r3, [r4, #20]
        config_.size = sizeof(hal_sleep_config_t);
 8080104:	4b02      	ldr	r3, [pc, #8]	; (8080110 <_ZN8particle24SystemSleepConfigurationC1Ev+0x20>)
        config_.version = HAL_SLEEP_VERSION;
        config_.mode = HAL_SLEEP_MODE_NONE;
        config_.flags = 0;
        config_.wakeup_sources = nullptr;
    }
 8080106:	4620      	mov	r0, r4
        config_.size = sizeof(hal_sleep_config_t);
 8080108:	6063      	str	r3, [r4, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
 808010a:	2300      	movs	r3, #0
 808010c:	7223      	strb	r3, [r4, #8]
    }
 808010e:	bd10      	pop	{r4, pc}
 8080110:	00030010 	.word	0x00030010

08080114 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
 8080114:	b538      	push	{r3, r4, r5, lr}
 8080116:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
 8080118:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
 808011a:	b128      	cbz	r0, 8080128 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
 808011c:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
 808011e:	210c      	movs	r1, #12
 8080120:	f000 ff53 	bl	8080fca <_ZdlPvj>
            wakeupSource = next;
 8080124:	4628      	mov	r0, r5
        while (wakeupSource) {
 8080126:	e7f8      	b.n	808011a <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
 8080128:	4620      	mov	r0, r4
 808012a:	bd38      	pop	{r3, r4, r5, pc}

0808012c <_ZN8particle24SystemSleepConfiguration8durationEm>:
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
 808012c:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
 808012e:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
 8080130:	4605      	mov	r5, r0
 8080132:	460e      	mov	r6, r1
        if (valid_) {
 8080134:	b1cb      	cbz	r3, 808016a <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
 8080136:	6803      	ldr	r3, [r0, #0]
 8080138:	68db      	ldr	r3, [r3, #12]
        if (!start) {
 808013a:	b123      	cbz	r3, 8080146 <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
 808013c:	889a      	ldrh	r2, [r3, #4]
 808013e:	2a04      	cmp	r2, #4
 8080140:	d017      	beq.n	8080172 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
 8080142:	689b      	ldr	r3, [r3, #8]
        while (start) {
 8080144:	e7f9      	b.n	808013a <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
 8080146:	2010      	movs	r0, #16
 8080148:	490b      	ldr	r1, [pc, #44]	; (8080178 <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
 808014a:	f000 ff40 	bl	8080fce <_ZnwjRKSt9nothrow_t>
 808014e:	4604      	mov	r4, r0
 8080150:	b168      	cbz	r0, 808016e <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
 8080152:	2210      	movs	r2, #16
 8080154:	2100      	movs	r1, #0
 8080156:	f000 ff59 	bl	808100c <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
 808015a:	4b08      	ldr	r3, [pc, #32]	; (808017c <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
 808015c:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
 808015e:	2304      	movs	r3, #4
 8080160:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 8080162:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 8080164:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
 8080166:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
 808016a:	4628      	mov	r0, r5
 808016c:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
 808016e:	7528      	strb	r0, [r5, #20]
                return *this;
 8080170:	e7fb      	b.n	808016a <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
 8080172:	60de      	str	r6, [r3, #12]
                return *this;
 8080174:	e7f9      	b.n	808016a <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
 8080176:	bf00      	nop
 8080178:	0808127c 	.word	0x0808127c
 808017c:	00030010 	.word	0x00030010

08080180 <setup>:
#define CLOUD_WAIT 30

unsigned long connectMillis = CELL_CONNECT_SECONDS * 1000;

// setup() runs once, when the device is first turned on.
void setup() {
 8080180:	b508      	push	{r3, lr}
  Serial.begin(9600);
 8080182:	f000 fd63 	bl	8080c4c <_Z16_fetch_usbserialv>
}
 8080186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
 808018a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808018e:	f000 bd43 	b.w	8080c18 <_ZN9USBSerial5beginEl>
	...

08080194 <_Z9deepSleepi>:
  deepSleep(60*5);
}

// Sleep ULP way
int deepSleep(int seconds)
{
 8080194:	b510      	push	{r4, lr}
  if (seconds <= 0)
 8080196:	1e04      	subs	r4, r0, #0
{
 8080198:	b08a      	sub	sp, #40	; 0x28
  if (seconds <= 0)
 808019a:	dc05      	bgt.n	80801a8 <_Z9deepSleepi+0x14>
  {
    seconds = 10;
    Serial.printlnf("Zero sleep time, adjusting to 10 seconds sleep time.");
 808019c:	f000 fd56 	bl	8080c4c <_Z16_fetch_usbserialv>
 80801a0:	4915      	ldr	r1, [pc, #84]	; (80801f8 <_Z9deepSleepi+0x64>)
 80801a2:	f7ff ff8c 	bl	80800be <_ZN5Print8printlnfEPKcz>
    seconds = 10;
 80801a6:	240a      	movs	r4, #10
  }
  Serial.printlnf("Going to sleep for %d minutes %d seconds.", seconds / 60, seconds % 60);
 80801a8:	f000 fd50 	bl	8080c4c <_Z16_fetch_usbserialv>
 80801ac:	233c      	movs	r3, #60	; 0x3c
 80801ae:	fbb4 f2f3 	udiv	r2, r4, r3
 80801b2:	4912      	ldr	r1, [pc, #72]	; (80801fc <_Z9deepSleepi+0x68>)
 80801b4:	fb03 4312 	mls	r3, r3, r2, r4
 80801b8:	f7ff ff81 	bl	80800be <_ZN5Print8printlnfEPKcz>
  SystemSleepConfiguration config;
 80801bc:	a804      	add	r0, sp, #16
 80801be:	f7ff ff97 	bl	80800f0 <_ZN8particle24SystemSleepConfigurationC1Ev>
        if (valid_) {
 80801c2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80801c6:	b113      	cbz	r3, 80801ce <_Z9deepSleepi+0x3a>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 80801c8:	2303      	movs	r3, #3
 80801ca:	f88d 3018 	strb.w	r3, [sp, #24]
  config.mode(SystemSleepMode::HIBERNATE)
        .duration(seconds * 1000);  // Takes msec
 80801ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80801d2:	a804      	add	r0, sp, #16
 80801d4:	4361      	muls	r1, r4
 80801d6:	f7ff ffa9 	bl	808012c <_ZN8particle24SystemSleepConfiguration8durationEm>
  System.sleep(config);
 80801da:	a801      	add	r0, sp, #4
 80801dc:	a904      	add	r1, sp, #16
 80801de:	f000 fa75 	bl	80806cc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
 80801e2:	9801      	ldr	r0, [sp, #4]
 80801e4:	b108      	cbz	r0, 80801ea <_Z9deepSleepi+0x56>
            free(wakeupSource_);
 80801e6:	f000 fa23 	bl	8080630 <free>
  SystemSleepConfiguration config;
 80801ea:	a804      	add	r0, sp, #16
 80801ec:	f7ff ff92 	bl	8080114 <_ZN8particle24SystemSleepConfigurationD1Ev>
  return 1;
}
 80801f0:	2001      	movs	r0, #1
 80801f2:	b00a      	add	sp, #40	; 0x28
 80801f4:	bd10      	pop	{r4, pc}
 80801f6:	bf00      	nop
 80801f8:	08081088 	.word	0x08081088
 80801fc:	080810bd 	.word	0x080810bd

08080200 <loop>:
void loop() {
 8080200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  delay(1000);
 8080204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080208:	f000 fb82 	bl	8080910 <delay>
  Serial.println("==== LOOP ====");
 808020c:	f000 fd1e 	bl	8080c4c <_Z16_fetch_usbserialv>
 8080210:	494e      	ldr	r1, [pc, #312]	; (808034c <loop+0x14c>)
 8080212:	f000 fb12 	bl	808083a <_ZN5Print7printlnEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080216:	f000 f8cd 	bl	80803b4 <HAL_Timer_Get_Milli_Seconds>
 808021a:	4680      	mov	r8, r0
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 808021c:	f000 f9e0 	bl	80805e0 <spark_cloud_flag_connect>
  if (waitFor(Particle.connected, connectMillis))
 8080220:	4b4b      	ldr	r3, [pc, #300]	; (8080350 <loop+0x150>)
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080222:	2000      	movs	r0, #0
 8080224:	681c      	ldr	r4, [r3, #0]
 8080226:	f000 f8cd 	bl	80803c4 <hal_timer_millis>
 808022a:	f04f 0a00 	mov.w	sl, #0
 808022e:	4681      	mov	r9, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080230:	2500      	movs	r5, #0
        return hal_timer_millis(nullptr);
 8080232:	2000      	movs	r0, #0
 8080234:	f000 f8c6 	bl	80803c4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080238:	ebb0 0609 	subs.w	r6, r0, r9
 808023c:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
 8080240:	42af      	cmp	r7, r5
 8080242:	bf08      	it	eq
 8080244:	42a6      	cmpeq	r6, r4
 8080246:	d205      	bcs.n	8080254 <loop+0x54>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080248:	f000 f9d2 	bl	80805f0 <spark_cloud_flag_connected>
 808024c:	b910      	cbnz	r0, 8080254 <loop+0x54>
            spark_process();
 808024e:	f000 f9bf 	bl	80805d0 <spark_process>
        while (_while() && !_condition()) {
 8080252:	e7ee      	b.n	8080232 <loop+0x32>
 8080254:	f000 f9cc 	bl	80805f0 <spark_cloud_flag_connected>
 8080258:	2800      	cmp	r0, #0
 808025a:	d061      	beq.n	8080320 <loop+0x120>
    Serial.printlnf("time to connect %lu", millis()-startTime);
 808025c:	f000 fcf6 	bl	8080c4c <_Z16_fetch_usbserialv>
 8080260:	4604      	mov	r4, r0
 8080262:	f000 f8a7 	bl	80803b4 <HAL_Timer_Get_Milli_Seconds>
 8080266:	493b      	ldr	r1, [pc, #236]	; (8080354 <loop+0x154>)
 8080268:	eba0 0208 	sub.w	r2, r0, r8
 808026c:	4620      	mov	r0, r4
 808026e:	f7ff ff26 	bl	80800be <_ZN5Print8printlnfEPKcz>
    Serial.printlnf("Cellular = %d. Cloud = %d.",(int)Cellular.ready(), (int)Particle.connected());
 8080272:	f000 fceb 	bl	8080c4c <_Z16_fetch_usbserialv>
 8080276:	4c38      	ldr	r4, [pc, #224]	; (8080358 <loop+0x158>)
 8080278:	4605      	mov	r5, r0
 808027a:	4620      	mov	r0, r4
 808027c:	f7ff ff33 	bl	80800e6 <_ZN5spark13CellularClass5readyEv>
 8080280:	4606      	mov	r6, r0
 8080282:	f000 f9b5 	bl	80805f0 <spark_cloud_flag_connected>
 8080286:	4632      	mov	r2, r6
 8080288:	4603      	mov	r3, r0
 808028a:	4934      	ldr	r1, [pc, #208]	; (808035c <loop+0x15c>)
 808028c:	4628      	mov	r0, r5
 808028e:	f7ff ff16 	bl	80800be <_ZN5Print8printlnfEPKcz>
    delay(5000);
 8080292:	f241 3088 	movw	r0, #5000	; 0x1388
 8080296:	f000 fb3b 	bl	8080910 <delay>
    Serial.printlnf("wait 5 Cellular = %d. Cloud = %d.",(int)Cellular.ready(), (int)Particle.connected());
 808029a:	f000 fcd7 	bl	8080c4c <_Z16_fetch_usbserialv>
 808029e:	4605      	mov	r5, r0
 80802a0:	4620      	mov	r0, r4
 80802a2:	f7ff ff20 	bl	80800e6 <_ZN5spark13CellularClass5readyEv>
 80802a6:	4606      	mov	r6, r0
 80802a8:	f000 f9a2 	bl	80805f0 <spark_cloud_flag_connected>
 80802ac:	4632      	mov	r2, r6
 80802ae:	4603      	mov	r3, r0
 80802b0:	492b      	ldr	r1, [pc, #172]	; (8080360 <loop+0x160>)
 80802b2:	4628      	mov	r0, r5
 80802b4:	f7ff ff03 	bl	80800be <_ZN5Print8printlnfEPKcz>
 80802b8:	f000 f99a 	bl	80805f0 <spark_cloud_flag_connected>
    if (Particle.connected())
 80802bc:	b348      	cbz	r0, 8080312 <loop+0x112>
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
 80802be:	2500      	movs	r5, #0
      Serial.println("turn everything off");
 80802c0:	f000 fcc4 	bl	8080c4c <_Z16_fetch_usbserialv>
 80802c4:	4927      	ldr	r1, [pc, #156]	; (8080364 <loop+0x164>)
 80802c6:	f000 fab8 	bl	808083a <_ZN5Print7printlnEPKc>
      Particle.disconnect();
 80802ca:	a801      	add	r0, sp, #4
 80802cc:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80802d0:	f88d 500c 	strb.w	r5, [sp, #12]
 80802d4:	f000 fbee 	bl	8080ab4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80802d8:	462a      	mov	r2, r5
 80802da:	2102      	movs	r1, #2
 80802dc:	6860      	ldr	r0, [r4, #4]
 80802de:	f000 f937 	bl	8080550 <network_disconnect>
      Cellular.off();
 80802e2:	4620      	mov	r0, r4
 80802e4:	f7ff fef9 	bl	80800da <_ZN5spark13CellularClass3offEv>
      Serial.printlnf("Cellular = %d. Cloud = %d.",(int)Cellular.ready(), (int)Particle.connected());
 80802e8:	f000 fcb0 	bl	8080c4c <_Z16_fetch_usbserialv>
 80802ec:	4605      	mov	r5, r0
 80802ee:	4620      	mov	r0, r4
 80802f0:	f7ff fef9 	bl	80800e6 <_ZN5spark13CellularClass5readyEv>
 80802f4:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80802f6:	f000 f97b 	bl	80805f0 <spark_cloud_flag_connected>
 80802fa:	4622      	mov	r2, r4
 80802fc:	4603      	mov	r3, r0
 80802fe:	4917      	ldr	r1, [pc, #92]	; (808035c <loop+0x15c>)
 8080300:	4628      	mov	r0, r5
 8080302:	f7ff fedc 	bl	80800be <_ZN5Print8printlnfEPKcz>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080306:	f000 f855 	bl	80803b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808030a:	4b17      	ldr	r3, [pc, #92]	; (8080368 <loop+0x168>)
 808030c:	6018      	str	r0, [r3, #0]
    		spark_process();
 808030e:	f000 f95f 	bl	80805d0 <spark_process>
  deepSleep(60*5);
 8080312:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8080316:	f7ff ff3d 	bl	8080194 <_Z9deepSleepi>
}
 808031a:	b004      	add	sp, #16
 808031c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    Serial.println("did not connect");
 8080320:	f000 fc94 	bl	8080c4c <_Z16_fetch_usbserialv>
 8080324:	4911      	ldr	r1, [pc, #68]	; (808036c <loop+0x16c>)
 8080326:	f000 fa88 	bl	808083a <_ZN5Print7printlnEPKc>
    Serial.printlnf("Cellular = %d. Cloud = %d.",(int)Cellular.ready(), (int)Particle.connected());
 808032a:	f000 fc8f 	bl	8080c4c <_Z16_fetch_usbserialv>
 808032e:	4604      	mov	r4, r0
 8080330:	4809      	ldr	r0, [pc, #36]	; (8080358 <loop+0x158>)
 8080332:	f7ff fed8 	bl	80800e6 <_ZN5spark13CellularClass5readyEv>
 8080336:	4605      	mov	r5, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080338:	f000 f95a 	bl	80805f0 <spark_cloud_flag_connected>
 808033c:	462a      	mov	r2, r5
 808033e:	4603      	mov	r3, r0
 8080340:	4906      	ldr	r1, [pc, #24]	; (808035c <loop+0x15c>)
 8080342:	4620      	mov	r0, r4
 8080344:	f7ff febb 	bl	80800be <_ZN5Print8printlnfEPKcz>
 8080348:	e7e3      	b.n	8080312 <loop+0x112>
 808034a:	bf00      	nop
 808034c:	080810e7 	.word	0x080810e7
 8080350:	20000000 	.word	0x20000000
 8080354:	080810f6 	.word	0x080810f6
 8080358:	200003e0 	.word	0x200003e0
 808035c:	08081111 	.word	0x08081111
 8080360:	0808110a 	.word	0x0808110a
 8080364:	0808112c 	.word	0x0808112c
 8080368:	20000538 	.word	0x20000538
 808036c:	08081140 	.word	0x08081140

08080370 <_GLOBAL__sub_I_SystemMode>:
              error_(SYSTEM_ERROR_NONE) {
 8080370:	2300      	movs	r3, #0
    }
    delay(1000);
  }
  Serial.printlnf("OK.");
  return secondCounter;
 8080372:	b510      	push	{r4, lr}
 8080374:	4c08      	ldr	r4, [pc, #32]	; (8080398 <_GLOBAL__sub_I_SystemMode+0x28>)
        set_system_mode(mode);
 8080376:	2003      	movs	r0, #3
              error_(SYSTEM_ERROR_NONE) {
 8080378:	6023      	str	r3, [r4, #0]
 808037a:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 808037c:	71a3      	strb	r3, [r4, #6]
 808037e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8080382:	60a3      	str	r3, [r4, #8]
        set_system_mode(mode);
 8080384:	f000 f8a6 	bl	80804d4 <set_system_mode>
SYSTEM_MODE(MANUAL);  
 8080388:	4620      	mov	r0, r4
 808038a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_MODE(MANUAL);  
 808038e:	4a03      	ldr	r2, [pc, #12]	; (808039c <_GLOBAL__sub_I_SystemMode+0x2c>)
 8080390:	4903      	ldr	r1, [pc, #12]	; (80803a0 <_GLOBAL__sub_I_SystemMode+0x30>)
 8080392:	f000 be15 	b.w	8080fc0 <__aeabi_atexit>
 8080396:	bf00      	nop
 8080398:	20000070 	.word	0x20000070
 808039c:	2000006c 	.word	0x2000006c
 80803a0:	080800af 	.word	0x080800af

080803a4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80803a4:	b508      	push	{r3, lr}
 80803a6:	4b02      	ldr	r3, [pc, #8]	; (80803b0 <HAL_RNG_GetRandomNumber+0xc>)
 80803a8:	681b      	ldr	r3, [r3, #0]
 80803aa:	685b      	ldr	r3, [r3, #4]
 80803ac:	9301      	str	r3, [sp, #4]
 80803ae:	bd08      	pop	{r3, pc}
 80803b0:	0804019c 	.word	0x0804019c

080803b4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80803b4:	b508      	push	{r3, lr}
 80803b6:	4b02      	ldr	r3, [pc, #8]	; (80803c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80803b8:	681b      	ldr	r3, [r3, #0]
 80803ba:	695b      	ldr	r3, [r3, #20]
 80803bc:	9301      	str	r3, [sp, #4]
 80803be:	bd08      	pop	{r3, pc}
 80803c0:	0804019c 	.word	0x0804019c

080803c4 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80803c4:	b508      	push	{r3, lr}
 80803c6:	4b02      	ldr	r3, [pc, #8]	; (80803d0 <hal_timer_millis+0xc>)
 80803c8:	681b      	ldr	r3, [r3, #0]
 80803ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80803cc:	9301      	str	r3, [sp, #4]
 80803ce:	bd08      	pop	{r3, pc}
 80803d0:	0804019c 	.word	0x0804019c

080803d4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80803d4:	b508      	push	{r3, lr}
 80803d6:	4b02      	ldr	r3, [pc, #8]	; (80803e0 <hal_usart_init+0xc>)
 80803d8:	681b      	ldr	r3, [r3, #0]
 80803da:	699b      	ldr	r3, [r3, #24]
 80803dc:	9301      	str	r3, [sp, #4]
 80803de:	bd08      	pop	{r3, pc}
 80803e0:	080401c4 	.word	0x080401c4

080803e4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80803e4:	b508      	push	{r3, lr}
 80803e6:	4b02      	ldr	r3, [pc, #8]	; (80803f0 <hal_usart_write+0xc>)
 80803e8:	681b      	ldr	r3, [r3, #0]
 80803ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80803ec:	9301      	str	r3, [sp, #4]
 80803ee:	bd08      	pop	{r3, pc}
 80803f0:	080401c4 	.word	0x080401c4

080803f4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80803f4:	b508      	push	{r3, lr}
 80803f6:	4b02      	ldr	r3, [pc, #8]	; (8080400 <hal_usart_available+0xc>)
 80803f8:	681b      	ldr	r3, [r3, #0]
 80803fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80803fc:	9301      	str	r3, [sp, #4]
 80803fe:	bd08      	pop	{r3, pc}
 8080400:	080401c4 	.word	0x080401c4

08080404 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8080404:	b508      	push	{r3, lr}
 8080406:	4b02      	ldr	r3, [pc, #8]	; (8080410 <hal_usart_read+0xc>)
 8080408:	681b      	ldr	r3, [r3, #0]
 808040a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808040c:	9301      	str	r3, [sp, #4]
 808040e:	bd08      	pop	{r3, pc}
 8080410:	080401c4 	.word	0x080401c4

08080414 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8080414:	b508      	push	{r3, lr}
 8080416:	4b02      	ldr	r3, [pc, #8]	; (8080420 <hal_usart_peek+0xc>)
 8080418:	681b      	ldr	r3, [r3, #0]
 808041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808041c:	9301      	str	r3, [sp, #4]
 808041e:	bd08      	pop	{r3, pc}
 8080420:	080401c4 	.word	0x080401c4

08080424 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8080424:	b508      	push	{r3, lr}
 8080426:	4b02      	ldr	r3, [pc, #8]	; (8080430 <hal_usart_flush+0xc>)
 8080428:	681b      	ldr	r3, [r3, #0]
 808042a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808042c:	9301      	str	r3, [sp, #4]
 808042e:	bd08      	pop	{r3, pc}
 8080430:	080401c4 	.word	0x080401c4

08080434 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8080434:	b508      	push	{r3, lr}
 8080436:	4b02      	ldr	r3, [pc, #8]	; (8080440 <hal_usart_available_data_for_write+0xc>)
 8080438:	681b      	ldr	r3, [r3, #0]
 808043a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808043c:	9301      	str	r3, [sp, #4]
 808043e:	bd08      	pop	{r3, pc}
 8080440:	080401c4 	.word	0x080401c4

08080444 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8080444:	b508      	push	{r3, lr}
 8080446:	4b02      	ldr	r3, [pc, #8]	; (8080450 <inet_gethostbyname+0xc>)
 8080448:	681b      	ldr	r3, [r3, #0]
 808044a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808044c:	9301      	str	r3, [sp, #4]
 808044e:	bd08      	pop	{r3, pc}
 8080450:	08060020 	.word	0x08060020

08080454 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8080454:	b508      	push	{r3, lr}
 8080456:	4b02      	ldr	r3, [pc, #8]	; (8080460 <HAL_USB_USART_Init+0xc>)
 8080458:	681b      	ldr	r3, [r3, #0]
 808045a:	681b      	ldr	r3, [r3, #0]
 808045c:	9301      	str	r3, [sp, #4]
 808045e:	bd08      	pop	{r3, pc}
 8080460:	0806001c 	.word	0x0806001c

08080464 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8080464:	b508      	push	{r3, lr}
 8080466:	4b02      	ldr	r3, [pc, #8]	; (8080470 <HAL_USB_USART_Begin+0xc>)
 8080468:	681b      	ldr	r3, [r3, #0]
 808046a:	685b      	ldr	r3, [r3, #4]
 808046c:	9301      	str	r3, [sp, #4]
 808046e:	bd08      	pop	{r3, pc}
 8080470:	0806001c 	.word	0x0806001c

08080474 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080474:	b508      	push	{r3, lr}
 8080476:	4b02      	ldr	r3, [pc, #8]	; (8080480 <HAL_USB_USART_Available_Data+0xc>)
 8080478:	681b      	ldr	r3, [r3, #0]
 808047a:	691b      	ldr	r3, [r3, #16]
 808047c:	9301      	str	r3, [sp, #4]
 808047e:	bd08      	pop	{r3, pc}
 8080480:	0806001c 	.word	0x0806001c

08080484 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080484:	b508      	push	{r3, lr}
 8080486:	4b02      	ldr	r3, [pc, #8]	; (8080490 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8080488:	681b      	ldr	r3, [r3, #0]
 808048a:	695b      	ldr	r3, [r3, #20]
 808048c:	9301      	str	r3, [sp, #4]
 808048e:	bd08      	pop	{r3, pc}
 8080490:	0806001c 	.word	0x0806001c

08080494 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080494:	b508      	push	{r3, lr}
 8080496:	4b02      	ldr	r3, [pc, #8]	; (80804a0 <HAL_USB_USART_Receive_Data+0xc>)
 8080498:	681b      	ldr	r3, [r3, #0]
 808049a:	699b      	ldr	r3, [r3, #24]
 808049c:	9301      	str	r3, [sp, #4]
 808049e:	bd08      	pop	{r3, pc}
 80804a0:	0806001c 	.word	0x0806001c

080804a4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80804a4:	b508      	push	{r3, lr}
 80804a6:	4b02      	ldr	r3, [pc, #8]	; (80804b0 <HAL_USB_USART_Send_Data+0xc>)
 80804a8:	681b      	ldr	r3, [r3, #0]
 80804aa:	69db      	ldr	r3, [r3, #28]
 80804ac:	9301      	str	r3, [sp, #4]
 80804ae:	bd08      	pop	{r3, pc}
 80804b0:	0806001c 	.word	0x0806001c

080804b4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80804b4:	b508      	push	{r3, lr}
 80804b6:	4b02      	ldr	r3, [pc, #8]	; (80804c0 <HAL_USB_USART_Flush_Data+0xc>)
 80804b8:	681b      	ldr	r3, [r3, #0]
 80804ba:	6a1b      	ldr	r3, [r3, #32]
 80804bc:	9301      	str	r3, [sp, #4]
 80804be:	bd08      	pop	{r3, pc}
 80804c0:	0806001c 	.word	0x0806001c

080804c4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80804c4:	b508      	push	{r3, lr}
 80804c6:	4b02      	ldr	r3, [pc, #8]	; (80804d0 <log_message+0xc>)
 80804c8:	681b      	ldr	r3, [r3, #0]
 80804ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80804cc:	9301      	str	r3, [sp, #4]
 80804ce:	bd08      	pop	{r3, pc}
 80804d0:	080201a0 	.word	0x080201a0

080804d4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80804d4:	b508      	push	{r3, lr}
 80804d6:	4b02      	ldr	r3, [pc, #8]	; (80804e0 <set_system_mode+0xc>)
 80804d8:	681b      	ldr	r3, [r3, #0]
 80804da:	685b      	ldr	r3, [r3, #4]
 80804dc:	9301      	str	r3, [sp, #4]
 80804de:	bd08      	pop	{r3, pc}
 80804e0:	080401a4 	.word	0x080401a4

080804e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80804e4:	b508      	push	{r3, lr}
 80804e6:	4b02      	ldr	r3, [pc, #8]	; (80804f0 <system_delay_ms+0xc>)
 80804e8:	681b      	ldr	r3, [r3, #0]
 80804ea:	695b      	ldr	r3, [r3, #20]
 80804ec:	9301      	str	r3, [sp, #4]
 80804ee:	bd08      	pop	{r3, pc}
 80804f0:	080401a4 	.word	0x080401a4

080804f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80804f4:	b508      	push	{r3, lr}
 80804f6:	4b03      	ldr	r3, [pc, #12]	; (8080504 <system_ctrl_set_app_request_handler+0x10>)
 80804f8:	681b      	ldr	r3, [r3, #0]
 80804fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80804fe:	9301      	str	r3, [sp, #4]
 8080500:	bd08      	pop	{r3, pc}
 8080502:	0000      	.short	0x0000
 8080504:	080401a4 	.word	0x080401a4

08080508 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8080508:	b508      	push	{r3, lr}
 808050a:	4b03      	ldr	r3, [pc, #12]	; (8080518 <system_ctrl_set_result+0x10>)
 808050c:	681b      	ldr	r3, [r3, #0]
 808050e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8080512:	9301      	str	r3, [sp, #4]
 8080514:	bd08      	pop	{r3, pc}
 8080516:	0000      	.short	0x0000
 8080518:	080401a4 	.word	0x080401a4

0808051c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
 808051c:	b508      	push	{r3, lr}
 808051e:	4b03      	ldr	r3, [pc, #12]	; (808052c <system_sleep_ext+0x10>)
 8080520:	681b      	ldr	r3, [r3, #0]
 8080522:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8080526:	9301      	str	r3, [sp, #4]
 8080528:	bd08      	pop	{r3, pc}
 808052a:	0000      	.short	0x0000
 808052c:	080401a4 	.word	0x080401a4

08080530 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8080530:	b508      	push	{r3, lr}
 8080532:	4b02      	ldr	r3, [pc, #8]	; (808053c <network_connect+0xc>)
 8080534:	681b      	ldr	r3, [r3, #0]
 8080536:	685b      	ldr	r3, [r3, #4]
 8080538:	9301      	str	r3, [sp, #4]
 808053a:	bd08      	pop	{r3, pc}
 808053c:	080401c8 	.word	0x080401c8

08080540 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8080540:	b508      	push	{r3, lr}
 8080542:	4b02      	ldr	r3, [pc, #8]	; (808054c <network_connecting+0xc>)
 8080544:	681b      	ldr	r3, [r3, #0]
 8080546:	689b      	ldr	r3, [r3, #8]
 8080548:	9301      	str	r3, [sp, #4]
 808054a:	bd08      	pop	{r3, pc}
 808054c:	080401c8 	.word	0x080401c8

08080550 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8080550:	b508      	push	{r3, lr}
 8080552:	4b02      	ldr	r3, [pc, #8]	; (808055c <network_disconnect+0xc>)
 8080554:	681b      	ldr	r3, [r3, #0]
 8080556:	68db      	ldr	r3, [r3, #12]
 8080558:	9301      	str	r3, [sp, #4]
 808055a:	bd08      	pop	{r3, pc}
 808055c:	080401c8 	.word	0x080401c8

08080560 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8080560:	b508      	push	{r3, lr}
 8080562:	4b02      	ldr	r3, [pc, #8]	; (808056c <network_ready+0xc>)
 8080564:	681b      	ldr	r3, [r3, #0]
 8080566:	691b      	ldr	r3, [r3, #16]
 8080568:	9301      	str	r3, [sp, #4]
 808056a:	bd08      	pop	{r3, pc}
 808056c:	080401c8 	.word	0x080401c8

08080570 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8080570:	b508      	push	{r3, lr}
 8080572:	4b02      	ldr	r3, [pc, #8]	; (808057c <network_on+0xc>)
 8080574:	681b      	ldr	r3, [r3, #0]
 8080576:	695b      	ldr	r3, [r3, #20]
 8080578:	9301      	str	r3, [sp, #4]
 808057a:	bd08      	pop	{r3, pc}
 808057c:	080401c8 	.word	0x080401c8

08080580 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8080580:	b508      	push	{r3, lr}
 8080582:	4b02      	ldr	r3, [pc, #8]	; (808058c <network_off+0xc>)
 8080584:	681b      	ldr	r3, [r3, #0]
 8080586:	699b      	ldr	r3, [r3, #24]
 8080588:	9301      	str	r3, [sp, #4]
 808058a:	bd08      	pop	{r3, pc}
 808058c:	080401c8 	.word	0x080401c8

08080590 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8080590:	b508      	push	{r3, lr}
 8080592:	4b02      	ldr	r3, [pc, #8]	; (808059c <network_listen+0xc>)
 8080594:	681b      	ldr	r3, [r3, #0]
 8080596:	69db      	ldr	r3, [r3, #28]
 8080598:	9301      	str	r3, [sp, #4]
 808059a:	bd08      	pop	{r3, pc}
 808059c:	080401c8 	.word	0x080401c8

080805a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80805a0:	b508      	push	{r3, lr}
 80805a2:	4b02      	ldr	r3, [pc, #8]	; (80805ac <network_listening+0xc>)
 80805a4:	681b      	ldr	r3, [r3, #0]
 80805a6:	6a1b      	ldr	r3, [r3, #32]
 80805a8:	9301      	str	r3, [sp, #4]
 80805aa:	bd08      	pop	{r3, pc}
 80805ac:	080401c8 	.word	0x080401c8

080805b0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80805b0:	b508      	push	{r3, lr}
 80805b2:	4b02      	ldr	r3, [pc, #8]	; (80805bc <network_set_listen_timeout+0xc>)
 80805b4:	681b      	ldr	r3, [r3, #0]
 80805b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80805b8:	9301      	str	r3, [sp, #4]
 80805ba:	bd08      	pop	{r3, pc}
 80805bc:	080401c8 	.word	0x080401c8

080805c0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80805c0:	b508      	push	{r3, lr}
 80805c2:	4b02      	ldr	r3, [pc, #8]	; (80805cc <network_get_listen_timeout+0xc>)
 80805c4:	681b      	ldr	r3, [r3, #0]
 80805c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80805c8:	9301      	str	r3, [sp, #4]
 80805ca:	bd08      	pop	{r3, pc}
 80805cc:	080401c8 	.word	0x080401c8

080805d0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80805d0:	b508      	push	{r3, lr}
 80805d2:	4b02      	ldr	r3, [pc, #8]	; (80805dc <spark_process+0xc>)
 80805d4:	681b      	ldr	r3, [r3, #0]
 80805d6:	689b      	ldr	r3, [r3, #8]
 80805d8:	9301      	str	r3, [sp, #4]
 80805da:	bd08      	pop	{r3, pc}
 80805dc:	080401cc 	.word	0x080401cc

080805e0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80805e0:	b508      	push	{r3, lr}
 80805e2:	4b02      	ldr	r3, [pc, #8]	; (80805ec <spark_cloud_flag_connect+0xc>)
 80805e4:	681b      	ldr	r3, [r3, #0]
 80805e6:	68db      	ldr	r3, [r3, #12]
 80805e8:	9301      	str	r3, [sp, #4]
 80805ea:	bd08      	pop	{r3, pc}
 80805ec:	080401cc 	.word	0x080401cc

080805f0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80805f0:	b508      	push	{r3, lr}
 80805f2:	4b02      	ldr	r3, [pc, #8]	; (80805fc <spark_cloud_flag_connected+0xc>)
 80805f4:	681b      	ldr	r3, [r3, #0]
 80805f6:	695b      	ldr	r3, [r3, #20]
 80805f8:	9301      	str	r3, [sp, #4]
 80805fa:	bd08      	pop	{r3, pc}
 80805fc:	080401cc 	.word	0x080401cc

08080600 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080600:	b508      	push	{r3, lr}
 8080602:	4b02      	ldr	r3, [pc, #8]	; (808060c <spark_set_random_seed_from_cloud_handler+0xc>)
 8080604:	681b      	ldr	r3, [r3, #0]
 8080606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080608:	9301      	str	r3, [sp, #4]
 808060a:	bd08      	pop	{r3, pc}
 808060c:	080401cc 	.word	0x080401cc

08080610 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 8080610:	b508      	push	{r3, lr}
 8080612:	4b02      	ldr	r3, [pc, #8]	; (808061c <spark_cloud_disconnect+0xc>)
 8080614:	681b      	ldr	r3, [r3, #0]
 8080616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080618:	9301      	str	r3, [sp, #4]
 808061a:	bd08      	pop	{r3, pc}
 808061c:	080401cc 	.word	0x080401cc

08080620 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8080620:	b508      	push	{r3, lr}
 8080622:	4b02      	ldr	r3, [pc, #8]	; (808062c <malloc+0xc>)
 8080624:	681b      	ldr	r3, [r3, #0]
 8080626:	681b      	ldr	r3, [r3, #0]
 8080628:	9301      	str	r3, [sp, #4]
 808062a:	bd08      	pop	{r3, pc}
 808062c:	080401a0 	.word	0x080401a0

08080630 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8080630:	b508      	push	{r3, lr}
 8080632:	4b02      	ldr	r3, [pc, #8]	; (808063c <free+0xc>)
 8080634:	681b      	ldr	r3, [r3, #0]
 8080636:	685b      	ldr	r3, [r3, #4]
 8080638:	9301      	str	r3, [sp, #4]
 808063a:	bd08      	pop	{r3, pc}
 808063c:	080401a0 	.word	0x080401a0

08080640 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8080640:	b508      	push	{r3, lr}
 8080642:	4b02      	ldr	r3, [pc, #8]	; (808064c <vsnprintf+0xc>)
 8080644:	681b      	ldr	r3, [r3, #0]
 8080646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080648:	9301      	str	r3, [sp, #4]
 808064a:	bd08      	pop	{r3, pc}
 808064c:	080401a0 	.word	0x080401a0

08080650 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8080650:	b508      	push	{r3, lr}
 8080652:	4b02      	ldr	r3, [pc, #8]	; (808065c <newlib_impure_ptr_callback+0xc>)
 8080654:	681b      	ldr	r3, [r3, #0]
 8080656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080658:	9301      	str	r3, [sp, #4]
 808065a:	bd08      	pop	{r3, pc}
 808065c:	080401a0 	.word	0x080401a0

08080660 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8080660:	b510      	push	{r4, lr}
 8080662:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8080664:	6800      	ldr	r0, [r0, #0]
 8080666:	b118      	cbz	r0, 8080670 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 8080668:	f7ff ffe2 	bl	8080630 <free>
            wakeupSource_ = nullptr;
 808066c:	2300      	movs	r3, #0
 808066e:	6023      	str	r3, [r4, #0]
        }
    }
 8080670:	bd10      	pop	{r4, pc}

08080672 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8080672:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8080674:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8080678:	460d      	mov	r5, r1
        error_ = result.error_;
 808067a:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 808067c:	460b      	mov	r3, r1
 808067e:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8080682:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 8080684:	f8c0 2006 	str.w	r2, [r0, #6]
 8080688:	889b      	ldrh	r3, [r3, #4]
 808068a:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 808068c:	f7ff ffe8 	bl	8080660 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 8080690:	682b      	ldr	r3, [r5, #0]
 8080692:	b113      	cbz	r3, 808069a <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8080694:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 8080696:	2300      	movs	r3, #0
 8080698:	602b      	str	r3, [r5, #0]
    }
 808069a:	4620      	mov	r0, r4
 808069c:	bd38      	pop	{r3, r4, r5, pc}
	...

080806a0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
 80806a0:	b538      	push	{r3, r4, r5, lr}
 80806a2:	460c      	mov	r4, r1
 80806a4:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
 80806a6:	f7ff ffdb 	bl	8080660 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
 80806aa:	b144      	cbz	r4, 80806be <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
 80806ac:	8820      	ldrh	r0, [r4, #0]
 80806ae:	f7ff ffb7 	bl	8080620 <malloc>
 80806b2:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
 80806b4:	b128      	cbz	r0, 80806c2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
 80806b6:	4621      	mov	r1, r4
 80806b8:	8822      	ldrh	r2, [r4, #0]
 80806ba:	f000 fc99 	bl	8080ff0 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
 80806be:	2000      	movs	r0, #0
    }
 80806c0:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
 80806c2:	4801      	ldr	r0, [pc, #4]	; (80806c8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
 80806c4:	e7fc      	b.n	80806c0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
 80806c6:	bf00      	nop
 80806c8:	fffffefc 	.word	0xfffffefc

080806cc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
 80806cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80806ce:	4d2d      	ldr	r5, [pc, #180]	; (8080784 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
 80806d0:	7d0b      	ldrb	r3, [r1, #20]
 80806d2:	4604      	mov	r4, r0
 80806d4:	b08b      	sub	sp, #44	; 0x2c
 80806d6:	4608      	mov	r0, r1
 80806d8:	1daf      	adds	r7, r5, #6
 80806da:	2b00      	cmp	r3, #0
 80806dc:	d038      	beq.n	8080750 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
 80806de:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
 80806e0:	791b      	ldrb	r3, [r3, #4]
 80806e2:	2b00      	cmp	r3, #0
 80806e4:	d034      	beq.n	8080750 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
 80806e6:	2200      	movs	r2, #0
    SleepResult() {}
 80806e8:	4b27      	ldr	r3, [pc, #156]	; (8080788 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
 80806ea:	a902      	add	r1, sp, #8
 80806ec:	3004      	adds	r0, #4
 80806ee:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
 80806f0:	9202      	str	r2, [sp, #8]
 80806f2:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
 80806f6:	f88d 200e 	strb.w	r2, [sp, #14]
 80806fa:	f7ff ff0f 	bl	808051c <system_sleep_ext>
        compatResult_ = result.compatResult_;
 80806fe:	f8dd 300e 	ldr.w	r3, [sp, #14]
        result.setError(static_cast<system_error_t>(ret));
 8080702:	b200      	sxth	r0, r0
 8080704:	f8c5 3006 	str.w	r3, [r5, #6]
 8080708:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
 808070c:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
 8080710:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 8080712:	9902      	ldr	r1, [sp, #8]
 8080714:	4628      	mov	r0, r5
        compatResult_ = result.compatResult_;
 8080716:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
 8080718:	f7ff ffc2 	bl	80806a0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
 808071c:	a802      	add	r0, sp, #8
 808071e:	f7ff ff9f 	bl	8080660 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
 8080722:	2300      	movs	r3, #0
 8080724:	6023      	str	r3, [r4, #0]
 8080726:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 8080728:	71a3      	strb	r3, [r4, #6]
 808072a:	8123      	strh	r3, [r4, #8]
 808072c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8080730:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
 8080732:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 8080736:	4620      	mov	r0, r4
        error_ = result.error_;
 8080738:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
 808073a:	683b      	ldr	r3, [r7, #0]
        copyWakeupSource(result.wakeupSource_);
 808073c:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
 808073e:	f8c4 3006 	str.w	r3, [r4, #6]
 8080742:	88bb      	ldrh	r3, [r7, #4]
 8080744:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
 8080746:	f7ff ffab 	bl	80806a0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
 808074a:	4620      	mov	r0, r4
 808074c:	b00b      	add	sp, #44	; 0x2c
 808074e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
 8080750:	2600      	movs	r6, #0
 8080752:	2320      	movs	r3, #32
 8080754:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8080758:	4b0c      	ldr	r3, [pc, #48]	; (808078c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
 808075a:	2032      	movs	r0, #50	; 0x32
 808075c:	9300      	str	r3, [sp, #0]
 808075e:	490c      	ldr	r1, [pc, #48]	; (8080790 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
 8080760:	4633      	mov	r3, r6
 8080762:	aa02      	add	r2, sp, #8
 8080764:	f7ff feae 	bl	80804c4 <log_message>
    SleepResult() {}
 8080768:	4b07      	ldr	r3, [pc, #28]	; (8080788 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
 808076a:	a902      	add	r1, sp, #8
 808076c:	9304      	str	r3, [sp, #16]
        error_ = error;
 808076e:	f64f 63f2 	movw	r3, #65266	; 0xfef2
 8080772:	4804      	ldr	r0, [pc, #16]	; (8080784 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
 8080774:	9602      	str	r6, [sp, #8]
    SleepResult() {}
 8080776:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
 808077a:	f8ad 300c 	strh.w	r3, [sp, #12]
 808077e:	f7ff ff78 	bl	8080672 <_ZN17SystemSleepResultaSEOS_>
 8080782:	e7cb      	b.n	808071c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
 8080784:	2000007c 	.word	0x2000007c
 8080788:	ffff0000 	.word	0xffff0000
 808078c:	08081157 	.word	0x08081157
 8080790:	08081150 	.word	0x08081150

08080794 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8080794:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 8080796:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8080798:	b510      	push	{r4, lr}
 808079a:	4b08      	ldr	r3, [pc, #32]	; (80807bc <_GLOBAL__sub_I_System+0x28>)
 808079c:	4c08      	ldr	r4, [pc, #32]	; (80807c0 <_GLOBAL__sub_I_System+0x2c>)
 808079e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80807a0:	4b08      	ldr	r3, [pc, #32]	; (80807c4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80807a2:	6020      	str	r0, [r4, #0]
 80807a4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80807a6:	71a0      	strb	r0, [r4, #6]
 80807a8:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80807aa:	f7ff fe93 	bl	80804d4 <set_system_mode>
SystemClass System;
 80807ae:	4620      	mov	r0, r4
 80807b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80807b4:	4a04      	ldr	r2, [pc, #16]	; (80807c8 <_GLOBAL__sub_I_System+0x34>)
 80807b6:	4905      	ldr	r1, [pc, #20]	; (80807cc <_GLOBAL__sub_I_System+0x38>)
 80807b8:	f000 bc02 	b.w	8080fc0 <__aeabi_atexit>
 80807bc:	20000088 	.word	0x20000088
 80807c0:	2000007c 	.word	0x2000007c
 80807c4:	ffff0000 	.word	0xffff0000
 80807c8:	2000006c 	.word	0x2000006c
 80807cc:	080800af 	.word	0x080800af

080807d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80807d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80807d2:	4606      	mov	r6, r0
 80807d4:	460d      	mov	r5, r1
  size_t n = 0;
 80807d6:	2400      	movs	r4, #0
 80807d8:	188f      	adds	r7, r1, r2
  while (size--) {
 80807da:	42bd      	cmp	r5, r7
 80807dc:	d00c      	beq.n	80807f8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80807de:	6833      	ldr	r3, [r6, #0]
 80807e0:	4630      	mov	r0, r6
 80807e2:	689b      	ldr	r3, [r3, #8]
 80807e4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80807e8:	4798      	blx	r3
     if (chunk>=0)
 80807ea:	1e03      	subs	r3, r0, #0
 80807ec:	db01      	blt.n	80807f2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80807ee:	441c      	add	r4, r3
  while (size--) {
 80807f0:	e7f3      	b.n	80807da <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80807f2:	2c00      	cmp	r4, #0
 80807f4:	bf08      	it	eq
 80807f6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80807f8:	4620      	mov	r0, r4
 80807fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080807fc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80807fc:	b570      	push	{r4, r5, r6, lr}
 80807fe:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8080800:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8080802:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8080804:	b149      	cbz	r1, 808081a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8080806:	f000 fc2d 	bl	8081064 <strlen>
 808080a:	682b      	ldr	r3, [r5, #0]
 808080c:	4602      	mov	r2, r0
 808080e:	4621      	mov	r1, r4
 8080810:	4628      	mov	r0, r5
    }
 8080812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8080816:	68db      	ldr	r3, [r3, #12]
 8080818:	4718      	bx	r3
    }
 808081a:	bd70      	pop	{r4, r5, r6, pc}

0808081c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 808081c:	6803      	ldr	r3, [r0, #0]
 808081e:	689b      	ldr	r3, [r3, #8]
 8080820:	4718      	bx	r3

08080822 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8080822:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8080824:	210d      	movs	r1, #13
{
 8080826:	4605      	mov	r5, r0
  size_t n = print('\r');
 8080828:	f7ff fff8 	bl	808081c <_ZN5Print5printEc>
  n += print('\n');
 808082c:	210a      	movs	r1, #10
  size_t n = print('\r');
 808082e:	4604      	mov	r4, r0
  n += print('\n');
 8080830:	4628      	mov	r0, r5
 8080832:	f7ff fff3 	bl	808081c <_ZN5Print5printEc>
  return n;
}
 8080836:	4420      	add	r0, r4
 8080838:	bd38      	pop	{r3, r4, r5, pc}

0808083a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808083a:	b538      	push	{r3, r4, r5, lr}
 808083c:	4605      	mov	r5, r0
  return write(str);
 808083e:	f7ff ffdd 	bl	80807fc <_ZN5Print5writeEPKc>
 8080842:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 8080844:	4628      	mov	r0, r5
 8080846:	f7ff ffec 	bl	8080822 <_ZN5Print7printlnEv>
  return n;
}
 808084a:	4420      	add	r0, r4
 808084c:	bd38      	pop	{r3, r4, r5, pc}

0808084e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808084e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8080850:	2a01      	cmp	r2, #1
 8080852:	bf98      	it	ls
 8080854:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8080856:	b530      	push	{r4, r5, lr}
 8080858:	b08b      	sub	sp, #44	; 0x2c
 808085a:	460c      	mov	r4, r1
  *str = '\0';
 808085c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8080860:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 8080862:	4625      	mov	r5, r4
 8080864:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8080868:	fb04 5312 	mls	r3, r4, r2, r5
 808086c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808086e:	2b09      	cmp	r3, #9
 8080870:	bf94      	ite	ls
 8080872:	3330      	addls	r3, #48	; 0x30
 8080874:	3337      	addhi	r3, #55	; 0x37
 8080876:	b2db      	uxtb	r3, r3
  } while(n);
 8080878:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808087a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 808087e:	d9f0      	bls.n	8080862 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8080880:	f7ff ffbc 	bl	80807fc <_ZN5Print5writeEPKc>
}
 8080884:	b00b      	add	sp, #44	; 0x2c
 8080886:	bd30      	pop	{r4, r5, pc}

08080888 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 8080888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808088c:	b086      	sub	sp, #24
 808088e:	af00      	add	r7, sp, #0
 8080890:	4605      	mov	r5, r0
 8080892:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 8080894:	1d38      	adds	r0, r7, #4
 8080896:	2114      	movs	r1, #20
{
 8080898:	4614      	mov	r4, r2
    va_copy(args2, args);
 808089a:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 808089c:	f7ff fed0 	bl	8080640 <vsnprintf>

    if (n<bufsize)
 80808a0:	2813      	cmp	r0, #19
 80808a2:	d80e      	bhi.n	80808c2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80808a4:	4628      	mov	r0, r5
 80808a6:	1d39      	adds	r1, r7, #4
 80808a8:	f7ff ffa8 	bl	80807fc <_ZN5Print5writeEPKc>
 80808ac:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80808ae:	b11e      	cbz	r6, 80808b8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80808b0:	4628      	mov	r0, r5
 80808b2:	f7ff ffb6 	bl	8080822 <_ZN5Print7printlnEv>
 80808b6:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80808b8:	4620      	mov	r0, r4
 80808ba:	3718      	adds	r7, #24
 80808bc:	46bd      	mov	sp, r7
 80808be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80808c2:	f100 0308 	add.w	r3, r0, #8
 80808c6:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80808ca:	46e8      	mov	r8, sp
        char bigger[n+1];
 80808cc:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80808d0:	4622      	mov	r2, r4
 80808d2:	1c41      	adds	r1, r0, #1
 80808d4:	683b      	ldr	r3, [r7, #0]
 80808d6:	4668      	mov	r0, sp
 80808d8:	f7ff feb2 	bl	8080640 <vsnprintf>
  return write(str);
 80808dc:	4669      	mov	r1, sp
 80808de:	4628      	mov	r0, r5
 80808e0:	f7ff ff8c 	bl	80807fc <_ZN5Print5writeEPKc>
 80808e4:	4604      	mov	r4, r0
 80808e6:	46c5      	mov	sp, r8
 80808e8:	e7e1      	b.n	80808ae <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

080808ec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80808ec:	4b01      	ldr	r3, [pc, #4]	; (80808f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80808ee:	4a02      	ldr	r2, [pc, #8]	; (80808f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80808f0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80808f2:	4770      	bx	lr
 80808f4:	2000008c 	.word	0x2000008c
 80808f8:	0808117e 	.word	0x0808117e

080808fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80808fc:	4b02      	ldr	r3, [pc, #8]	; (8080908 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80808fe:	681a      	ldr	r2, [r3, #0]
 8080900:	4b02      	ldr	r3, [pc, #8]	; (808090c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8080902:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8080904:	4770      	bx	lr
 8080906:	bf00      	nop
 8080908:	20000004 	.word	0x20000004
 808090c:	20000090 	.word	0x20000090

08080910 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8080910:	2100      	movs	r1, #0
 8080912:	f7ff bde7 	b.w	80804e4 <system_delay_ms>

08080916 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080916:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080918:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 808091a:	4604      	mov	r4, r0
      if (_M_manager)
 808091c:	b113      	cbz	r3, 8080924 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808091e:	2203      	movs	r2, #3
 8080920:	4601      	mov	r1, r0
 8080922:	4798      	blx	r3
    }
 8080924:	4620      	mov	r0, r4
 8080926:	bd10      	pop	{r4, pc}

08080928 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8080928:	b510      	push	{r4, lr}
 808092a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808092c:	f7ff fff3 	bl	8080916 <_ZNSt14_Function_baseD1Ev>
 8080930:	4620      	mov	r0, r4
 8080932:	bd10      	pop	{r4, pc}

08080934 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8080934:	2300      	movs	r3, #0
 8080936:	4803      	ldr	r0, [pc, #12]	; (8080944 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8080938:	4a03      	ldr	r2, [pc, #12]	; (8080948 <_GLOBAL__sub_I_RGB+0x14>)
 808093a:	4904      	ldr	r1, [pc, #16]	; (808094c <_GLOBAL__sub_I_RGB+0x18>)
 808093c:	6083      	str	r3, [r0, #8]
 808093e:	f000 bb3f 	b.w	8080fc0 <__aeabi_atexit>
 8080942:	bf00      	nop
 8080944:	20000094 	.word	0x20000094
 8080948:	2000006c 	.word	0x2000006c
 808094c:	08080929 	.word	0x08080929

08080950 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8080950:	4b01      	ldr	r3, [pc, #4]	; (8080958 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8080952:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8080954:	4770      	bx	lr
 8080956:	bf00      	nop
 8080958:	20000008 	.word	0x20000008

0808095c <serialEventRun>:
{
 808095c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808095e:	4b17      	ldr	r3, [pc, #92]	; (80809bc <serialEventRun+0x60>)
 8080960:	b143      	cbz	r3, 8080974 <serialEventRun+0x18>
 8080962:	f000 f973 	bl	8080c4c <_Z16_fetch_usbserialv>
 8080966:	6803      	ldr	r3, [r0, #0]
 8080968:	691b      	ldr	r3, [r3, #16]
 808096a:	4798      	blx	r3
 808096c:	2800      	cmp	r0, #0
 808096e:	dd01      	ble.n	8080974 <serialEventRun+0x18>
        serialEvent();
 8080970:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8080974:	4b12      	ldr	r3, [pc, #72]	; (80809c0 <serialEventRun+0x64>)
 8080976:	b143      	cbz	r3, 808098a <serialEventRun+0x2e>
 8080978:	f000 fa80 	bl	8080e7c <_Z22__fetch_global_Serial1v>
 808097c:	6803      	ldr	r3, [r0, #0]
 808097e:	691b      	ldr	r3, [r3, #16]
 8080980:	4798      	blx	r3
 8080982:	2800      	cmp	r0, #0
 8080984:	dd01      	ble.n	808098a <serialEventRun+0x2e>
        serialEvent1();
 8080986:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 808098a:	4b0e      	ldr	r3, [pc, #56]	; (80809c4 <serialEventRun+0x68>)
 808098c:	b10b      	cbz	r3, 8080992 <serialEventRun+0x36>
 808098e:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8080992:	4b0d      	ldr	r3, [pc, #52]	; (80809c8 <serialEventRun+0x6c>)
 8080994:	b10b      	cbz	r3, 808099a <serialEventRun+0x3e>
 8080996:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 808099a:	4b0c      	ldr	r3, [pc, #48]	; (80809cc <serialEventRun+0x70>)
 808099c:	b10b      	cbz	r3, 80809a2 <serialEventRun+0x46>
 808099e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80809a2:	4b0b      	ldr	r3, [pc, #44]	; (80809d0 <serialEventRun+0x74>)
 80809a4:	b143      	cbz	r3, 80809b8 <serialEventRun+0x5c>
 80809a6:	f000 f98f 	bl	8080cc8 <_Z17_fetch_usbserial1v>
 80809aa:	6803      	ldr	r3, [r0, #0]
 80809ac:	691b      	ldr	r3, [r3, #16]
 80809ae:	4798      	blx	r3
 80809b0:	2800      	cmp	r0, #0
 80809b2:	dd01      	ble.n	80809b8 <serialEventRun+0x5c>
        usbSerialEvent1();
 80809b4:	f3af 8000 	nop.w
}
 80809b8:	bd08      	pop	{r3, pc}
 80809ba:	bf00      	nop
	...

080809d4 <_post_loop>:
{
 80809d4:	b508      	push	{r3, lr}
	serialEventRun();
 80809d6:	f7ff ffc1 	bl	808095c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80809da:	f7ff fceb 	bl	80803b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80809de:	4b01      	ldr	r3, [pc, #4]	; (80809e4 <_post_loop+0x10>)
 80809e0:	6018      	str	r0, [r3, #0]
}
 80809e2:	bd08      	pop	{r3, pc}
 80809e4:	20000538 	.word	0x20000538

080809e8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80809e8:	4802      	ldr	r0, [pc, #8]	; (80809f4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80809ea:	4a03      	ldr	r2, [pc, #12]	; (80809f8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80809ec:	4903      	ldr	r1, [pc, #12]	; (80809fc <_Z33system_initialize_user_backup_ramv+0x14>)
 80809ee:	1a12      	subs	r2, r2, r0
 80809f0:	f000 bafe 	b.w	8080ff0 <memcpy>
 80809f4:	40024000 	.word	0x40024000
 80809f8:	40024004 	.word	0x40024004
 80809fc:	080812a0 	.word	0x080812a0

08080a00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080a00:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8080a02:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080a04:	461a      	mov	r2, r3
 8080a06:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080a0a:	9300      	str	r3, [sp, #0]
 8080a0c:	f7ff fd7c 	bl	8080508 <system_ctrl_set_result>
}
 8080a10:	b003      	add	sp, #12
 8080a12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080a18 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8080a18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8080a1a:	8843      	ldrh	r3, [r0, #2]
 8080a1c:	2b0a      	cmp	r3, #10
 8080a1e:	d008      	beq.n	8080a32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8080a20:	2b50      	cmp	r3, #80	; 0x50
 8080a22:	d10b      	bne.n	8080a3c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8080a24:	4b09      	ldr	r3, [pc, #36]	; (8080a4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8080a26:	681b      	ldr	r3, [r3, #0]
 8080a28:	b14b      	cbz	r3, 8080a3e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8080a2a:	b003      	add	sp, #12
 8080a2c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8080a30:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8080a32:	f7ff ffe5 	bl	8080a00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8080a36:	b003      	add	sp, #12
 8080a38:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080a3c:	2300      	movs	r3, #0
 8080a3e:	461a      	mov	r2, r3
 8080a40:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080a44:	9300      	str	r3, [sp, #0]
 8080a46:	f7ff fd5f 	bl	8080508 <system_ctrl_set_result>
}
 8080a4a:	e7f4      	b.n	8080a36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8080a4c:	200000a8 	.word	0x200000a8

08080a50 <module_user_init_hook>:
{
 8080a50:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8080a52:	4c12      	ldr	r4, [pc, #72]	; (8080a9c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8080a54:	2100      	movs	r1, #0
 8080a56:	4812      	ldr	r0, [pc, #72]	; (8080aa0 <module_user_init_hook+0x50>)
 8080a58:	f7ff fdfa 	bl	8080650 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8080a5c:	4d11      	ldr	r5, [pc, #68]	; (8080aa4 <module_user_init_hook+0x54>)
 8080a5e:	6823      	ldr	r3, [r4, #0]
 8080a60:	42ab      	cmp	r3, r5
 8080a62:	bf0c      	ite	eq
 8080a64:	2201      	moveq	r2, #1
 8080a66:	2200      	movne	r2, #0
 8080a68:	4b0f      	ldr	r3, [pc, #60]	; (8080aa8 <module_user_init_hook+0x58>)
 8080a6a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8080a6c:	d002      	beq.n	8080a74 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 8080a6e:	f7ff ffbb 	bl	80809e8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8080a72:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8080a74:	f7ff fc96 	bl	80803a4 <HAL_RNG_GetRandomNumber>
 8080a78:	4604      	mov	r4, r0
    srand(seed);
 8080a7a:	f000 facf 	bl	808101c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8080a7e:	4b0b      	ldr	r3, [pc, #44]	; (8080aac <module_user_init_hook+0x5c>)
 8080a80:	b113      	cbz	r3, 8080a88 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8080a82:	4620      	mov	r0, r4
 8080a84:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8080a88:	2100      	movs	r1, #0
 8080a8a:	4808      	ldr	r0, [pc, #32]	; (8080aac <module_user_init_hook+0x5c>)
 8080a8c:	f7ff fdb8 	bl	8080600 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8080a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8080a94:	2100      	movs	r1, #0
 8080a96:	4806      	ldr	r0, [pc, #24]	; (8080ab0 <module_user_init_hook+0x60>)
 8080a98:	f7ff bd2c 	b.w	80804f4 <system_ctrl_set_app_request_handler>
 8080a9c:	40024000 	.word	0x40024000
 8080aa0:	08080951 	.word	0x08080951
 8080aa4:	9a271c1e 	.word	0x9a271c1e
 8080aa8:	200000a4 	.word	0x200000a4
 8080aac:	00000000 	.word	0x00000000
 8080ab0:	08080a19 	.word	0x08080a19

08080ab4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:
} // namespace

spark_cloud_disconnect_options CloudDisconnectOptions::toSystemOptions() const
{
    spark_cloud_disconnect_options opts = {};
    opts.size = sizeof(opts);
 8080ab4:	2308      	movs	r3, #8

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 8080ab6:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
 8080ab8:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
 8080abc:	6803      	ldr	r3, [r0, #0]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8080abe:	2100      	movs	r1, #0
    opts.flags = flags_;
 8080ac0:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
 8080ac4:	7a03      	ldrb	r3, [r0, #8]
 8080ac6:	f88d 3003 	strb.w	r3, [sp, #3]
    opts.timeout = timeout_;
 8080aca:	6843      	ldr	r3, [r0, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8080acc:	4668      	mov	r0, sp
    opts.timeout = timeout_;
 8080ace:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8080ad0:	f7ff fd9e 	bl	8080610 <spark_cloud_disconnect>
}
 8080ad4:	b003      	add	sp, #12
 8080ad6:	f85d fb04 	ldr.w	pc, [sp], #4

08080ada <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8080ada:	4770      	bx	lr

08080adc <_ZN9IPAddressD0Ev>:
 8080adc:	b510      	push	{r4, lr}
 8080ade:	4604      	mov	r4, r0
 8080ae0:	2108      	movs	r1, #8
 8080ae2:	f000 fa72 	bl	8080fca <_ZdlPvj>
 8080ae6:	4620      	mov	r0, r4
 8080ae8:	bd10      	pop	{r4, pc}

08080aea <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8080aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080aec:	460e      	mov	r6, r1
 8080aee:	2400      	movs	r4, #0
 8080af0:	f100 0708 	add.w	r7, r0, #8
 8080af4:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8080af6:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8080afa:	220a      	movs	r2, #10
 8080afc:	4630      	mov	r0, r6
 8080afe:	f7ff fea6 	bl	808084e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080b02:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080b04:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8080b06:	d101      	bne.n	8080b0c <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8080b08:	4620      	mov	r0, r4
 8080b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8080b0c:	2c00      	cmp	r4, #0
 8080b0e:	d0f2      	beq.n	8080af6 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8080b10:	212e      	movs	r1, #46	; 0x2e
 8080b12:	4630      	mov	r0, r6
 8080b14:	f7ff fe82 	bl	808081c <_ZN5Print5printEc>
 8080b18:	4404      	add	r4, r0
 8080b1a:	e7ec      	b.n	8080af6 <_ZNK9IPAddress7printToER5Print+0xc>

08080b1c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8080b1c:	4a02      	ldr	r2, [pc, #8]	; (8080b28 <_ZN9IPAddressC1Ev+0xc>)
 8080b1e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8080b20:	2200      	movs	r2, #0
 8080b22:	6042      	str	r2, [r0, #4]
}
 8080b24:	4770      	bx	lr
 8080b26:	bf00      	nop
 8080b28:	080811a8 	.word	0x080811a8

08080b2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8080b2c:	4a02      	ldr	r2, [pc, #8]	; (8080b38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8080b2e:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8080b30:	680a      	ldr	r2, [r1, #0]
 8080b32:	6042      	str	r2, [r0, #4]
}
 8080b34:	4770      	bx	lr
 8080b36:	bf00      	nop
 8080b38:	080811a8 	.word	0x080811a8

08080b3c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8080b3c:	4a01      	ldr	r2, [pc, #4]	; (8080b44 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 8080b3e:	e9c0 2100 	strd	r2, r1, [r0]
}
 8080b42:	4770      	bx	lr
 8080b44:	080811a8 	.word	0x080811a8

08080b48 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8080b48:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8080b4a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8080b4e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8080b52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8080b56:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8080b5a:	6044      	str	r4, [r0, #4]
}
 8080b5c:	bd10      	pop	{r4, pc}
	...

08080b60 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8080b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080b62:	4d04      	ldr	r5, [pc, #16]	; (8080b74 <_ZN9IPAddressC1Ehhhh+0x14>)
 8080b64:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8080b66:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8080b6a:	9500      	str	r5, [sp, #0]
 8080b6c:	f7ff ffec 	bl	8080b48 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8080b70:	b003      	add	sp, #12
 8080b72:	bd30      	pop	{r4, r5, pc}
 8080b74:	080811a8 	.word	0x080811a8

08080b78 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8080b78:	7441      	strb	r1, [r0, #17]
}
 8080b7a:	4770      	bx	lr

08080b7c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8080b7c:	4770      	bx	lr

08080b7e <_ZN9USBSerial4readEv>:
{
 8080b7e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8080b80:	2100      	movs	r1, #0
 8080b82:	7c00      	ldrb	r0, [r0, #16]
 8080b84:	f7ff fc86 	bl	8080494 <HAL_USB_USART_Receive_Data>
}
 8080b88:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080b8c:	bd08      	pop	{r3, pc}

08080b8e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 8080b8e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8080b90:	2101      	movs	r1, #1
 8080b92:	7c00      	ldrb	r0, [r0, #16]
 8080b94:	f7ff fc7e 	bl	8080494 <HAL_USB_USART_Receive_Data>
}
 8080b98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080b9c:	bd08      	pop	{r3, pc}

08080b9e <_ZN9USBSerial17availableForWriteEv>:
{
 8080b9e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8080ba0:	7c00      	ldrb	r0, [r0, #16]
 8080ba2:	f7ff fc6f 	bl	8080484 <HAL_USB_USART_Available_Data_For_Write>
}
 8080ba6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080baa:	bd08      	pop	{r3, pc}

08080bac <_ZN9USBSerial9availableEv>:
{
 8080bac:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8080bae:	7c00      	ldrb	r0, [r0, #16]
 8080bb0:	f7ff fc60 	bl	8080474 <HAL_USB_USART_Available_Data>
}
 8080bb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080bb8:	bd08      	pop	{r3, pc}

08080bba <_ZN9USBSerial5writeEh>:
{
 8080bba:	b538      	push	{r3, r4, r5, lr}
 8080bbc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8080bbe:	7c00      	ldrb	r0, [r0, #16]
{
 8080bc0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8080bc2:	f7ff fc5f 	bl	8080484 <HAL_USB_USART_Available_Data_For_Write>
 8080bc6:	2800      	cmp	r0, #0
 8080bc8:	dc01      	bgt.n	8080bce <_ZN9USBSerial5writeEh+0x14>
 8080bca:	7c60      	ldrb	r0, [r4, #17]
 8080bcc:	b128      	cbz	r0, 8080bda <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8080bce:	4629      	mov	r1, r5
 8080bd0:	7c20      	ldrb	r0, [r4, #16]
 8080bd2:	f7ff fc67 	bl	80804a4 <HAL_USB_USART_Send_Data>
 8080bd6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8080bda:	bd38      	pop	{r3, r4, r5, pc}

08080bdc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8080bdc:	7c00      	ldrb	r0, [r0, #16]
 8080bde:	f7ff bc69 	b.w	80804b4 <HAL_USB_USART_Flush_Data>

08080be2 <_ZN9USBSerialD0Ev>:
 8080be2:	b510      	push	{r4, lr}
 8080be4:	4604      	mov	r4, r0
 8080be6:	2114      	movs	r1, #20
 8080be8:	f000 f9ef 	bl	8080fca <_ZdlPvj>
 8080bec:	4620      	mov	r0, r4
 8080bee:	bd10      	pop	{r4, pc}

08080bf0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8080bf0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080bf6:	4604      	mov	r4, r0
 8080bf8:	4608      	mov	r0, r1
 8080bfa:	2100      	movs	r1, #0
 8080bfc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8080c00:	4b04      	ldr	r3, [pc, #16]	; (8080c14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8080c02:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8080c04:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8080c06:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8080c08:	4611      	mov	r1, r2
  _blocking = true;
 8080c0a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8080c0c:	f7ff fc22 	bl	8080454 <HAL_USB_USART_Init>
}
 8080c10:	4620      	mov	r0, r4
 8080c12:	bd10      	pop	{r4, pc}
 8080c14:	080811bc 	.word	0x080811bc

08080c18 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8080c18:	2200      	movs	r2, #0
 8080c1a:	7c00      	ldrb	r0, [r0, #16]
 8080c1c:	f7ff bc22 	b.w	8080464 <HAL_USB_USART_Begin>

08080c20 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8080c20:	b510      	push	{r4, lr}
 8080c22:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8080c24:	2214      	movs	r2, #20
 8080c26:	2100      	movs	r1, #0
 8080c28:	f000 f9f0 	bl	808100c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8080c2c:	4b05      	ldr	r3, [pc, #20]	; (8080c44 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8080c2e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8080c30:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8080c32:	4b05      	ldr	r3, [pc, #20]	; (8080c48 <_Z19acquireSerialBufferv+0x28>)
 8080c34:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8080c36:	f240 1301 	movw	r3, #257	; 0x101
 8080c3a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8080c3c:	2381      	movs	r3, #129	; 0x81
 8080c3e:	8223      	strh	r3, [r4, #16]
}
 8080c40:	bd10      	pop	{r4, pc}
 8080c42:	bf00      	nop
 8080c44:	200000dc 	.word	0x200000dc
 8080c48:	200001dd 	.word	0x200001dd

08080c4c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8080c4c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080c4e:	4d0f      	ldr	r5, [pc, #60]	; (8080c8c <_Z16_fetch_usbserialv+0x40>)
{
 8080c50:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8080c52:	a801      	add	r0, sp, #4
 8080c54:	f7ff ffe4 	bl	8080c20 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080c58:	7829      	ldrb	r1, [r5, #0]
 8080c5a:	f3bf 8f5b 	dmb	ish
 8080c5e:	f011 0401 	ands.w	r4, r1, #1
 8080c62:	d110      	bne.n	8080c86 <_Z16_fetch_usbserialv+0x3a>
 8080c64:	4628      	mov	r0, r5
 8080c66:	f7ff fa1a 	bl	808009e <__cxa_guard_acquire>
 8080c6a:	b160      	cbz	r0, 8080c86 <_Z16_fetch_usbserialv+0x3a>
 8080c6c:	4621      	mov	r1, r4
 8080c6e:	aa01      	add	r2, sp, #4
 8080c70:	4807      	ldr	r0, [pc, #28]	; (8080c90 <_Z16_fetch_usbserialv+0x44>)
 8080c72:	f7ff ffbd 	bl	8080bf0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8080c76:	4628      	mov	r0, r5
 8080c78:	f7ff fa16 	bl	80800a8 <__cxa_guard_release>
 8080c7c:	4a05      	ldr	r2, [pc, #20]	; (8080c94 <_Z16_fetch_usbserialv+0x48>)
 8080c7e:	4906      	ldr	r1, [pc, #24]	; (8080c98 <_Z16_fetch_usbserialv+0x4c>)
 8080c80:	4803      	ldr	r0, [pc, #12]	; (8080c90 <_Z16_fetch_usbserialv+0x44>)
 8080c82:	f000 f99d 	bl	8080fc0 <__aeabi_atexit>
	return _usbserial;
}
 8080c86:	4802      	ldr	r0, [pc, #8]	; (8080c90 <_Z16_fetch_usbserialv+0x44>)
 8080c88:	b007      	add	sp, #28
 8080c8a:	bd30      	pop	{r4, r5, pc}
 8080c8c:	200000ac 	.word	0x200000ac
 8080c90:	200000b4 	.word	0x200000b4
 8080c94:	2000006c 	.word	0x2000006c
 8080c98:	08080b7d 	.word	0x08080b7d

08080c9c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8080c9c:	b510      	push	{r4, lr}
 8080c9e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8080ca0:	2214      	movs	r2, #20
 8080ca2:	2100      	movs	r1, #0
 8080ca4:	f000 f9b2 	bl	808100c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8080ca8:	4b05      	ldr	r3, [pc, #20]	; (8080cc0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8080caa:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8080cac:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8080cae:	4b05      	ldr	r3, [pc, #20]	; (8080cc4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8080cb0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8080cb2:	f240 1301 	movw	r3, #257	; 0x101
 8080cb6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8080cb8:	2381      	movs	r3, #129	; 0x81
 8080cba:	8223      	strh	r3, [r4, #16]
}
 8080cbc:	bd10      	pop	{r4, pc}
 8080cbe:	bf00      	nop
 8080cc0:	2000025e 	.word	0x2000025e
 8080cc4:	2000035f 	.word	0x2000035f

08080cc8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8080cc8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8080cca:	4c0f      	ldr	r4, [pc, #60]	; (8080d08 <_Z17_fetch_usbserial1v+0x40>)
{
 8080ccc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8080cce:	a801      	add	r0, sp, #4
 8080cd0:	f7ff ffe4 	bl	8080c9c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8080cd4:	7823      	ldrb	r3, [r4, #0]
 8080cd6:	f3bf 8f5b 	dmb	ish
 8080cda:	07db      	lsls	r3, r3, #31
 8080cdc:	d410      	bmi.n	8080d00 <_Z17_fetch_usbserial1v+0x38>
 8080cde:	4620      	mov	r0, r4
 8080ce0:	f7ff f9dd 	bl	808009e <__cxa_guard_acquire>
 8080ce4:	b160      	cbz	r0, 8080d00 <_Z17_fetch_usbserial1v+0x38>
 8080ce6:	2101      	movs	r1, #1
 8080ce8:	aa01      	add	r2, sp, #4
 8080cea:	4808      	ldr	r0, [pc, #32]	; (8080d0c <_Z17_fetch_usbserial1v+0x44>)
 8080cec:	f7ff ff80 	bl	8080bf0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8080cf0:	4620      	mov	r0, r4
 8080cf2:	f7ff f9d9 	bl	80800a8 <__cxa_guard_release>
 8080cf6:	4a06      	ldr	r2, [pc, #24]	; (8080d10 <_Z17_fetch_usbserial1v+0x48>)
 8080cf8:	4906      	ldr	r1, [pc, #24]	; (8080d14 <_Z17_fetch_usbserial1v+0x4c>)
 8080cfa:	4804      	ldr	r0, [pc, #16]	; (8080d0c <_Z17_fetch_usbserial1v+0x44>)
 8080cfc:	f000 f960 	bl	8080fc0 <__aeabi_atexit>
  return _usbserial1;
}
 8080d00:	4802      	ldr	r0, [pc, #8]	; (8080d0c <_Z17_fetch_usbserial1v+0x44>)
 8080d02:	b006      	add	sp, #24
 8080d04:	bd10      	pop	{r4, pc}
 8080d06:	bf00      	nop
 8080d08:	200000b0 	.word	0x200000b0
 8080d0c:	200000c8 	.word	0x200000c8
 8080d10:	2000006c 	.word	0x2000006c
 8080d14:	08080b7d 	.word	0x08080b7d

08080d18 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8080d1a:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8080d1c:	b085      	sub	sp, #20
 8080d1e:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080d20:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 8080d22:	460f      	mov	r7, r1
 8080d24:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8080d26:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080d28:	f000 f99c 	bl	8081064 <strlen>
 8080d2c:	687b      	ldr	r3, [r7, #4]
 8080d2e:	b281      	uxth	r1, r0
 8080d30:	9600      	str	r6, [sp, #0]
 8080d32:	4628      	mov	r0, r5
 8080d34:	aa03      	add	r2, sp, #12
 8080d36:	f7ff fb85 	bl	8080444 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080d3a:	b130      	cbz	r0, 8080d4a <_ZN5spark13CellularClass7resolveEPKc+0x32>
 8080d3c:	4631      	mov	r1, r6
 8080d3e:	4620      	mov	r0, r4
 8080d40:	f7ff fefc 	bl	8080b3c <_ZN9IPAddressC1Em>
    }
 8080d44:	4620      	mov	r0, r4
 8080d46:	b005      	add	sp, #20
 8080d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080d4a:	4620      	mov	r0, r4
 8080d4c:	a903      	add	r1, sp, #12
 8080d4e:	f7ff feed 	bl	8080b2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8080d52:	e7f7      	b.n	8080d44 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08080d54 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8080d54:	2200      	movs	r2, #0
 8080d56:	6840      	ldr	r0, [r0, #4]
 8080d58:	4611      	mov	r1, r2
 8080d5a:	f7ff bc21 	b.w	80805a0 <network_listening>

08080d5e <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 8080d5e:	2200      	movs	r2, #0
 8080d60:	6840      	ldr	r0, [r0, #4]
 8080d62:	4611      	mov	r1, r2
 8080d64:	f7ff bc2c 	b.w	80805c0 <network_get_listen_timeout>

08080d68 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8080d68:	2200      	movs	r2, #0
 8080d6a:	6840      	ldr	r0, [r0, #4]
 8080d6c:	f7ff bc20 	b.w	80805b0 <network_set_listen_timeout>

08080d70 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 8080d70:	2200      	movs	r2, #0
 8080d72:	6840      	ldr	r0, [r0, #4]
 8080d74:	f081 0101 	eor.w	r1, r1, #1
 8080d78:	f7ff bc0a 	b.w	8080590 <network_listen>

08080d7c <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 8080d7c:	2300      	movs	r3, #0
 8080d7e:	6840      	ldr	r0, [r0, #4]
 8080d80:	461a      	mov	r2, r3
 8080d82:	4619      	mov	r1, r3
 8080d84:	f7ff bbf4 	b.w	8080570 <network_on>

08080d88 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8080d88:	2200      	movs	r2, #0
 8080d8a:	6840      	ldr	r0, [r0, #4]
 8080d8c:	4611      	mov	r1, r2
 8080d8e:	f7ff bbd7 	b.w	8080540 <network_connecting>

08080d92 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8080d92:	2200      	movs	r2, #0
 8080d94:	2102      	movs	r1, #2
 8080d96:	6840      	ldr	r0, [r0, #4]
 8080d98:	f7ff bbda 	b.w	8080550 <network_disconnect>

08080d9c <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 8080d9c:	2300      	movs	r3, #0
 8080d9e:	6840      	ldr	r0, [r0, #4]
 8080da0:	461a      	mov	r2, r3
 8080da2:	f7ff bbc5 	b.w	8080530 <network_connect>
	...

08080da8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8080da8:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8080daa:	2428      	movs	r4, #40	; 0x28
 8080dac:	4b07      	ldr	r3, [pc, #28]	; (8080dcc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8080dae:	4622      	mov	r2, r4
 8080db0:	4618      	mov	r0, r3
 8080db2:	2100      	movs	r1, #0
 8080db4:	f000 f92a 	bl	808100c <memset>
        cid = -1;
 8080db8:	f04f 32ff 	mov.w	r2, #4294967295
 8080dbc:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8080dbe:	2204      	movs	r2, #4
 8080dc0:	4b03      	ldr	r3, [pc, #12]	; (8080dd0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 8080dc2:	8004      	strh	r4, [r0, #0]
 8080dc4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8080dc6:	4a03      	ldr	r2, [pc, #12]	; (8080dd4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8080dc8:	601a      	str	r2, [r3, #0]
 8080dca:	bd10      	pop	{r4, pc}
 8080dcc:	200003e8 	.word	0x200003e8
 8080dd0:	200003e0 	.word	0x200003e0
 8080dd4:	080811ec 	.word	0x080811ec

08080dd8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8080dd8:	4770      	bx	lr

08080dda <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8080dda:	7441      	strb	r1, [r0, #17]
}
 8080ddc:	4770      	bx	lr

08080dde <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 8080dde:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8080de0:	7c00      	ldrb	r0, [r0, #16]
 8080de2:	f7ff fb27 	bl	8080434 <hal_usart_available_data_for_write>
}
 8080de6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080dea:	bd08      	pop	{r3, pc}

08080dec <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8080dec:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8080dee:	7c00      	ldrb	r0, [r0, #16]
 8080df0:	f7ff fb00 	bl	80803f4 <hal_usart_available>
}
 8080df4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080df8:	bd08      	pop	{r3, pc}

08080dfa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8080dfa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8080dfc:	7c00      	ldrb	r0, [r0, #16]
 8080dfe:	f7ff fb09 	bl	8080414 <hal_usart_peek>
}
 8080e02:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080e06:	bd08      	pop	{r3, pc}

08080e08 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8080e08:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 8080e0a:	7c00      	ldrb	r0, [r0, #16]
 8080e0c:	f7ff fafa 	bl	8080404 <hal_usart_read>
}
 8080e10:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080e14:	bd08      	pop	{r3, pc}

08080e16 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 8080e16:	7c00      	ldrb	r0, [r0, #16]
 8080e18:	f7ff bb04 	b.w	8080424 <hal_usart_flush>

08080e1c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8080e1c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8080e1e:	7c46      	ldrb	r6, [r0, #17]
{
 8080e20:	4604      	mov	r4, r0
 8080e22:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8080e24:	b12e      	cbz	r6, 8080e32 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 8080e26:	4629      	mov	r1, r5
 8080e28:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8080e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8080e2e:	f7ff bad9 	b.w	80803e4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8080e32:	7c00      	ldrb	r0, [r0, #16]
 8080e34:	f7ff fafe 	bl	8080434 <hal_usart_available_data_for_write>
 8080e38:	2800      	cmp	r0, #0
 8080e3a:	dcf4      	bgt.n	8080e26 <_ZN11USARTSerial5writeEh+0xa>
}
 8080e3c:	4630      	mov	r0, r6
 8080e3e:	bd70      	pop	{r4, r5, r6, pc}

08080e40 <_ZN11USARTSerialD0Ev>:
 8080e40:	b510      	push	{r4, lr}
 8080e42:	4604      	mov	r4, r0
 8080e44:	2114      	movs	r1, #20
 8080e46:	f000 f8c0 	bl	8080fca <_ZdlPvj>
 8080e4a:	4620      	mov	r0, r4
 8080e4c:	bd10      	pop	{r4, pc}
	...

08080e50 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8080e50:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8080e54:	b510      	push	{r4, lr}
 8080e56:	4604      	mov	r4, r0
 8080e58:	4608      	mov	r0, r1
 8080e5a:	4611      	mov	r1, r2
 8080e5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8080e60:	e9c4 c201 	strd	ip, r2, [r4, #4]
 8080e64:	4a04      	ldr	r2, [pc, #16]	; (8080e78 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 8080e66:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8080e68:	6022      	str	r2, [r4, #0]
  _blocking = true;
 8080e6a:	2201      	movs	r2, #1
 8080e6c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 8080e6e:	461a      	mov	r2, r3
 8080e70:	f7ff fab0 	bl	80803d4 <hal_usart_init>
}
 8080e74:	4620      	mov	r0, r4
 8080e76:	bd10      	pop	{r4, pc}
 8080e78:	08081220 	.word	0x08081220

08080e7c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8080e7c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8080e7e:	4d0d      	ldr	r5, [pc, #52]	; (8080eb4 <_Z22__fetch_global_Serial1v+0x38>)
 8080e80:	7829      	ldrb	r1, [r5, #0]
 8080e82:	f3bf 8f5b 	dmb	ish
 8080e86:	f011 0401 	ands.w	r4, r1, #1
 8080e8a:	d111      	bne.n	8080eb0 <_Z22__fetch_global_Serial1v+0x34>
 8080e8c:	4628      	mov	r0, r5
 8080e8e:	f7ff f906 	bl	808009e <__cxa_guard_acquire>
 8080e92:	b168      	cbz	r0, 8080eb0 <_Z22__fetch_global_Serial1v+0x34>
 8080e94:	4621      	mov	r1, r4
 8080e96:	4a08      	ldr	r2, [pc, #32]	; (8080eb8 <_Z22__fetch_global_Serial1v+0x3c>)
 8080e98:	4b08      	ldr	r3, [pc, #32]	; (8080ebc <_Z22__fetch_global_Serial1v+0x40>)
 8080e9a:	4809      	ldr	r0, [pc, #36]	; (8080ec0 <_Z22__fetch_global_Serial1v+0x44>)
 8080e9c:	f7ff ffd8 	bl	8080e50 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8080ea0:	4628      	mov	r0, r5
 8080ea2:	f7ff f901 	bl	80800a8 <__cxa_guard_release>
 8080ea6:	4a07      	ldr	r2, [pc, #28]	; (8080ec4 <_Z22__fetch_global_Serial1v+0x48>)
 8080ea8:	4907      	ldr	r1, [pc, #28]	; (8080ec8 <_Z22__fetch_global_Serial1v+0x4c>)
 8080eaa:	4805      	ldr	r0, [pc, #20]	; (8080ec0 <_Z22__fetch_global_Serial1v+0x44>)
 8080eac:	f000 f888 	bl	8080fc0 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8080eb0:	4803      	ldr	r0, [pc, #12]	; (8080ec0 <_Z22__fetch_global_Serial1v+0x44>)
 8080eb2:	bd38      	pop	{r3, r4, r5, pc}
 8080eb4:	20000410 	.word	0x20000410
 8080eb8:	20000414 	.word	0x20000414
 8080ebc:	20000498 	.word	0x20000498
 8080ec0:	2000051c 	.word	0x2000051c
 8080ec4:	2000006c 	.word	0x2000006c
 8080ec8:	08080dd9 	.word	0x08080dd9

08080ecc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8080ecc:	2300      	movs	r3, #0
 8080ece:	6840      	ldr	r0, [r0, #4]
 8080ed0:	461a      	mov	r2, r3
 8080ed2:	f7ff bb2d 	b.w	8080530 <network_connect>

08080ed6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8080ed6:	2200      	movs	r2, #0
 8080ed8:	2102      	movs	r1, #2
 8080eda:	6840      	ldr	r0, [r0, #4]
 8080edc:	f7ff bb38 	b.w	8080550 <network_disconnect>

08080ee0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8080ee0:	2200      	movs	r2, #0
 8080ee2:	6840      	ldr	r0, [r0, #4]
 8080ee4:	4611      	mov	r1, r2
 8080ee6:	f7ff bb2b 	b.w	8080540 <network_connecting>

08080eea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8080eea:	2200      	movs	r2, #0
 8080eec:	6840      	ldr	r0, [r0, #4]
 8080eee:	4611      	mov	r1, r2
 8080ef0:	f7ff bb36 	b.w	8080560 <network_ready>

08080ef4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8080ef4:	2300      	movs	r3, #0
 8080ef6:	6840      	ldr	r0, [r0, #4]
 8080ef8:	461a      	mov	r2, r3
 8080efa:	4619      	mov	r1, r3
 8080efc:	f7ff bb38 	b.w	8080570 <network_on>

08080f00 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8080f00:	2300      	movs	r3, #0
 8080f02:	6840      	ldr	r0, [r0, #4]
 8080f04:	461a      	mov	r2, r3
 8080f06:	4619      	mov	r1, r3
 8080f08:	f7ff bb3a 	b.w	8080580 <network_off>

08080f0c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8080f0c:	2200      	movs	r2, #0
 8080f0e:	6840      	ldr	r0, [r0, #4]
 8080f10:	f081 0101 	eor.w	r1, r1, #1
 8080f14:	f7ff bb3c 	b.w	8080590 <network_listen>

08080f18 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8080f18:	2200      	movs	r2, #0
 8080f1a:	6840      	ldr	r0, [r0, #4]
 8080f1c:	f7ff bb48 	b.w	80805b0 <network_set_listen_timeout>

08080f20 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8080f20:	2200      	movs	r2, #0
 8080f22:	6840      	ldr	r0, [r0, #4]
 8080f24:	4611      	mov	r1, r2
 8080f26:	f7ff bb4b 	b.w	80805c0 <network_get_listen_timeout>

08080f2a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8080f2a:	2200      	movs	r2, #0
 8080f2c:	6840      	ldr	r0, [r0, #4]
 8080f2e:	4611      	mov	r1, r2
 8080f30:	f7ff bb36 	b.w	80805a0 <network_listening>

08080f34 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8080f34:	b570      	push	{r4, r5, r6, lr}
 8080f36:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8080f38:	2600      	movs	r6, #0
 8080f3a:	b086      	sub	sp, #24
 8080f3c:	4604      	mov	r4, r0
    IPAddress addr;
 8080f3e:	a804      	add	r0, sp, #16
 8080f40:	f7ff fdec 	bl	8080b1c <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080f44:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 8080f46:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080f48:	f000 f88c 	bl	8081064 <strlen>
 8080f4c:	4b0a      	ldr	r3, [pc, #40]	; (8080f78 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8080f4e:	9600      	str	r6, [sp, #0]
 8080f50:	b281      	uxth	r1, r0
 8080f52:	685b      	ldr	r3, [r3, #4]
 8080f54:	4628      	mov	r0, r5
 8080f56:	aa03      	add	r2, sp, #12
 8080f58:	f7ff fa74 	bl	8080444 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080f5c:	b130      	cbz	r0, 8080f6c <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8080f5e:	4631      	mov	r1, r6
 8080f60:	4620      	mov	r0, r4
 8080f62:	f7ff fdeb 	bl	8080b3c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8080f66:	4620      	mov	r0, r4
 8080f68:	b006      	add	sp, #24
 8080f6a:	bd70      	pop	{r4, r5, r6, pc}
 8080f6c:	4620      	mov	r0, r4
 8080f6e:	a903      	add	r1, sp, #12
 8080f70:	f7ff fddc 	bl	8080b2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 8080f74:	e7f7      	b.n	8080f66 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 8080f76:	bf00      	nop
 8080f78:	200003e0 	.word	0x200003e0

08080f7c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8080f7c:	4b02      	ldr	r3, [pc, #8]	; (8080f88 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8080f7e:	4a03      	ldr	r2, [pc, #12]	; (8080f8c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8080f80:	601a      	str	r2, [r3, #0]
 8080f82:	2200      	movs	r2, #0
 8080f84:	605a      	str	r2, [r3, #4]

} // spark
 8080f86:	4770      	bx	lr
 8080f88:	20000530 	.word	0x20000530
 8080f8c:	08081250 	.word	0x08081250

08080f90 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8080f90:	2300      	movs	r3, #0
 8080f92:	b513      	push	{r0, r1, r4, lr}
 8080f94:	4c07      	ldr	r4, [pc, #28]	; (8080fb4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8080f96:	461a      	mov	r2, r3
 8080f98:	4619      	mov	r1, r3
 8080f9a:	4620      	mov	r0, r4
 8080f9c:	9300      	str	r3, [sp, #0]
 8080f9e:	f7ff fddf 	bl	8080b60 <_ZN9IPAddressC1Ehhhh>
 8080fa2:	4620      	mov	r0, r4
 8080fa4:	4a04      	ldr	r2, [pc, #16]	; (8080fb8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8080fa6:	4905      	ldr	r1, [pc, #20]	; (8080fbc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8080fa8:	b002      	add	sp, #8
 8080faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8080fae:	f000 b807 	b.w	8080fc0 <__aeabi_atexit>
 8080fb2:	bf00      	nop
 8080fb4:	2000053c 	.word	0x2000053c
 8080fb8:	2000006c 	.word	0x2000006c
 8080fbc:	08080adb 	.word	0x08080adb

08080fc0 <__aeabi_atexit>:
 8080fc0:	460b      	mov	r3, r1
 8080fc2:	4601      	mov	r1, r0
 8080fc4:	4618      	mov	r0, r3
 8080fc6:	f000 b805 	b.w	8080fd4 <__cxa_atexit>

08080fca <_ZdlPvj>:
 8080fca:	f7ff b866 	b.w	808009a <_ZdlPv>

08080fce <_ZnwjRKSt9nothrow_t>:
 8080fce:	f7ff b862 	b.w	8080096 <_Znwj>
	...

08080fd4 <__cxa_atexit>:
 8080fd4:	b510      	push	{r4, lr}
 8080fd6:	4604      	mov	r4, r0
 8080fd8:	4804      	ldr	r0, [pc, #16]	; (8080fec <__cxa_atexit+0x18>)
 8080fda:	4613      	mov	r3, r2
 8080fdc:	b120      	cbz	r0, 8080fe8 <__cxa_atexit+0x14>
 8080fde:	460a      	mov	r2, r1
 8080fe0:	2002      	movs	r0, #2
 8080fe2:	4621      	mov	r1, r4
 8080fe4:	f3af 8000 	nop.w
 8080fe8:	bd10      	pop	{r4, pc}
 8080fea:	bf00      	nop
 8080fec:	00000000 	.word	0x00000000

08080ff0 <memcpy>:
 8080ff0:	440a      	add	r2, r1
 8080ff2:	4291      	cmp	r1, r2
 8080ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8080ff8:	d100      	bne.n	8080ffc <memcpy+0xc>
 8080ffa:	4770      	bx	lr
 8080ffc:	b510      	push	{r4, lr}
 8080ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8081002:	4291      	cmp	r1, r2
 8081004:	f803 4f01 	strb.w	r4, [r3, #1]!
 8081008:	d1f9      	bne.n	8080ffe <memcpy+0xe>
 808100a:	bd10      	pop	{r4, pc}

0808100c <memset>:
 808100c:	4603      	mov	r3, r0
 808100e:	4402      	add	r2, r0
 8081010:	4293      	cmp	r3, r2
 8081012:	d100      	bne.n	8081016 <memset+0xa>
 8081014:	4770      	bx	lr
 8081016:	f803 1b01 	strb.w	r1, [r3], #1
 808101a:	e7f9      	b.n	8081010 <memset+0x4>

0808101c <srand>:
 808101c:	b538      	push	{r3, r4, r5, lr}
 808101e:	4b0d      	ldr	r3, [pc, #52]	; (8081054 <srand+0x38>)
 8081020:	4604      	mov	r4, r0
 8081022:	681d      	ldr	r5, [r3, #0]
 8081024:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8081026:	b97b      	cbnz	r3, 8081048 <srand+0x2c>
 8081028:	2018      	movs	r0, #24
 808102a:	f7ff faf9 	bl	8080620 <malloc>
 808102e:	4a0a      	ldr	r2, [pc, #40]	; (8081058 <srand+0x3c>)
 8081030:	4b0a      	ldr	r3, [pc, #40]	; (808105c <srand+0x40>)
 8081032:	63a8      	str	r0, [r5, #56]	; 0x38
 8081034:	e9c0 2300 	strd	r2, r3, [r0]
 8081038:	4b09      	ldr	r3, [pc, #36]	; (8081060 <srand+0x44>)
 808103a:	2201      	movs	r2, #1
 808103c:	6083      	str	r3, [r0, #8]
 808103e:	230b      	movs	r3, #11
 8081040:	8183      	strh	r3, [r0, #12]
 8081042:	2300      	movs	r3, #0
 8081044:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8081048:	2200      	movs	r2, #0
 808104a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808104c:	611c      	str	r4, [r3, #16]
 808104e:	615a      	str	r2, [r3, #20]
 8081050:	bd38      	pop	{r3, r4, r5, pc}
 8081052:	bf00      	nop
 8081054:	20000008 	.word	0x20000008
 8081058:	abcd330e 	.word	0xabcd330e
 808105c:	e66d1234 	.word	0xe66d1234
 8081060:	0005deec 	.word	0x0005deec

08081064 <strlen>:
 8081064:	4603      	mov	r3, r0
 8081066:	f813 2b01 	ldrb.w	r2, [r3], #1
 808106a:	2a00      	cmp	r2, #0
 808106c:	d1fb      	bne.n	8081066 <strlen+0x2>
 808106e:	1a18      	subs	r0, r3, r0
 8081070:	3801      	subs	r0, #1
 8081072:	4770      	bx	lr

08081074 <dynalib_user>:
 8081074:	001d 0808 005d 0808 0085 0808 0089 0808     ....]...........
 8081084:	0000 0000 655a 6f72 7320 656c 7065 7420     ....Zero sleep t
 8081094:	6d69 2c65 6120 6a64 7375 6974 676e 7420     ime, adjusting t
 80810a4:	206f 3031 7320 6365 6e6f 7364 7320 656c     o 10 seconds sle
 80810b4:	7065 7420 6d69 2e65 4700 696f 676e 7420     ep time..Going t
 80810c4:	206f 6c73 6565 2070 6f66 2072 6425 6d20     o sleep for %d m
 80810d4:	6e69 7475 7365 2520 2064 6573 6f63 646e     inutes %d second
 80810e4:	2e73 3d00 3d3d 203d 4f4c 504f 3d20 3d3d     s..==== LOOP ===
 80810f4:	003d 6974 656d 7420 206f 6f63 6e6e 6365     =.time to connec
 8081104:	2074 6c25 0075 6177 7469 3520 4320 6c65     t %lu.wait 5 Cel
 8081114:	756c 616c 2072 203d 6425 202e 6c43 756f     lular = %d. Clou
 8081124:	2064 203d 6425 002e 7574 6e72 6520 6576     d = %d..turn eve
 8081134:	7972 6874 6e69 2067 666f 0066 6964 2064     rything off.did 
 8081144:	6f6e 2074 6f63 6e6e 6365 0074 6977 6972     not connect.wiri
 8081154:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
 8081164:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
 8081174:	6920 766e 6c61 6469 002e 7061 0070 5925      invalid..app.%Y
 8081184:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
 8081194:	007a 7361 7463 6d69 0065 0000               z.asctime...

080811a0 <_ZTV9IPAddress>:
	...
 80811a8:	0aeb 0808 0adb 0808 0add 0808               ............

080811b4 <_ZTV9USBSerial>:
	...
 80811bc:	0b7d 0808 0be3 0808 0bbb 0808 07d1 0808     }...............
 80811cc:	0bad 0808 0b7f 0808 0b8f 0808 0bdd 0808     ................
 80811dc:	0b9f 0808 0b79 0808                         ....y...

080811e4 <_ZTVN5spark13CellularClassE>:
	...
 80811ec:	0d9d 0808 0d93 0808 0d89 0808 00e7 0808     ................
 80811fc:	0d7d 0808 00db 0808 0d71 0808 0d69 0808     }.......q...i...
 808120c:	0d5f 0808 0d55 0808 0d19 0808               _...U.......

08081218 <_ZTV11USARTSerial>:
	...
 8081220:	0dd9 0808 0e41 0808 0e1d 0808 07d1 0808     ....A...........
 8081230:	0ded 0808 0e09 0808 0dfb 0808 0e17 0808     ................
 8081240:	0ddb 0808 0ddf 0808                         ........

08081248 <_ZTVN5spark12NetworkClassE>:
	...
 8081250:	0ecd 0808 0ed7 0808 0ee1 0808 0eeb 0808     ................
 8081260:	0ef5 0808 0f01 0808 0f0d 0808 0f19 0808     ................
 8081270:	0f21 0808 0f2b 0808 0f35 0808               !...+...5...

0808127c <_ZSt7nothrow>:
	...

0808127d <link_const_variable_data_end>:
 808127d:	00          	.byte	0x00
	...

08081280 <link_constructors_location>:
 8081280:	08080371 	.word	0x08080371
 8081284:	08080795 	.word	0x08080795
 8081288:	080808ed 	.word	0x080808ed
 808128c:	080808fd 	.word	0x080808fd
 8081290:	08080935 	.word	0x08080935
 8081294:	08080da9 	.word	0x08080da9
 8081298:	08080f7d 	.word	0x08080f7d
 808129c:	08080f91 	.word	0x08080f91
