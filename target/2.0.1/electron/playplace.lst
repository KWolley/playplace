
c:/Users/karaw/Documents/aquarealtime/resdev/software/playplace/target/2.0.1/electron/playplace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001484  0808001c  0808001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080814a0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080814a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004e0  20000070  20000070  00030070  2**2
                  ALLOC
  6 .module_info_suffix 00000028  08081514  08081514  00021514  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  0808153c  0808153c  0002153c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b7f46  00000000  00000000  00021540  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000dc7a  00000000  00000000  000d9486  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013153  00000000  00000000  000e7100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001638  00000000  00000000  000fa253  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000041c0  00000000  00000000  000fb88b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00020343  00000000  00000000  000ffa4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001e7da  00000000  00000000  0011fd8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aec6e  00000000  00000000  0013e568  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003770  00000000  00000000  001ed1d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <link_dynalib_end+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <link_dynalib_end+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f001 f8b3 	bl	8081198 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <link_dynalib_end+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <link_dynalib_end+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f001 f8bb 	bl	80811b4 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <link_dynalib_end+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000000 	.word	0x20000000
 8080048:	080814a4 	.word	0x080814a4
 808004c:	20000070 	.word	0x20000070
 8080050:	20000070 	.word	0x20000070
 8080054:	20000550 	.word	0x20000550
 8080058:	20000550 	.word	0x20000550

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f000 fdd1 	bl	8080c04 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080062:	2500      	movs	r5, #0
 8080064:	4e05      	ldr	r6, [pc, #20]	; (808007c <module_user_init+0x20>)
 8080066:	4c06      	ldr	r4, [pc, #24]	; (8080080 <module_user_init+0x24>)
 8080068:	1ba4      	subs	r4, r4, r6
 808006a:	08a4      	lsrs	r4, r4, #2
 808006c:	42a5      	cmp	r5, r4
 808006e:	d100      	bne.n	8080072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080072:	f856 3b04 	ldr.w	r3, [r6], #4
 8080076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f7      	b.n	808006c <module_user_init+0x10>
 808007c:	08081480 	.word	0x08081480
 8080080:	080814a0 	.word	0x080814a0

08080084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080084:	f000 b882 	b.w	808018c <setup>

08080088 <module_user_loop>:
}

void module_user_loop() {
 8080088:	b508      	push	{r3, lr}
    loop();
 808008a:	f000 fa17 	bl	80804bc <loop>
    _post_loop();
}
 808008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 8080092:	f000 bd79 	b.w	8080b88 <_post_loop>

08080096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 8080096:	f000 bb9d 	b.w	80807d4 <malloc>

0808009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 808009a:	f000 bba3 	b.w	80807e4 <free>

0808009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 808009e:	7800      	ldrb	r0, [r0, #0]
 80800a0:	fab0 f080 	clz	r0, r0
 80800a4:	0940      	lsrs	r0, r0, #5
 80800a6:	4770      	bx	lr

080800a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800a8:	2301      	movs	r3, #1
 80800aa:	7003      	strb	r3, [r0, #0]
 80800ac:	4770      	bx	lr

080800ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80800ae:	b510      	push	{r4, lr}
 80800b0:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80800b2:	6800      	ldr	r0, [r0, #0]
 80800b4:	b108      	cbz	r0, 80800ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80800b6:	f000 fb95 	bl	80807e4 <free>
class SystemClass {
 80800ba:	4620      	mov	r0, r4
 80800bc:	bd10      	pop	{r4, pc}

080800be <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80800be:	b40e      	push	{r1, r2, r3}
 80800c0:	b503      	push	{r0, r1, lr}
 80800c2:	ab03      	add	r3, sp, #12
 80800c4:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 80800c8:	2101      	movs	r1, #1
        va_start(args, format);
 80800ca:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 80800cc:	f000 fcb6 	bl	8080a3c <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80800d0:	b002      	add	sp, #8
 80800d2:	f85d eb04 	ldr.w	lr, [sp], #4
 80800d6:	b003      	add	sp, #12
 80800d8:	4770      	bx	lr

080800da <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80800da:	2300      	movs	r3, #0
 80800dc:	6840      	ldr	r0, [r0, #4]
 80800de:	461a      	mov	r2, r3
 80800e0:	4619      	mov	r1, r3
 80800e2:	f000 bb27 	b.w	8080734 <network_off>

080800e6 <_ZN5spark13CellularClass10disconnectEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80800e6:	2200      	movs	r2, #0
 80800e8:	2102      	movs	r1, #2
 80800ea:	6840      	ldr	r0, [r0, #4]
 80800ec:	f000 bb0a 	b.w	8080704 <network_disconnect>

080800f0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80800f0:	2200      	movs	r2, #0
 80800f2:	6840      	ldr	r0, [r0, #4]
 80800f4:	4611      	mov	r1, r2
 80800f6:	f000 bb0d 	b.w	8080714 <network_ready>
	...

080800fc <_ZN8particle24SystemSleepConfigurationC1Ev>:
};

class SystemSleepConfiguration: protected SystemSleepConfigurationHelper {
public:
    // Constructor
    SystemSleepConfiguration()
 80800fc:	b510      	push	{r4, lr}
 80800fe:	4604      	mov	r4, r0
            : SystemSleepConfigurationHelper(&config_),
 8080100:	3004      	adds	r0, #4
              config_(),
              valid_(true) {
 8080102:	2210      	movs	r2, #16
 8080104:	2100      	movs	r1, #0
        : config_(config) {
 8080106:	6020      	str	r0, [r4, #0]
              valid_(true) {
 8080108:	f001 f854 	bl	80811b4 <memset>
 808010c:	2301      	movs	r3, #1
 808010e:	7523      	strb	r3, [r4, #20]
        config_.size = sizeof(hal_sleep_config_t);
 8080110:	4b02      	ldr	r3, [pc, #8]	; (808011c <_ZN8particle24SystemSleepConfigurationC1Ev+0x20>)
        config_.version = HAL_SLEEP_VERSION;
        config_.mode = HAL_SLEEP_MODE_NONE;
        config_.flags = 0;
        config_.wakeup_sources = nullptr;
    }
 8080112:	4620      	mov	r0, r4
        config_.size = sizeof(hal_sleep_config_t);
 8080114:	6063      	str	r3, [r4, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
 8080116:	2300      	movs	r3, #0
 8080118:	7223      	strb	r3, [r4, #8]
    }
 808011a:	bd10      	pop	{r4, pc}
 808011c:	00030010 	.word	0x00030010

08080120 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
 8080120:	b538      	push	{r3, r4, r5, lr}
 8080122:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
 8080124:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
 8080126:	b128      	cbz	r0, 8080134 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
 8080128:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
 808012a:	210c      	movs	r1, #12
 808012c:	f001 f821 	bl	8081172 <_ZdlPvj>
            wakeupSource = next;
 8080130:	4628      	mov	r0, r5
        while (wakeupSource) {
 8080132:	e7f8      	b.n	8080126 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
 8080134:	4620      	mov	r0, r4
 8080136:	bd38      	pop	{r3, r4, r5, pc}

08080138 <_ZN8particle24SystemSleepConfiguration8durationEm>:
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
 8080138:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
 808013a:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
 808013c:	4605      	mov	r5, r0
 808013e:	460e      	mov	r6, r1
        if (valid_) {
 8080140:	b1cb      	cbz	r3, 8080176 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
 8080142:	6803      	ldr	r3, [r0, #0]
 8080144:	68db      	ldr	r3, [r3, #12]
        if (!start) {
 8080146:	b123      	cbz	r3, 8080152 <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
 8080148:	889a      	ldrh	r2, [r3, #4]
 808014a:	2a04      	cmp	r2, #4
 808014c:	d017      	beq.n	808017e <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
 808014e:	689b      	ldr	r3, [r3, #8]
        while (start) {
 8080150:	e7f9      	b.n	8080146 <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
 8080152:	2010      	movs	r0, #16
 8080154:	490b      	ldr	r1, [pc, #44]	; (8080184 <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
 8080156:	f001 f80e 	bl	8081176 <_ZnwjRKSt9nothrow_t>
 808015a:	4604      	mov	r4, r0
 808015c:	b168      	cbz	r0, 808017a <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
 808015e:	2210      	movs	r2, #16
 8080160:	2100      	movs	r1, #0
 8080162:	f001 f827 	bl	80811b4 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
 8080166:	4b08      	ldr	r3, [pc, #32]	; (8080188 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
 8080168:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
 808016a:	2304      	movs	r3, #4
 808016c:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 808016e:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 8080170:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
 8080172:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
 8080176:	4628      	mov	r0, r5
 8080178:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
 808017a:	7528      	strb	r0, [r5, #20]
                return *this;
 808017c:	e7fb      	b.n	8080176 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
 808017e:	60de      	str	r6, [r3, #12]
                return *this;
 8080180:	e7f9      	b.n	8080176 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
 8080182:	bf00      	nop
 8080184:	0808147c 	.word	0x0808147c
 8080188:	00030010 	.word	0x00030010

0808018c <setup>:

unsigned long connectMillis = CELL_CONNECT_SECONDS * 1000;
int failures = 0;

// setup() runs once, when the device is first turned on.
void setup() {
 808018c:	b508      	push	{r3, lr}
  Serial.begin(9600);
 808018e:	f000 fe37 	bl	8080e00 <_Z16_fetch_usbserialv>
 8080192:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080196:	f000 fe19 	bl	8080dcc <_ZN9USBSerial5beginEl>
  delay(2000);
}
 808019a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(2000);
 808019e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80801a2:	f000 bc8f 	b.w	8080ac4 <delay>
	...

080801a8 <_Z12diconnectAllv>:
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
 80801a8:	2300      	movs	r3, #0
  Serial.printlnf("Failures = %i",failures);
  return 1;
}

int diconnectAll()
{
 80801aa:	b530      	push	{r4, r5, lr}
  Particle.disconnect();
  Cellular.disconnect();
 80801ac:	4d13      	ldr	r5, [pc, #76]	; (80801fc <_Z12diconnectAllv+0x54>)
{
 80801ae:	b085      	sub	sp, #20
  Particle.disconnect();
 80801b0:	a801      	add	r0, sp, #4
 80801b2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80801b6:	f88d 300c 	strb.w	r3, [sp, #12]
 80801ba:	f000 fd55 	bl	8080c68 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
  Cellular.disconnect();
 80801be:	4628      	mov	r0, r5
 80801c0:	f7ff ff91 	bl	80800e6 <_ZN5spark13CellularClass10disconnectEv>
  Cellular.off();
 80801c4:	4628      	mov	r0, r5
 80801c6:	f7ff ff88 	bl	80800da <_ZN5spark13CellularClass3offEv>
  Serial.printlnf("Cellular = %d. Cloud = %d.",(int)Cellular.ready(), (int)Particle.connected());
 80801ca:	f000 fe19 	bl	8080e00 <_Z16_fetch_usbserialv>
 80801ce:	4604      	mov	r4, r0
 80801d0:	4628      	mov	r0, r5
 80801d2:	f7ff ff8d 	bl	80800f0 <_ZN5spark13CellularClass5readyEv>
 80801d6:	4605      	mov	r5, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80801d8:	f000 fae4 	bl	80807a4 <spark_cloud_flag_connected>
 80801dc:	462a      	mov	r2, r5
 80801de:	4603      	mov	r3, r0
 80801e0:	4907      	ldr	r1, [pc, #28]	; (8080200 <_Z12diconnectAllv+0x58>)
 80801e2:	4620      	mov	r0, r4
 80801e4:	f7ff ff6b 	bl	80800be <_ZN5Print8printlnfEPKcz>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80801e8:	f000 f9be 	bl	8080568 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80801ec:	4b05      	ldr	r3, [pc, #20]	; (8080204 <_Z12diconnectAllv+0x5c>)
 80801ee:	6018      	str	r0, [r3, #0]
    		spark_process();
 80801f0:	f000 fac8 	bl	8080784 <spark_process>
  Particle.process();
  return 1;
}
 80801f4:	2001      	movs	r0, #1
 80801f6:	b005      	add	sp, #20
 80801f8:	bd30      	pop	{r4, r5, pc}
 80801fa:	bf00      	nop
 80801fc:	200003ec 	.word	0x200003ec
 8080200:	08081230 	.word	0x08081230
 8080204:	20000544 	.word	0x20000544

08080208 <_Z13connectOptionij>:
{
 8080208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 808020c:	4605      	mov	r5, r0
 808020e:	460c      	mov	r4, r1
        spark_cloud_flag_connect();
 8080210:	f000 fac0 	bl	8080794 <spark_cloud_flag_connect>
  if (num == 1)
 8080214:	2d01      	cmp	r5, #1
 8080216:	f040 8088 	bne.w	808032a <_Z13connectOptionij+0x122>
    Serial.println("start while");
 808021a:	f000 fdf1 	bl	8080e00 <_Z16_fetch_usbserialv>
 808021e:	497e      	ldr	r1, [pc, #504]	; (8080418 <_Z13connectOptionij+0x210>)
 8080220:	f000 fbe5 	bl	80809ee <_ZN5Print7printlnEPKc>
    Serial.printlnf("Cellular = %d. Cloud = %d.",(int)Cellular.ready(), (int)Particle.connected());
 8080224:	f000 fdec 	bl	8080e00 <_Z16_fetch_usbserialv>
 8080228:	4605      	mov	r5, r0
 808022a:	487c      	ldr	r0, [pc, #496]	; (808041c <_Z13connectOptionij+0x214>)
 808022c:	f7ff ff60 	bl	80800f0 <_ZN5spark13CellularClass5readyEv>
 8080230:	4606      	mov	r6, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080232:	f000 fab7 	bl	80807a4 <spark_cloud_flag_connected>
 8080236:	4632      	mov	r2, r6
 8080238:	4603      	mov	r3, r0
 808023a:	4979      	ldr	r1, [pc, #484]	; (8080420 <_Z13connectOptionij+0x218>)
 808023c:	4628      	mov	r0, r5
 808023e:	f7ff ff3e 	bl	80800be <_ZN5Print8printlnfEPKcz>
      if (millis() - startTime > connectMillis)
 8080242:	4d78      	ldr	r5, [pc, #480]	; (8080424 <_Z13connectOptionij+0x21c>)
 8080244:	f000 faae 	bl	80807a4 <spark_cloud_flag_connected>
    while (Particle.connected() == false)
 8080248:	b9e8      	cbnz	r0, 8080286 <_Z13connectOptionij+0x7e>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808024a:	f000 f98d 	bl	8080568 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - startTime > connectMillis)
 808024e:	682b      	ldr	r3, [r5, #0]
 8080250:	1b00      	subs	r0, r0, r4
 8080252:	4298      	cmp	r0, r3
 8080254:	d9f6      	bls.n	8080244 <_Z13connectOptionij+0x3c>
        Serial.println("did not connect");
 8080256:	f000 fdd3 	bl	8080e00 <_Z16_fetch_usbserialv>
 808025a:	4973      	ldr	r1, [pc, #460]	; (8080428 <_Z13connectOptionij+0x220>)
 808025c:	f000 fbc7 	bl	80809ee <_ZN5Print7printlnEPKc>
        Serial.printlnf("Cellular = %d. Cloud = %d.",(int)Cellular.ready(), (int)Particle.connected());
 8080260:	f000 fdce 	bl	8080e00 <_Z16_fetch_usbserialv>
 8080264:	4605      	mov	r5, r0
 8080266:	486d      	ldr	r0, [pc, #436]	; (808041c <_Z13connectOptionij+0x214>)
 8080268:	f7ff ff42 	bl	80800f0 <_ZN5spark13CellularClass5readyEv>
 808026c:	4606      	mov	r6, r0
 808026e:	f000 fa99 	bl	80807a4 <spark_cloud_flag_connected>
 8080272:	4632      	mov	r2, r6
 8080274:	4603      	mov	r3, r0
 8080276:	496a      	ldr	r1, [pc, #424]	; (8080420 <_Z13connectOptionij+0x218>)
 8080278:	4628      	mov	r0, r5
 808027a:	f7ff ff20 	bl	80800be <_ZN5Print8printlnfEPKcz>
        failures++;
 808027e:	4a6b      	ldr	r2, [pc, #428]	; (808042c <_Z13connectOptionij+0x224>)
 8080280:	6813      	ldr	r3, [r2, #0]
 8080282:	3301      	adds	r3, #1
 8080284:	6013      	str	r3, [r2, #0]
 8080286:	f000 fa8d 	bl	80807a4 <spark_cloud_flag_connected>
    if (Particle.connected())
 808028a:	2800      	cmp	r0, #0
 808028c:	d045      	beq.n	808031a <_Z13connectOptionij+0x112>
      Serial.println("chill for 20s");
 808028e:	f000 fdb7 	bl	8080e00 <_Z16_fetch_usbserialv>
 8080292:	4967      	ldr	r1, [pc, #412]	; (8080430 <_Z13connectOptionij+0x228>)
 8080294:	f000 fbab 	bl	80809ee <_ZN5Print7printlnEPKc>
      delay(20000);
 8080298:	f644 6020 	movw	r0, #20000	; 0x4e20
 808029c:	f000 fc12 	bl	8080ac4 <delay>
      Serial.println("NOW turn everything off");
 80802a0:	f000 fdae 	bl	8080e00 <_Z16_fetch_usbserialv>
 80802a4:	4963      	ldr	r1, [pc, #396]	; (8080434 <_Z13connectOptionij+0x22c>)
 80802a6:	f000 fba2 	bl	80809ee <_ZN5Print7printlnEPKc>
        graceful_(graceful) {
 80802aa:	2300      	movs	r3, #0
      Particle.disconnect();
 80802ac:	a801      	add	r0, sp, #4
 80802ae:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80802b2:	f88d 300c 	strb.w	r3, [sp, #12]
 80802b6:	f000 fcd7 	bl	8080c68 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
      Cellular.disconnect();
 80802ba:	4858      	ldr	r0, [pc, #352]	; (808041c <_Z13connectOptionij+0x214>)
 80802bc:	f7ff ff13 	bl	80800e6 <_ZN5spark13CellularClass10disconnectEv>
      Cellular.off();
 80802c0:	4856      	ldr	r0, [pc, #344]	; (808041c <_Z13connectOptionij+0x214>)
 80802c2:	f7ff ff0a 	bl	80800da <_ZN5spark13CellularClass3offEv>
      Serial.printlnf("Cellular = %d. Cloud = %d.",(int)Cellular.ready(), (int)Particle.connected());
 80802c6:	f000 fd9b 	bl	8080e00 <_Z16_fetch_usbserialv>
 80802ca:	4605      	mov	r5, r0
 80802cc:	4853      	ldr	r0, [pc, #332]	; (808041c <_Z13connectOptionij+0x214>)
 80802ce:	f7ff ff0f 	bl	80800f0 <_ZN5spark13CellularClass5readyEv>
 80802d2:	4606      	mov	r6, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80802d4:	f000 fa66 	bl	80807a4 <spark_cloud_flag_connected>
 80802d8:	4632      	mov	r2, r6
 80802da:	4603      	mov	r3, r0
 80802dc:	4950      	ldr	r1, [pc, #320]	; (8080420 <_Z13connectOptionij+0x218>)
 80802de:	4628      	mov	r0, r5
 80802e0:	f7ff feed 	bl	80800be <_ZN5Print8printlnfEPKcz>
		return HAL_Timer_Get_Milli_Seconds();
 80802e4:	f000 f940 	bl	8080568 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 80802e8:	4b53      	ldr	r3, [pc, #332]	; (8080438 <_Z13connectOptionij+0x230>)
 80802ea:	6018      	str	r0, [r3, #0]
    		spark_process();
 80802ec:	f000 fa4a 	bl	8080784 <spark_process>
  Serial.printlnf("total time: %lu", millis()-startTime);
 80802f0:	f000 fd86 	bl	8080e00 <_Z16_fetch_usbserialv>
 80802f4:	4605      	mov	r5, r0
 80802f6:	f000 f937 	bl	8080568 <HAL_Timer_Get_Milli_Seconds>
 80802fa:	4950      	ldr	r1, [pc, #320]	; (808043c <_Z13connectOptionij+0x234>)
 80802fc:	1b02      	subs	r2, r0, r4
 80802fe:	4628      	mov	r0, r5
 8080300:	f7ff fedd 	bl	80800be <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("Failures = %i",failures);
 8080304:	f000 fd7c 	bl	8080e00 <_Z16_fetch_usbserialv>
 8080308:	4b48      	ldr	r3, [pc, #288]	; (808042c <_Z13connectOptionij+0x224>)
 808030a:	494d      	ldr	r1, [pc, #308]	; (8080440 <_Z13connectOptionij+0x238>)
 808030c:	681a      	ldr	r2, [r3, #0]
 808030e:	f7ff fed6 	bl	80800be <_ZN5Print8printlnfEPKcz>
}
 8080312:	2001      	movs	r0, #1
 8080314:	b004      	add	sp, #16
 8080316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Serial.println("Connection Failed");
 808031a:	f000 fd71 	bl	8080e00 <_Z16_fetch_usbserialv>
 808031e:	4949      	ldr	r1, [pc, #292]	; (8080444 <_Z13connectOptionij+0x23c>)
        Serial.println("NOW turn everything off");
 8080320:	f000 fb65 	bl	80809ee <_ZN5Print7printlnEPKc>
        diconnectAll();
 8080324:	f7ff ff40 	bl	80801a8 <_Z12diconnectAllv>
 8080328:	e7e2      	b.n	80802f0 <_Z13connectOptionij+0xe8>
  else if (num == 2)
 808032a:	2d02      	cmp	r5, #2
 808032c:	d1e0      	bne.n	80802f0 <_Z13connectOptionij+0xe8>
    Serial.println("start wait for");
 808032e:	f000 fd67 	bl	8080e00 <_Z16_fetch_usbserialv>
 8080332:	4945      	ldr	r1, [pc, #276]	; (8080448 <_Z13connectOptionij+0x240>)
 8080334:	f000 fb5b 	bl	80809ee <_ZN5Print7printlnEPKc>
    Serial.printlnf("Cellular = %d. Cloud = %d.",(int)Cellular.ready(), (int)Particle.connected());
 8080338:	f000 fd62 	bl	8080e00 <_Z16_fetch_usbserialv>
 808033c:	4605      	mov	r5, r0
 808033e:	4837      	ldr	r0, [pc, #220]	; (808041c <_Z13connectOptionij+0x214>)
 8080340:	f7ff fed6 	bl	80800f0 <_ZN5spark13CellularClass5readyEv>
 8080344:	4606      	mov	r6, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080346:	f000 fa2d 	bl	80807a4 <spark_cloud_flag_connected>
 808034a:	4632      	mov	r2, r6
 808034c:	4603      	mov	r3, r0
 808034e:	4934      	ldr	r1, [pc, #208]	; (8080420 <_Z13connectOptionij+0x218>)
 8080350:	4628      	mov	r0, r5
 8080352:	f7ff feb4 	bl	80800be <_ZN5Print8printlnfEPKcz>
    if (waitFor(Particle.connected, connectMillis))
 8080356:	4b33      	ldr	r3, [pc, #204]	; (8080424 <_Z13connectOptionij+0x21c>)
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080358:	2000      	movs	r0, #0
 808035a:	681e      	ldr	r6, [r3, #0]
 808035c:	f000 f90c 	bl	8080578 <hal_timer_millis>
 8080360:	f04f 0a00 	mov.w	sl, #0
 8080364:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080366:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
 8080368:	2000      	movs	r0, #0
 808036a:	f000 f905 	bl	8080578 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 808036e:	ebb0 0805 	subs.w	r8, r0, r5
 8080372:	eb61 090a 	sbc.w	r9, r1, sl
        while (_while() && !_condition()) {
 8080376:	45b9      	cmp	r9, r7
 8080378:	bf08      	it	eq
 808037a:	45b0      	cmpeq	r8, r6
 808037c:	d205      	bcs.n	808038a <_Z13connectOptionij+0x182>
 808037e:	f000 fa11 	bl	80807a4 <spark_cloud_flag_connected>
 8080382:	b910      	cbnz	r0, 808038a <_Z13connectOptionij+0x182>
            spark_process();
 8080384:	f000 f9fe 	bl	8080784 <spark_process>
        while (_while() && !_condition()) {
 8080388:	e7ee      	b.n	8080368 <_Z13connectOptionij+0x160>
 808038a:	f000 fa0b 	bl	80807a4 <spark_cloud_flag_connected>
 808038e:	b348      	cbz	r0, 80803e4 <_Z13connectOptionij+0x1dc>
      Serial.printlnf("time to connect %lu", millis()-startTime);
 8080390:	f000 fd36 	bl	8080e00 <_Z16_fetch_usbserialv>
 8080394:	4605      	mov	r5, r0
 8080396:	f000 f8e7 	bl	8080568 <HAL_Timer_Get_Milli_Seconds>
 808039a:	492c      	ldr	r1, [pc, #176]	; (808044c <_Z13connectOptionij+0x244>)
 808039c:	1b02      	subs	r2, r0, r4
 808039e:	4628      	mov	r0, r5
 80803a0:	f7ff fe8d 	bl	80800be <_ZN5Print8printlnfEPKcz>
      Serial.printlnf("Cellular = %d. Cloud = %d.",(int)Cellular.ready(), (int)Particle.connected());
 80803a4:	f000 fd2c 	bl	8080e00 <_Z16_fetch_usbserialv>
 80803a8:	4605      	mov	r5, r0
 80803aa:	481c      	ldr	r0, [pc, #112]	; (808041c <_Z13connectOptionij+0x214>)
 80803ac:	f7ff fea0 	bl	80800f0 <_ZN5spark13CellularClass5readyEv>
 80803b0:	4606      	mov	r6, r0
 80803b2:	f000 f9f7 	bl	80807a4 <spark_cloud_flag_connected>
 80803b6:	4632      	mov	r2, r6
 80803b8:	4603      	mov	r3, r0
 80803ba:	4919      	ldr	r1, [pc, #100]	; (8080420 <_Z13connectOptionij+0x218>)
 80803bc:	4628      	mov	r0, r5
 80803be:	f7ff fe7e 	bl	80800be <_ZN5Print8printlnfEPKcz>
 80803c2:	f000 f9ef 	bl	80807a4 <spark_cloud_flag_connected>
      if (Particle.connected())
 80803c6:	2800      	cmp	r0, #0
 80803c8:	d092      	beq.n	80802f0 <_Z13connectOptionij+0xe8>
        Serial.println("chill for 20s");
 80803ca:	f000 fd19 	bl	8080e00 <_Z16_fetch_usbserialv>
 80803ce:	4918      	ldr	r1, [pc, #96]	; (8080430 <_Z13connectOptionij+0x228>)
 80803d0:	f000 fb0d 	bl	80809ee <_ZN5Print7printlnEPKc>
        delay(20000);
 80803d4:	f644 6020 	movw	r0, #20000	; 0x4e20
 80803d8:	f000 fb74 	bl	8080ac4 <delay>
        Serial.println("NOW turn everything off");
 80803dc:	f000 fd10 	bl	8080e00 <_Z16_fetch_usbserialv>
 80803e0:	4914      	ldr	r1, [pc, #80]	; (8080434 <_Z13connectOptionij+0x22c>)
 80803e2:	e79d      	b.n	8080320 <_Z13connectOptionij+0x118>
      Serial.println("did not connect");
 80803e4:	f000 fd0c 	bl	8080e00 <_Z16_fetch_usbserialv>
 80803e8:	490f      	ldr	r1, [pc, #60]	; (8080428 <_Z13connectOptionij+0x220>)
 80803ea:	f000 fb00 	bl	80809ee <_ZN5Print7printlnEPKc>
      Serial.printlnf("Cellular = %d. Cloud = %d.",(int)Cellular.ready(), (int)Particle.connected());
 80803ee:	f000 fd07 	bl	8080e00 <_Z16_fetch_usbserialv>
 80803f2:	4605      	mov	r5, r0
 80803f4:	4809      	ldr	r0, [pc, #36]	; (808041c <_Z13connectOptionij+0x214>)
 80803f6:	f7ff fe7b 	bl	80800f0 <_ZN5spark13CellularClass5readyEv>
 80803fa:	4606      	mov	r6, r0
 80803fc:	f000 f9d2 	bl	80807a4 <spark_cloud_flag_connected>
 8080400:	4632      	mov	r2, r6
 8080402:	4603      	mov	r3, r0
 8080404:	4906      	ldr	r1, [pc, #24]	; (8080420 <_Z13connectOptionij+0x218>)
 8080406:	4628      	mov	r0, r5
 8080408:	f7ff fe59 	bl	80800be <_ZN5Print8printlnfEPKcz>
      failures++;
 808040c:	4a07      	ldr	r2, [pc, #28]	; (808042c <_Z13connectOptionij+0x224>)
 808040e:	6813      	ldr	r3, [r2, #0]
 8080410:	3301      	adds	r3, #1
 8080412:	6013      	str	r3, [r2, #0]
 8080414:	e76c      	b.n	80802f0 <_Z13connectOptionij+0xe8>
 8080416:	bf00      	nop
 8080418:	0808124b 	.word	0x0808124b
 808041c:	200003ec 	.word	0x200003ec
 8080420:	08081230 	.word	0x08081230
 8080424:	20000000 	.word	0x20000000
 8080428:	08081257 	.word	0x08081257
 808042c:	20000084 	.word	0x20000084
 8080430:	08081267 	.word	0x08081267
 8080434:	08081275 	.word	0x08081275
 8080438:	20000544 	.word	0x20000544
 808043c:	080812c2 	.word	0x080812c2
 8080440:	080812d2 	.word	0x080812d2
 8080444:	0808128d 	.word	0x0808128d
 8080448:	0808129f 	.word	0x0808129f
 808044c:	080812ae 	.word	0x080812ae

08080450 <_Z9deepSleepi>:
// Sleep ULP way
int deepSleep(int seconds)
{
 8080450:	b510      	push	{r4, lr}
  if (seconds <= 0)
 8080452:	1e04      	subs	r4, r0, #0
{
 8080454:	b08a      	sub	sp, #40	; 0x28
  if (seconds <= 0)
 8080456:	dc05      	bgt.n	8080464 <_Z9deepSleepi+0x14>
  {
    seconds = 10;
    Serial.printlnf("Zero sleep time, adjusting to 10 seconds sleep time.");
 8080458:	f000 fcd2 	bl	8080e00 <_Z16_fetch_usbserialv>
 808045c:	4915      	ldr	r1, [pc, #84]	; (80804b4 <_Z9deepSleepi+0x64>)
 808045e:	f7ff fe2e 	bl	80800be <_ZN5Print8printlnfEPKcz>
    seconds = 10;
 8080462:	240a      	movs	r4, #10
  }
  Serial.printlnf("Going to sleep for %d minutes %d seconds.", seconds / 60, seconds % 60);
 8080464:	f000 fccc 	bl	8080e00 <_Z16_fetch_usbserialv>
 8080468:	233c      	movs	r3, #60	; 0x3c
 808046a:	fbb4 f2f3 	udiv	r2, r4, r3
 808046e:	4912      	ldr	r1, [pc, #72]	; (80804b8 <_Z9deepSleepi+0x68>)
 8080470:	fb03 4312 	mls	r3, r3, r2, r4
 8080474:	f7ff fe23 	bl	80800be <_ZN5Print8printlnfEPKcz>
  SystemSleepConfiguration config;
 8080478:	a804      	add	r0, sp, #16
 808047a:	f7ff fe3f 	bl	80800fc <_ZN8particle24SystemSleepConfigurationC1Ev>
        if (valid_) {
 808047e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8080482:	b113      	cbz	r3, 808048a <_Z9deepSleepi+0x3a>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 8080484:	2303      	movs	r3, #3
 8080486:	f88d 3018 	strb.w	r3, [sp, #24]
  config.mode(SystemSleepMode::HIBERNATE)
        .duration(seconds * 1000);  // Takes msec
 808048a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 808048e:	a804      	add	r0, sp, #16
 8080490:	4361      	muls	r1, r4
 8080492:	f7ff fe51 	bl	8080138 <_ZN8particle24SystemSleepConfiguration8durationEm>
  System.sleep(config);
 8080496:	a801      	add	r0, sp, #4
 8080498:	a904      	add	r1, sp, #16
 808049a:	f000 f9f1 	bl	8080880 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
 808049e:	9801      	ldr	r0, [sp, #4]
 80804a0:	b108      	cbz	r0, 80804a6 <_Z9deepSleepi+0x56>
            free(wakeupSource_);
 80804a2:	f000 f99f 	bl	80807e4 <free>
  SystemSleepConfiguration config;
 80804a6:	a804      	add	r0, sp, #16
 80804a8:	f7ff fe3a 	bl	8080120 <_ZN8particle24SystemSleepConfigurationD1Ev>
  return 1;
}
 80804ac:	2001      	movs	r0, #1
 80804ae:	b00a      	add	sp, #40	; 0x28
 80804b0:	bd10      	pop	{r4, pc}
 80804b2:	bf00      	nop
 80804b4:	080812e0 	.word	0x080812e0
 80804b8:	08081315 	.word	0x08081315

080804bc <loop>:
void loop() {
 80804bc:	b538      	push	{r3, r4, r5, lr}
  delay(2000);
 80804be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80804c2:	f000 faff 	bl	8080ac4 <delay>
  Serial.println("\n\n==== LOOP ====");
 80804c6:	f000 fc9b 	bl	8080e00 <_Z16_fetch_usbserialv>
 80804ca:	4910      	ldr	r1, [pc, #64]	; (808050c <loop+0x50>)
 80804cc:	f000 fa8f 	bl	80809ee <_ZN5Print7printlnEPKc>
  Serial.printlnf("Cellular = %d. Cloud = %d.",(int)Cellular.ready(), (int)Particle.connected());
 80804d0:	f000 fc96 	bl	8080e00 <_Z16_fetch_usbserialv>
 80804d4:	4604      	mov	r4, r0
 80804d6:	480e      	ldr	r0, [pc, #56]	; (8080510 <loop+0x54>)
 80804d8:	f7ff fe0a 	bl	80800f0 <_ZN5spark13CellularClass5readyEv>
 80804dc:	4605      	mov	r5, r0
 80804de:	f000 f961 	bl	80807a4 <spark_cloud_flag_connected>
 80804e2:	462a      	mov	r2, r5
 80804e4:	4603      	mov	r3, r0
 80804e6:	490b      	ldr	r1, [pc, #44]	; (8080514 <loop+0x58>)
 80804e8:	4620      	mov	r0, r4
 80804ea:	f7ff fde8 	bl	80800be <_ZN5Print8printlnfEPKcz>
 80804ee:	f000 f83b 	bl	8080568 <HAL_Timer_Get_Milli_Seconds>
 80804f2:	4601      	mov	r1, r0
  connectOption(1,startTime);
 80804f4:	2001      	movs	r0, #1
 80804f6:	f7ff fe87 	bl	8080208 <_Z13connectOptionij>
  deepSleep(60*sleepTime);
 80804fa:	203c      	movs	r0, #60	; 0x3c
 80804fc:	4b06      	ldr	r3, [pc, #24]	; (8080518 <loop+0x5c>)
 80804fe:	681b      	ldr	r3, [r3, #0]
 8080500:	4358      	muls	r0, r3
}
 8080502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  deepSleep(60*sleepTime);
 8080506:	f7ff bfa3 	b.w	8080450 <_Z9deepSleepi>
 808050a:	bf00      	nop
 808050c:	0808133f 	.word	0x0808133f
 8080510:	200003ec 	.word	0x200003ec
 8080514:	08081230 	.word	0x08081230
 8080518:	20000004 	.word	0x20000004

0808051c <_GLOBAL__sub_I_SystemMode>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 808051c:	2201      	movs	r2, #1
 808051e:	4b0a      	ldr	r3, [pc, #40]	; (8080548 <_GLOBAL__sub_I_SystemMode+0x2c>)
      Cellular.disconnect();
      Cellular.off();
    }
  }
  return 1;
 8080520:	b510      	push	{r4, lr}
 8080522:	701a      	strb	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
 8080524:	2300      	movs	r3, #0
 8080526:	4c09      	ldr	r4, [pc, #36]	; (808054c <_GLOBAL__sub_I_SystemMode+0x30>)
        set_system_mode(mode);
 8080528:	2003      	movs	r0, #3
              error_(SYSTEM_ERROR_NONE) {
 808052a:	6023      	str	r3, [r4, #0]
 808052c:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 808052e:	71a3      	strb	r3, [r4, #6]
 8080530:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8080534:	60a3      	str	r3, [r4, #8]
        set_system_mode(mode);
 8080536:	f000 f8a7 	bl	8080688 <set_system_mode>
SYSTEM_MODE(MANUAL);  
 808053a:	4620      	mov	r0, r4
 808053c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_MODE(MANUAL);  
 8080540:	4a03      	ldr	r2, [pc, #12]	; (8080550 <_GLOBAL__sub_I_SystemMode+0x34>)
 8080542:	4904      	ldr	r1, [pc, #16]	; (8080554 <_GLOBAL__sub_I_SystemMode+0x38>)
 8080544:	f000 be10 	b.w	8081168 <__aeabi_atexit>
 8080548:	20000080 	.word	0x20000080
 808054c:	20000074 	.word	0x20000074
 8080550:	20000070 	.word	0x20000070
 8080554:	080800af 	.word	0x080800af

08080558 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080558:	b508      	push	{r3, lr}
 808055a:	4b02      	ldr	r3, [pc, #8]	; (8080564 <HAL_RNG_GetRandomNumber+0xc>)
 808055c:	681b      	ldr	r3, [r3, #0]
 808055e:	685b      	ldr	r3, [r3, #4]
 8080560:	9301      	str	r3, [sp, #4]
 8080562:	bd08      	pop	{r3, pc}
 8080564:	0804019c 	.word	0x0804019c

08080568 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8080568:	b508      	push	{r3, lr}
 808056a:	4b02      	ldr	r3, [pc, #8]	; (8080574 <HAL_Timer_Get_Milli_Seconds+0xc>)
 808056c:	681b      	ldr	r3, [r3, #0]
 808056e:	695b      	ldr	r3, [r3, #20]
 8080570:	9301      	str	r3, [sp, #4]
 8080572:	bd08      	pop	{r3, pc}
 8080574:	0804019c 	.word	0x0804019c

08080578 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8080578:	b508      	push	{r3, lr}
 808057a:	4b02      	ldr	r3, [pc, #8]	; (8080584 <hal_timer_millis+0xc>)
 808057c:	681b      	ldr	r3, [r3, #0]
 808057e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8080580:	9301      	str	r3, [sp, #4]
 8080582:	bd08      	pop	{r3, pc}
 8080584:	0804019c 	.word	0x0804019c

08080588 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8080588:	b508      	push	{r3, lr}
 808058a:	4b02      	ldr	r3, [pc, #8]	; (8080594 <hal_usart_init+0xc>)
 808058c:	681b      	ldr	r3, [r3, #0]
 808058e:	699b      	ldr	r3, [r3, #24]
 8080590:	9301      	str	r3, [sp, #4]
 8080592:	bd08      	pop	{r3, pc}
 8080594:	080401c4 	.word	0x080401c4

08080598 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8080598:	b508      	push	{r3, lr}
 808059a:	4b02      	ldr	r3, [pc, #8]	; (80805a4 <hal_usart_write+0xc>)
 808059c:	681b      	ldr	r3, [r3, #0]
 808059e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80805a0:	9301      	str	r3, [sp, #4]
 80805a2:	bd08      	pop	{r3, pc}
 80805a4:	080401c4 	.word	0x080401c4

080805a8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80805a8:	b508      	push	{r3, lr}
 80805aa:	4b02      	ldr	r3, [pc, #8]	; (80805b4 <hal_usart_available+0xc>)
 80805ac:	681b      	ldr	r3, [r3, #0]
 80805ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80805b0:	9301      	str	r3, [sp, #4]
 80805b2:	bd08      	pop	{r3, pc}
 80805b4:	080401c4 	.word	0x080401c4

080805b8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80805b8:	b508      	push	{r3, lr}
 80805ba:	4b02      	ldr	r3, [pc, #8]	; (80805c4 <hal_usart_read+0xc>)
 80805bc:	681b      	ldr	r3, [r3, #0]
 80805be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80805c0:	9301      	str	r3, [sp, #4]
 80805c2:	bd08      	pop	{r3, pc}
 80805c4:	080401c4 	.word	0x080401c4

080805c8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80805c8:	b508      	push	{r3, lr}
 80805ca:	4b02      	ldr	r3, [pc, #8]	; (80805d4 <hal_usart_peek+0xc>)
 80805cc:	681b      	ldr	r3, [r3, #0]
 80805ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80805d0:	9301      	str	r3, [sp, #4]
 80805d2:	bd08      	pop	{r3, pc}
 80805d4:	080401c4 	.word	0x080401c4

080805d8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80805d8:	b508      	push	{r3, lr}
 80805da:	4b02      	ldr	r3, [pc, #8]	; (80805e4 <hal_usart_flush+0xc>)
 80805dc:	681b      	ldr	r3, [r3, #0]
 80805de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80805e0:	9301      	str	r3, [sp, #4]
 80805e2:	bd08      	pop	{r3, pc}
 80805e4:	080401c4 	.word	0x080401c4

080805e8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80805e8:	b508      	push	{r3, lr}
 80805ea:	4b02      	ldr	r3, [pc, #8]	; (80805f4 <hal_usart_available_data_for_write+0xc>)
 80805ec:	681b      	ldr	r3, [r3, #0]
 80805ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80805f0:	9301      	str	r3, [sp, #4]
 80805f2:	bd08      	pop	{r3, pc}
 80805f4:	080401c4 	.word	0x080401c4

080805f8 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80805f8:	b508      	push	{r3, lr}
 80805fa:	4b02      	ldr	r3, [pc, #8]	; (8080604 <inet_gethostbyname+0xc>)
 80805fc:	681b      	ldr	r3, [r3, #0]
 80805fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080600:	9301      	str	r3, [sp, #4]
 8080602:	bd08      	pop	{r3, pc}
 8080604:	08060020 	.word	0x08060020

08080608 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8080608:	b508      	push	{r3, lr}
 808060a:	4b02      	ldr	r3, [pc, #8]	; (8080614 <HAL_USB_USART_Init+0xc>)
 808060c:	681b      	ldr	r3, [r3, #0]
 808060e:	681b      	ldr	r3, [r3, #0]
 8080610:	9301      	str	r3, [sp, #4]
 8080612:	bd08      	pop	{r3, pc}
 8080614:	0806001c 	.word	0x0806001c

08080618 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8080618:	b508      	push	{r3, lr}
 808061a:	4b02      	ldr	r3, [pc, #8]	; (8080624 <HAL_USB_USART_Begin+0xc>)
 808061c:	681b      	ldr	r3, [r3, #0]
 808061e:	685b      	ldr	r3, [r3, #4]
 8080620:	9301      	str	r3, [sp, #4]
 8080622:	bd08      	pop	{r3, pc}
 8080624:	0806001c 	.word	0x0806001c

08080628 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080628:	b508      	push	{r3, lr}
 808062a:	4b02      	ldr	r3, [pc, #8]	; (8080634 <HAL_USB_USART_Available_Data+0xc>)
 808062c:	681b      	ldr	r3, [r3, #0]
 808062e:	691b      	ldr	r3, [r3, #16]
 8080630:	9301      	str	r3, [sp, #4]
 8080632:	bd08      	pop	{r3, pc}
 8080634:	0806001c 	.word	0x0806001c

08080638 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080638:	b508      	push	{r3, lr}
 808063a:	4b02      	ldr	r3, [pc, #8]	; (8080644 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808063c:	681b      	ldr	r3, [r3, #0]
 808063e:	695b      	ldr	r3, [r3, #20]
 8080640:	9301      	str	r3, [sp, #4]
 8080642:	bd08      	pop	{r3, pc}
 8080644:	0806001c 	.word	0x0806001c

08080648 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080648:	b508      	push	{r3, lr}
 808064a:	4b02      	ldr	r3, [pc, #8]	; (8080654 <HAL_USB_USART_Receive_Data+0xc>)
 808064c:	681b      	ldr	r3, [r3, #0]
 808064e:	699b      	ldr	r3, [r3, #24]
 8080650:	9301      	str	r3, [sp, #4]
 8080652:	bd08      	pop	{r3, pc}
 8080654:	0806001c 	.word	0x0806001c

08080658 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080658:	b508      	push	{r3, lr}
 808065a:	4b02      	ldr	r3, [pc, #8]	; (8080664 <HAL_USB_USART_Send_Data+0xc>)
 808065c:	681b      	ldr	r3, [r3, #0]
 808065e:	69db      	ldr	r3, [r3, #28]
 8080660:	9301      	str	r3, [sp, #4]
 8080662:	bd08      	pop	{r3, pc}
 8080664:	0806001c 	.word	0x0806001c

08080668 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080668:	b508      	push	{r3, lr}
 808066a:	4b02      	ldr	r3, [pc, #8]	; (8080674 <HAL_USB_USART_Flush_Data+0xc>)
 808066c:	681b      	ldr	r3, [r3, #0]
 808066e:	6a1b      	ldr	r3, [r3, #32]
 8080670:	9301      	str	r3, [sp, #4]
 8080672:	bd08      	pop	{r3, pc}
 8080674:	0806001c 	.word	0x0806001c

08080678 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 8080678:	b508      	push	{r3, lr}
 808067a:	4b02      	ldr	r3, [pc, #8]	; (8080684 <log_message+0xc>)
 808067c:	681b      	ldr	r3, [r3, #0]
 808067e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8080680:	9301      	str	r3, [sp, #4]
 8080682:	bd08      	pop	{r3, pc}
 8080684:	080201a0 	.word	0x080201a0

08080688 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080688:	b508      	push	{r3, lr}
 808068a:	4b02      	ldr	r3, [pc, #8]	; (8080694 <set_system_mode+0xc>)
 808068c:	681b      	ldr	r3, [r3, #0]
 808068e:	685b      	ldr	r3, [r3, #4]
 8080690:	9301      	str	r3, [sp, #4]
 8080692:	bd08      	pop	{r3, pc}
 8080694:	080401a4 	.word	0x080401a4

08080698 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8080698:	b508      	push	{r3, lr}
 808069a:	4b02      	ldr	r3, [pc, #8]	; (80806a4 <system_delay_ms+0xc>)
 808069c:	681b      	ldr	r3, [r3, #0]
 808069e:	695b      	ldr	r3, [r3, #20]
 80806a0:	9301      	str	r3, [sp, #4]
 80806a2:	bd08      	pop	{r3, pc}
 80806a4:	080401a4 	.word	0x080401a4

080806a8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80806a8:	b508      	push	{r3, lr}
 80806aa:	4b03      	ldr	r3, [pc, #12]	; (80806b8 <system_ctrl_set_app_request_handler+0x10>)
 80806ac:	681b      	ldr	r3, [r3, #0]
 80806ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80806b2:	9301      	str	r3, [sp, #4]
 80806b4:	bd08      	pop	{r3, pc}
 80806b6:	0000      	.short	0x0000
 80806b8:	080401a4 	.word	0x080401a4

080806bc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80806bc:	b508      	push	{r3, lr}
 80806be:	4b03      	ldr	r3, [pc, #12]	; (80806cc <system_ctrl_set_result+0x10>)
 80806c0:	681b      	ldr	r3, [r3, #0]
 80806c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80806c6:	9301      	str	r3, [sp, #4]
 80806c8:	bd08      	pop	{r3, pc}
 80806ca:	0000      	.short	0x0000
 80806cc:	080401a4 	.word	0x080401a4

080806d0 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
 80806d0:	b508      	push	{r3, lr}
 80806d2:	4b03      	ldr	r3, [pc, #12]	; (80806e0 <system_sleep_ext+0x10>)
 80806d4:	681b      	ldr	r3, [r3, #0]
 80806d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80806da:	9301      	str	r3, [sp, #4]
 80806dc:	bd08      	pop	{r3, pc}
 80806de:	0000      	.short	0x0000
 80806e0:	080401a4 	.word	0x080401a4

080806e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80806e4:	b508      	push	{r3, lr}
 80806e6:	4b02      	ldr	r3, [pc, #8]	; (80806f0 <network_connect+0xc>)
 80806e8:	681b      	ldr	r3, [r3, #0]
 80806ea:	685b      	ldr	r3, [r3, #4]
 80806ec:	9301      	str	r3, [sp, #4]
 80806ee:	bd08      	pop	{r3, pc}
 80806f0:	080401c8 	.word	0x080401c8

080806f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80806f4:	b508      	push	{r3, lr}
 80806f6:	4b02      	ldr	r3, [pc, #8]	; (8080700 <network_connecting+0xc>)
 80806f8:	681b      	ldr	r3, [r3, #0]
 80806fa:	689b      	ldr	r3, [r3, #8]
 80806fc:	9301      	str	r3, [sp, #4]
 80806fe:	bd08      	pop	{r3, pc}
 8080700:	080401c8 	.word	0x080401c8

08080704 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8080704:	b508      	push	{r3, lr}
 8080706:	4b02      	ldr	r3, [pc, #8]	; (8080710 <network_disconnect+0xc>)
 8080708:	681b      	ldr	r3, [r3, #0]
 808070a:	68db      	ldr	r3, [r3, #12]
 808070c:	9301      	str	r3, [sp, #4]
 808070e:	bd08      	pop	{r3, pc}
 8080710:	080401c8 	.word	0x080401c8

08080714 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8080714:	b508      	push	{r3, lr}
 8080716:	4b02      	ldr	r3, [pc, #8]	; (8080720 <network_ready+0xc>)
 8080718:	681b      	ldr	r3, [r3, #0]
 808071a:	691b      	ldr	r3, [r3, #16]
 808071c:	9301      	str	r3, [sp, #4]
 808071e:	bd08      	pop	{r3, pc}
 8080720:	080401c8 	.word	0x080401c8

08080724 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8080724:	b508      	push	{r3, lr}
 8080726:	4b02      	ldr	r3, [pc, #8]	; (8080730 <network_on+0xc>)
 8080728:	681b      	ldr	r3, [r3, #0]
 808072a:	695b      	ldr	r3, [r3, #20]
 808072c:	9301      	str	r3, [sp, #4]
 808072e:	bd08      	pop	{r3, pc}
 8080730:	080401c8 	.word	0x080401c8

08080734 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8080734:	b508      	push	{r3, lr}
 8080736:	4b02      	ldr	r3, [pc, #8]	; (8080740 <network_off+0xc>)
 8080738:	681b      	ldr	r3, [r3, #0]
 808073a:	699b      	ldr	r3, [r3, #24]
 808073c:	9301      	str	r3, [sp, #4]
 808073e:	bd08      	pop	{r3, pc}
 8080740:	080401c8 	.word	0x080401c8

08080744 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8080744:	b508      	push	{r3, lr}
 8080746:	4b02      	ldr	r3, [pc, #8]	; (8080750 <network_listen+0xc>)
 8080748:	681b      	ldr	r3, [r3, #0]
 808074a:	69db      	ldr	r3, [r3, #28]
 808074c:	9301      	str	r3, [sp, #4]
 808074e:	bd08      	pop	{r3, pc}
 8080750:	080401c8 	.word	0x080401c8

08080754 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8080754:	b508      	push	{r3, lr}
 8080756:	4b02      	ldr	r3, [pc, #8]	; (8080760 <network_listening+0xc>)
 8080758:	681b      	ldr	r3, [r3, #0]
 808075a:	6a1b      	ldr	r3, [r3, #32]
 808075c:	9301      	str	r3, [sp, #4]
 808075e:	bd08      	pop	{r3, pc}
 8080760:	080401c8 	.word	0x080401c8

08080764 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8080764:	b508      	push	{r3, lr}
 8080766:	4b02      	ldr	r3, [pc, #8]	; (8080770 <network_set_listen_timeout+0xc>)
 8080768:	681b      	ldr	r3, [r3, #0]
 808076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808076c:	9301      	str	r3, [sp, #4]
 808076e:	bd08      	pop	{r3, pc}
 8080770:	080401c8 	.word	0x080401c8

08080774 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8080774:	b508      	push	{r3, lr}
 8080776:	4b02      	ldr	r3, [pc, #8]	; (8080780 <network_get_listen_timeout+0xc>)
 8080778:	681b      	ldr	r3, [r3, #0]
 808077a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808077c:	9301      	str	r3, [sp, #4]
 808077e:	bd08      	pop	{r3, pc}
 8080780:	080401c8 	.word	0x080401c8

08080784 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8080784:	b508      	push	{r3, lr}
 8080786:	4b02      	ldr	r3, [pc, #8]	; (8080790 <spark_process+0xc>)
 8080788:	681b      	ldr	r3, [r3, #0]
 808078a:	689b      	ldr	r3, [r3, #8]
 808078c:	9301      	str	r3, [sp, #4]
 808078e:	bd08      	pop	{r3, pc}
 8080790:	080401cc 	.word	0x080401cc

08080794 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8080794:	b508      	push	{r3, lr}
 8080796:	4b02      	ldr	r3, [pc, #8]	; (80807a0 <spark_cloud_flag_connect+0xc>)
 8080798:	681b      	ldr	r3, [r3, #0]
 808079a:	68db      	ldr	r3, [r3, #12]
 808079c:	9301      	str	r3, [sp, #4]
 808079e:	bd08      	pop	{r3, pc}
 80807a0:	080401cc 	.word	0x080401cc

080807a4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80807a4:	b508      	push	{r3, lr}
 80807a6:	4b02      	ldr	r3, [pc, #8]	; (80807b0 <spark_cloud_flag_connected+0xc>)
 80807a8:	681b      	ldr	r3, [r3, #0]
 80807aa:	695b      	ldr	r3, [r3, #20]
 80807ac:	9301      	str	r3, [sp, #4]
 80807ae:	bd08      	pop	{r3, pc}
 80807b0:	080401cc 	.word	0x080401cc

080807b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80807b4:	b508      	push	{r3, lr}
 80807b6:	4b02      	ldr	r3, [pc, #8]	; (80807c0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80807b8:	681b      	ldr	r3, [r3, #0]
 80807ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80807bc:	9301      	str	r3, [sp, #4]
 80807be:	bd08      	pop	{r3, pc}
 80807c0:	080401cc 	.word	0x080401cc

080807c4 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 80807c4:	b508      	push	{r3, lr}
 80807c6:	4b02      	ldr	r3, [pc, #8]	; (80807d0 <spark_cloud_disconnect+0xc>)
 80807c8:	681b      	ldr	r3, [r3, #0]
 80807ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80807cc:	9301      	str	r3, [sp, #4]
 80807ce:	bd08      	pop	{r3, pc}
 80807d0:	080401cc 	.word	0x080401cc

080807d4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80807d4:	b508      	push	{r3, lr}
 80807d6:	4b02      	ldr	r3, [pc, #8]	; (80807e0 <malloc+0xc>)
 80807d8:	681b      	ldr	r3, [r3, #0]
 80807da:	681b      	ldr	r3, [r3, #0]
 80807dc:	9301      	str	r3, [sp, #4]
 80807de:	bd08      	pop	{r3, pc}
 80807e0:	080401a0 	.word	0x080401a0

080807e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80807e4:	b508      	push	{r3, lr}
 80807e6:	4b02      	ldr	r3, [pc, #8]	; (80807f0 <free+0xc>)
 80807e8:	681b      	ldr	r3, [r3, #0]
 80807ea:	685b      	ldr	r3, [r3, #4]
 80807ec:	9301      	str	r3, [sp, #4]
 80807ee:	bd08      	pop	{r3, pc}
 80807f0:	080401a0 	.word	0x080401a0

080807f4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80807f4:	b508      	push	{r3, lr}
 80807f6:	4b02      	ldr	r3, [pc, #8]	; (8080800 <vsnprintf+0xc>)
 80807f8:	681b      	ldr	r3, [r3, #0]
 80807fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80807fc:	9301      	str	r3, [sp, #4]
 80807fe:	bd08      	pop	{r3, pc}
 8080800:	080401a0 	.word	0x080401a0

08080804 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8080804:	b508      	push	{r3, lr}
 8080806:	4b02      	ldr	r3, [pc, #8]	; (8080810 <newlib_impure_ptr_callback+0xc>)
 8080808:	681b      	ldr	r3, [r3, #0]
 808080a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808080c:	9301      	str	r3, [sp, #4]
 808080e:	bd08      	pop	{r3, pc}
 8080810:	080401a0 	.word	0x080401a0

08080814 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8080814:	b510      	push	{r4, lr}
 8080816:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8080818:	6800      	ldr	r0, [r0, #0]
 808081a:	b118      	cbz	r0, 8080824 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 808081c:	f7ff ffe2 	bl	80807e4 <free>
            wakeupSource_ = nullptr;
 8080820:	2300      	movs	r3, #0
 8080822:	6023      	str	r3, [r4, #0]
        }
    }
 8080824:	bd10      	pop	{r4, pc}

08080826 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8080826:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8080828:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808082c:	460d      	mov	r5, r1
        error_ = result.error_;
 808082e:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8080830:	460b      	mov	r3, r1
 8080832:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8080836:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 8080838:	f8c0 2006 	str.w	r2, [r0, #6]
 808083c:	889b      	ldrh	r3, [r3, #4]
 808083e:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8080840:	f7ff ffe8 	bl	8080814 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 8080844:	682b      	ldr	r3, [r5, #0]
 8080846:	b113      	cbz	r3, 808084e <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8080848:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 808084a:	2300      	movs	r3, #0
 808084c:	602b      	str	r3, [r5, #0]
    }
 808084e:	4620      	mov	r0, r4
 8080850:	bd38      	pop	{r3, r4, r5, pc}
	...

08080854 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
 8080854:	b538      	push	{r3, r4, r5, lr}
 8080856:	460c      	mov	r4, r1
 8080858:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
 808085a:	f7ff ffdb 	bl	8080814 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
 808085e:	b144      	cbz	r4, 8080872 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
 8080860:	8820      	ldrh	r0, [r4, #0]
 8080862:	f7ff ffb7 	bl	80807d4 <malloc>
 8080866:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
 8080868:	b128      	cbz	r0, 8080876 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
 808086a:	4621      	mov	r1, r4
 808086c:	8822      	ldrh	r2, [r4, #0]
 808086e:	f000 fc93 	bl	8081198 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
 8080872:	2000      	movs	r0, #0
    }
 8080874:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
 8080876:	4801      	ldr	r0, [pc, #4]	; (808087c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
 8080878:	e7fc      	b.n	8080874 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
 808087a:	bf00      	nop
 808087c:	fffffefc 	.word	0xfffffefc

08080880 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
 8080880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080882:	4d2d      	ldr	r5, [pc, #180]	; (8080938 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
 8080884:	7d0b      	ldrb	r3, [r1, #20]
 8080886:	4604      	mov	r4, r0
 8080888:	b08b      	sub	sp, #44	; 0x2c
 808088a:	4608      	mov	r0, r1
 808088c:	1daf      	adds	r7, r5, #6
 808088e:	2b00      	cmp	r3, #0
 8080890:	d038      	beq.n	8080904 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
 8080892:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
 8080894:	791b      	ldrb	r3, [r3, #4]
 8080896:	2b00      	cmp	r3, #0
 8080898:	d034      	beq.n	8080904 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
 808089a:	2200      	movs	r2, #0
    SleepResult() {}
 808089c:	4b27      	ldr	r3, [pc, #156]	; (808093c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
 808089e:	a902      	add	r1, sp, #8
 80808a0:	3004      	adds	r0, #4
 80808a2:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
 80808a4:	9202      	str	r2, [sp, #8]
 80808a6:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
 80808aa:	f88d 200e 	strb.w	r2, [sp, #14]
 80808ae:	f7ff ff0f 	bl	80806d0 <system_sleep_ext>
        compatResult_ = result.compatResult_;
 80808b2:	f8dd 300e 	ldr.w	r3, [sp, #14]
        result.setError(static_cast<system_error_t>(ret));
 80808b6:	b200      	sxth	r0, r0
 80808b8:	f8c5 3006 	str.w	r3, [r5, #6]
 80808bc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
 80808c0:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
 80808c4:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 80808c6:	9902      	ldr	r1, [sp, #8]
 80808c8:	4628      	mov	r0, r5
        compatResult_ = result.compatResult_;
 80808ca:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
 80808cc:	f7ff ffc2 	bl	8080854 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
 80808d0:	a802      	add	r0, sp, #8
 80808d2:	f7ff ff9f 	bl	8080814 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
 80808d6:	2300      	movs	r3, #0
 80808d8:	6023      	str	r3, [r4, #0]
 80808da:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 80808dc:	71a3      	strb	r3, [r4, #6]
 80808de:	8123      	strh	r3, [r4, #8]
 80808e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80808e4:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
 80808e6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 80808ea:	4620      	mov	r0, r4
        error_ = result.error_;
 80808ec:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
 80808ee:	683b      	ldr	r3, [r7, #0]
        copyWakeupSource(result.wakeupSource_);
 80808f0:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
 80808f2:	f8c4 3006 	str.w	r3, [r4, #6]
 80808f6:	88bb      	ldrh	r3, [r7, #4]
 80808f8:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
 80808fa:	f7ff ffab 	bl	8080854 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
 80808fe:	4620      	mov	r0, r4
 8080900:	b00b      	add	sp, #44	; 0x2c
 8080902:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
 8080904:	2600      	movs	r6, #0
 8080906:	2320      	movs	r3, #32
 8080908:	e9cd 3602 	strd	r3, r6, [sp, #8]
 808090c:	4b0c      	ldr	r3, [pc, #48]	; (8080940 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
 808090e:	2032      	movs	r0, #50	; 0x32
 8080910:	9300      	str	r3, [sp, #0]
 8080912:	490c      	ldr	r1, [pc, #48]	; (8080944 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
 8080914:	4633      	mov	r3, r6
 8080916:	aa02      	add	r2, sp, #8
 8080918:	f7ff feae 	bl	8080678 <log_message>
    SleepResult() {}
 808091c:	4b07      	ldr	r3, [pc, #28]	; (808093c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
 808091e:	a902      	add	r1, sp, #8
 8080920:	9304      	str	r3, [sp, #16]
        error_ = error;
 8080922:	f64f 63f2 	movw	r3, #65266	; 0xfef2
 8080926:	4804      	ldr	r0, [pc, #16]	; (8080938 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
 8080928:	9602      	str	r6, [sp, #8]
    SleepResult() {}
 808092a:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
 808092e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8080932:	f7ff ff78 	bl	8080826 <_ZN17SystemSleepResultaSEOS_>
 8080936:	e7cb      	b.n	80808d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
 8080938:	20000088 	.word	0x20000088
 808093c:	ffff0000 	.word	0xffff0000
 8080940:	08081357 	.word	0x08081357
 8080944:	08081350 	.word	0x08081350

08080948 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8080948:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 808094a:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 808094c:	b510      	push	{r4, lr}
 808094e:	4b08      	ldr	r3, [pc, #32]	; (8080970 <_GLOBAL__sub_I_System+0x28>)
 8080950:	4c08      	ldr	r4, [pc, #32]	; (8080974 <_GLOBAL__sub_I_System+0x2c>)
 8080952:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 8080954:	4b08      	ldr	r3, [pc, #32]	; (8080978 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 8080956:	6020      	str	r0, [r4, #0]
 8080958:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 808095a:	71a0      	strb	r0, [r4, #6]
 808095c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808095e:	f7ff fe93 	bl	8080688 <set_system_mode>
SystemClass System;
 8080962:	4620      	mov	r0, r4
 8080964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 8080968:	4a04      	ldr	r2, [pc, #16]	; (808097c <_GLOBAL__sub_I_System+0x34>)
 808096a:	4905      	ldr	r1, [pc, #20]	; (8080980 <_GLOBAL__sub_I_System+0x38>)
 808096c:	f000 bbfc 	b.w	8081168 <__aeabi_atexit>
 8080970:	20000094 	.word	0x20000094
 8080974:	20000088 	.word	0x20000088
 8080978:	ffff0000 	.word	0xffff0000
 808097c:	20000070 	.word	0x20000070
 8080980:	080800af 	.word	0x080800af

08080984 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8080984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080986:	4606      	mov	r6, r0
 8080988:	460d      	mov	r5, r1
  size_t n = 0;
 808098a:	2400      	movs	r4, #0
 808098c:	188f      	adds	r7, r1, r2
  while (size--) {
 808098e:	42bd      	cmp	r5, r7
 8080990:	d00c      	beq.n	80809ac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8080992:	6833      	ldr	r3, [r6, #0]
 8080994:	4630      	mov	r0, r6
 8080996:	689b      	ldr	r3, [r3, #8]
 8080998:	f815 1b01 	ldrb.w	r1, [r5], #1
 808099c:	4798      	blx	r3
     if (chunk>=0)
 808099e:	1e03      	subs	r3, r0, #0
 80809a0:	db01      	blt.n	80809a6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80809a2:	441c      	add	r4, r3
  while (size--) {
 80809a4:	e7f3      	b.n	808098e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80809a6:	2c00      	cmp	r4, #0
 80809a8:	bf08      	it	eq
 80809aa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80809ac:	4620      	mov	r0, r4
 80809ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080809b0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80809b0:	b570      	push	{r4, r5, r6, lr}
 80809b2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80809b4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80809b6:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80809b8:	b149      	cbz	r1, 80809ce <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80809ba:	f000 fc27 	bl	808120c <strlen>
 80809be:	682b      	ldr	r3, [r5, #0]
 80809c0:	4602      	mov	r2, r0
 80809c2:	4621      	mov	r1, r4
 80809c4:	4628      	mov	r0, r5
    }
 80809c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80809ca:	68db      	ldr	r3, [r3, #12]
 80809cc:	4718      	bx	r3
    }
 80809ce:	bd70      	pop	{r4, r5, r6, pc}

080809d0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80809d0:	6803      	ldr	r3, [r0, #0]
 80809d2:	689b      	ldr	r3, [r3, #8]
 80809d4:	4718      	bx	r3

080809d6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80809d6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80809d8:	210d      	movs	r1, #13
{
 80809da:	4605      	mov	r5, r0
  size_t n = print('\r');
 80809dc:	f7ff fff8 	bl	80809d0 <_ZN5Print5printEc>
  n += print('\n');
 80809e0:	210a      	movs	r1, #10
  size_t n = print('\r');
 80809e2:	4604      	mov	r4, r0
  n += print('\n');
 80809e4:	4628      	mov	r0, r5
 80809e6:	f7ff fff3 	bl	80809d0 <_ZN5Print5printEc>
  return n;
}
 80809ea:	4420      	add	r0, r4
 80809ec:	bd38      	pop	{r3, r4, r5, pc}

080809ee <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80809ee:	b538      	push	{r3, r4, r5, lr}
 80809f0:	4605      	mov	r5, r0
  return write(str);
 80809f2:	f7ff ffdd 	bl	80809b0 <_ZN5Print5writeEPKc>
 80809f6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80809f8:	4628      	mov	r0, r5
 80809fa:	f7ff ffec 	bl	80809d6 <_ZN5Print7printlnEv>
  return n;
}
 80809fe:	4420      	add	r0, r4
 8080a00:	bd38      	pop	{r3, r4, r5, pc}

08080a02 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8080a02:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8080a04:	2a01      	cmp	r2, #1
 8080a06:	bf98      	it	ls
 8080a08:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8080a0a:	b530      	push	{r4, r5, lr}
 8080a0c:	b08b      	sub	sp, #44	; 0x2c
 8080a0e:	460c      	mov	r4, r1
  *str = '\0';
 8080a10:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8080a14:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 8080a16:	4625      	mov	r5, r4
 8080a18:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8080a1c:	fb04 5312 	mls	r3, r4, r2, r5
 8080a20:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080a22:	2b09      	cmp	r3, #9
 8080a24:	bf94      	ite	ls
 8080a26:	3330      	addls	r3, #48	; 0x30
 8080a28:	3337      	addhi	r3, #55	; 0x37
 8080a2a:	b2db      	uxtb	r3, r3
  } while(n);
 8080a2c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080a2e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8080a32:	d9f0      	bls.n	8080a16 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8080a34:	f7ff ffbc 	bl	80809b0 <_ZN5Print5writeEPKc>
}
 8080a38:	b00b      	add	sp, #44	; 0x2c
 8080a3a:	bd30      	pop	{r4, r5, pc}

08080a3c <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 8080a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080a40:	b086      	sub	sp, #24
 8080a42:	af00      	add	r7, sp, #0
 8080a44:	4605      	mov	r5, r0
 8080a46:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 8080a48:	1d38      	adds	r0, r7, #4
 8080a4a:	2114      	movs	r1, #20
{
 8080a4c:	4614      	mov	r4, r2
    va_copy(args2, args);
 8080a4e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 8080a50:	f7ff fed0 	bl	80807f4 <vsnprintf>

    if (n<bufsize)
 8080a54:	2813      	cmp	r0, #19
 8080a56:	d80e      	bhi.n	8080a76 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 8080a58:	4628      	mov	r0, r5
 8080a5a:	1d39      	adds	r1, r7, #4
 8080a5c:	f7ff ffa8 	bl	80809b0 <_ZN5Print5writeEPKc>
 8080a60:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 8080a62:	b11e      	cbz	r6, 8080a6c <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 8080a64:	4628      	mov	r0, r5
 8080a66:	f7ff ffb6 	bl	80809d6 <_ZN5Print7printlnEv>
 8080a6a:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 8080a6c:	4620      	mov	r0, r4
 8080a6e:	3718      	adds	r7, #24
 8080a70:	46bd      	mov	sp, r7
 8080a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 8080a76:	f100 0308 	add.w	r3, r0, #8
 8080a7a:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 8080a7e:	46e8      	mov	r8, sp
        char bigger[n+1];
 8080a80:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 8080a84:	4622      	mov	r2, r4
 8080a86:	1c41      	adds	r1, r0, #1
 8080a88:	683b      	ldr	r3, [r7, #0]
 8080a8a:	4668      	mov	r0, sp
 8080a8c:	f7ff feb2 	bl	80807f4 <vsnprintf>
  return write(str);
 8080a90:	4669      	mov	r1, sp
 8080a92:	4628      	mov	r0, r5
 8080a94:	f7ff ff8c 	bl	80809b0 <_ZN5Print5writeEPKc>
 8080a98:	4604      	mov	r4, r0
 8080a9a:	46c5      	mov	sp, r8
 8080a9c:	e7e1      	b.n	8080a62 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

08080aa0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8080aa0:	4b01      	ldr	r3, [pc, #4]	; (8080aa8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8080aa2:	4a02      	ldr	r2, [pc, #8]	; (8080aac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8080aa4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8080aa6:	4770      	bx	lr
 8080aa8:	20000098 	.word	0x20000098
 8080aac:	0808137e 	.word	0x0808137e

08080ab0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8080ab0:	4b02      	ldr	r3, [pc, #8]	; (8080abc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8080ab2:	681a      	ldr	r2, [r3, #0]
 8080ab4:	4b02      	ldr	r3, [pc, #8]	; (8080ac0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8080ab6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8080ab8:	4770      	bx	lr
 8080aba:	bf00      	nop
 8080abc:	20000008 	.word	0x20000008
 8080ac0:	2000009c 	.word	0x2000009c

08080ac4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8080ac4:	2100      	movs	r1, #0
 8080ac6:	f7ff bde7 	b.w	8080698 <system_delay_ms>

08080aca <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080aca:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080acc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8080ace:	4604      	mov	r4, r0
      if (_M_manager)
 8080ad0:	b113      	cbz	r3, 8080ad8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080ad2:	2203      	movs	r2, #3
 8080ad4:	4601      	mov	r1, r0
 8080ad6:	4798      	blx	r3
    }
 8080ad8:	4620      	mov	r0, r4
 8080ada:	bd10      	pop	{r4, pc}

08080adc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8080adc:	b510      	push	{r4, lr}
 8080ade:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080ae0:	f7ff fff3 	bl	8080aca <_ZNSt14_Function_baseD1Ev>
 8080ae4:	4620      	mov	r0, r4
 8080ae6:	bd10      	pop	{r4, pc}

08080ae8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8080ae8:	2300      	movs	r3, #0
 8080aea:	4803      	ldr	r0, [pc, #12]	; (8080af8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8080aec:	4a03      	ldr	r2, [pc, #12]	; (8080afc <_GLOBAL__sub_I_RGB+0x14>)
 8080aee:	4904      	ldr	r1, [pc, #16]	; (8080b00 <_GLOBAL__sub_I_RGB+0x18>)
 8080af0:	6083      	str	r3, [r0, #8]
 8080af2:	f000 bb39 	b.w	8081168 <__aeabi_atexit>
 8080af6:	bf00      	nop
 8080af8:	200000a0 	.word	0x200000a0
 8080afc:	20000070 	.word	0x20000070
 8080b00:	08080add 	.word	0x08080add

08080b04 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8080b04:	4b01      	ldr	r3, [pc, #4]	; (8080b0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8080b06:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8080b08:	4770      	bx	lr
 8080b0a:	bf00      	nop
 8080b0c:	2000000c 	.word	0x2000000c

08080b10 <serialEventRun>:
{
 8080b10:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8080b12:	4b17      	ldr	r3, [pc, #92]	; (8080b70 <serialEventRun+0x60>)
 8080b14:	b143      	cbz	r3, 8080b28 <serialEventRun+0x18>
 8080b16:	f000 f973 	bl	8080e00 <_Z16_fetch_usbserialv>
 8080b1a:	6803      	ldr	r3, [r0, #0]
 8080b1c:	691b      	ldr	r3, [r3, #16]
 8080b1e:	4798      	blx	r3
 8080b20:	2800      	cmp	r0, #0
 8080b22:	dd01      	ble.n	8080b28 <serialEventRun+0x18>
        serialEvent();
 8080b24:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8080b28:	4b12      	ldr	r3, [pc, #72]	; (8080b74 <serialEventRun+0x64>)
 8080b2a:	b143      	cbz	r3, 8080b3e <serialEventRun+0x2e>
 8080b2c:	f000 fa7a 	bl	8081024 <_Z22__fetch_global_Serial1v>
 8080b30:	6803      	ldr	r3, [r0, #0]
 8080b32:	691b      	ldr	r3, [r3, #16]
 8080b34:	4798      	blx	r3
 8080b36:	2800      	cmp	r0, #0
 8080b38:	dd01      	ble.n	8080b3e <serialEventRun+0x2e>
        serialEvent1();
 8080b3a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8080b3e:	4b0e      	ldr	r3, [pc, #56]	; (8080b78 <serialEventRun+0x68>)
 8080b40:	b10b      	cbz	r3, 8080b46 <serialEventRun+0x36>
 8080b42:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8080b46:	4b0d      	ldr	r3, [pc, #52]	; (8080b7c <serialEventRun+0x6c>)
 8080b48:	b10b      	cbz	r3, 8080b4e <serialEventRun+0x3e>
 8080b4a:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8080b4e:	4b0c      	ldr	r3, [pc, #48]	; (8080b80 <serialEventRun+0x70>)
 8080b50:	b10b      	cbz	r3, 8080b56 <serialEventRun+0x46>
 8080b52:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8080b56:	4b0b      	ldr	r3, [pc, #44]	; (8080b84 <serialEventRun+0x74>)
 8080b58:	b143      	cbz	r3, 8080b6c <serialEventRun+0x5c>
 8080b5a:	f000 f98f 	bl	8080e7c <_Z17_fetch_usbserial1v>
 8080b5e:	6803      	ldr	r3, [r0, #0]
 8080b60:	691b      	ldr	r3, [r3, #16]
 8080b62:	4798      	blx	r3
 8080b64:	2800      	cmp	r0, #0
 8080b66:	dd01      	ble.n	8080b6c <serialEventRun+0x5c>
        usbSerialEvent1();
 8080b68:	f3af 8000 	nop.w
}
 8080b6c:	bd08      	pop	{r3, pc}
 8080b6e:	bf00      	nop
	...

08080b88 <_post_loop>:
{
 8080b88:	b508      	push	{r3, lr}
	serialEventRun();
 8080b8a:	f7ff ffc1 	bl	8080b10 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080b8e:	f7ff fceb 	bl	8080568 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080b92:	4b01      	ldr	r3, [pc, #4]	; (8080b98 <_post_loop+0x10>)
 8080b94:	6018      	str	r0, [r3, #0]
}
 8080b96:	bd08      	pop	{r3, pc}
 8080b98:	20000544 	.word	0x20000544

08080b9c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8080b9c:	4802      	ldr	r0, [pc, #8]	; (8080ba8 <_Z33system_initialize_user_backup_ramv+0xc>)
 8080b9e:	4a03      	ldr	r2, [pc, #12]	; (8080bac <_Z33system_initialize_user_backup_ramv+0x10>)
 8080ba0:	4903      	ldr	r1, [pc, #12]	; (8080bb0 <_Z33system_initialize_user_backup_ramv+0x14>)
 8080ba2:	1a12      	subs	r2, r2, r0
 8080ba4:	f000 baf8 	b.w	8081198 <memcpy>
 8080ba8:	40024000 	.word	0x40024000
 8080bac:	40024004 	.word	0x40024004
 8080bb0:	080814a0 	.word	0x080814a0

08080bb4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080bb4:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8080bb6:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080bb8:	461a      	mov	r2, r3
 8080bba:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080bbe:	9300      	str	r3, [sp, #0]
 8080bc0:	f7ff fd7c 	bl	80806bc <system_ctrl_set_result>
}
 8080bc4:	b003      	add	sp, #12
 8080bc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080bcc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8080bcc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8080bce:	8843      	ldrh	r3, [r0, #2]
 8080bd0:	2b0a      	cmp	r3, #10
 8080bd2:	d008      	beq.n	8080be6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8080bd4:	2b50      	cmp	r3, #80	; 0x50
 8080bd6:	d10b      	bne.n	8080bf0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8080bd8:	4b09      	ldr	r3, [pc, #36]	; (8080c00 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8080bda:	681b      	ldr	r3, [r3, #0]
 8080bdc:	b14b      	cbz	r3, 8080bf2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8080bde:	b003      	add	sp, #12
 8080be0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8080be4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8080be6:	f7ff ffe5 	bl	8080bb4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8080bea:	b003      	add	sp, #12
 8080bec:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080bf0:	2300      	movs	r3, #0
 8080bf2:	461a      	mov	r2, r3
 8080bf4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080bf8:	9300      	str	r3, [sp, #0]
 8080bfa:	f7ff fd5f 	bl	80806bc <system_ctrl_set_result>
}
 8080bfe:	e7f4      	b.n	8080bea <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8080c00:	200000b4 	.word	0x200000b4

08080c04 <module_user_init_hook>:
{
 8080c04:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8080c06:	4c12      	ldr	r4, [pc, #72]	; (8080c50 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8080c08:	2100      	movs	r1, #0
 8080c0a:	4812      	ldr	r0, [pc, #72]	; (8080c54 <module_user_init_hook+0x50>)
 8080c0c:	f7ff fdfa 	bl	8080804 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8080c10:	4d11      	ldr	r5, [pc, #68]	; (8080c58 <module_user_init_hook+0x54>)
 8080c12:	6823      	ldr	r3, [r4, #0]
 8080c14:	42ab      	cmp	r3, r5
 8080c16:	bf0c      	ite	eq
 8080c18:	2201      	moveq	r2, #1
 8080c1a:	2200      	movne	r2, #0
 8080c1c:	4b0f      	ldr	r3, [pc, #60]	; (8080c5c <module_user_init_hook+0x58>)
 8080c1e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8080c20:	d002      	beq.n	8080c28 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 8080c22:	f7ff ffbb 	bl	8080b9c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8080c26:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8080c28:	f7ff fc96 	bl	8080558 <HAL_RNG_GetRandomNumber>
 8080c2c:	4604      	mov	r4, r0
    srand(seed);
 8080c2e:	f000 fac9 	bl	80811c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8080c32:	4b0b      	ldr	r3, [pc, #44]	; (8080c60 <module_user_init_hook+0x5c>)
 8080c34:	b113      	cbz	r3, 8080c3c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8080c36:	4620      	mov	r0, r4
 8080c38:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8080c3c:	2100      	movs	r1, #0
 8080c3e:	4808      	ldr	r0, [pc, #32]	; (8080c60 <module_user_init_hook+0x5c>)
 8080c40:	f7ff fdb8 	bl	80807b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8080c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8080c48:	2100      	movs	r1, #0
 8080c4a:	4806      	ldr	r0, [pc, #24]	; (8080c64 <module_user_init_hook+0x60>)
 8080c4c:	f7ff bd2c 	b.w	80806a8 <system_ctrl_set_app_request_handler>
 8080c50:	40024000 	.word	0x40024000
 8080c54:	08080b05 	.word	0x08080b05
 8080c58:	9a271c1e 	.word	0x9a271c1e
 8080c5c:	200000b0 	.word	0x200000b0
 8080c60:	00000000 	.word	0x00000000
 8080c64:	08080bcd 	.word	0x08080bcd

08080c68 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:
} // namespace

spark_cloud_disconnect_options CloudDisconnectOptions::toSystemOptions() const
{
    spark_cloud_disconnect_options opts = {};
    opts.size = sizeof(opts);
 8080c68:	2308      	movs	r3, #8

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 8080c6a:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
 8080c6c:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
 8080c70:	6803      	ldr	r3, [r0, #0]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8080c72:	2100      	movs	r1, #0
    opts.flags = flags_;
 8080c74:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
 8080c78:	7a03      	ldrb	r3, [r0, #8]
 8080c7a:	f88d 3003 	strb.w	r3, [sp, #3]
    opts.timeout = timeout_;
 8080c7e:	6843      	ldr	r3, [r0, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8080c80:	4668      	mov	r0, sp
    opts.timeout = timeout_;
 8080c82:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8080c84:	f7ff fd9e 	bl	80807c4 <spark_cloud_disconnect>
}
 8080c88:	b003      	add	sp, #12
 8080c8a:	f85d fb04 	ldr.w	pc, [sp], #4

08080c8e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8080c8e:	4770      	bx	lr

08080c90 <_ZN9IPAddressD0Ev>:
 8080c90:	b510      	push	{r4, lr}
 8080c92:	4604      	mov	r4, r0
 8080c94:	2108      	movs	r1, #8
 8080c96:	f000 fa6c 	bl	8081172 <_ZdlPvj>
 8080c9a:	4620      	mov	r0, r4
 8080c9c:	bd10      	pop	{r4, pc}

08080c9e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8080c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080ca0:	460e      	mov	r6, r1
 8080ca2:	2400      	movs	r4, #0
 8080ca4:	f100 0708 	add.w	r7, r0, #8
 8080ca8:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8080caa:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8080cae:	220a      	movs	r2, #10
 8080cb0:	4630      	mov	r0, r6
 8080cb2:	f7ff fea6 	bl	8080a02 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080cb6:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080cb8:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8080cba:	d101      	bne.n	8080cc0 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8080cbc:	4620      	mov	r0, r4
 8080cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8080cc0:	2c00      	cmp	r4, #0
 8080cc2:	d0f2      	beq.n	8080caa <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8080cc4:	212e      	movs	r1, #46	; 0x2e
 8080cc6:	4630      	mov	r0, r6
 8080cc8:	f7ff fe82 	bl	80809d0 <_ZN5Print5printEc>
 8080ccc:	4404      	add	r4, r0
 8080cce:	e7ec      	b.n	8080caa <_ZNK9IPAddress7printToER5Print+0xc>

08080cd0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8080cd0:	4a02      	ldr	r2, [pc, #8]	; (8080cdc <_ZN9IPAddressC1Ev+0xc>)
 8080cd2:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8080cd4:	2200      	movs	r2, #0
 8080cd6:	6042      	str	r2, [r0, #4]
}
 8080cd8:	4770      	bx	lr
 8080cda:	bf00      	nop
 8080cdc:	080813a8 	.word	0x080813a8

08080ce0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8080ce0:	4a02      	ldr	r2, [pc, #8]	; (8080cec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8080ce2:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8080ce4:	680a      	ldr	r2, [r1, #0]
 8080ce6:	6042      	str	r2, [r0, #4]
}
 8080ce8:	4770      	bx	lr
 8080cea:	bf00      	nop
 8080cec:	080813a8 	.word	0x080813a8

08080cf0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8080cf0:	4a01      	ldr	r2, [pc, #4]	; (8080cf8 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 8080cf2:	e9c0 2100 	strd	r2, r1, [r0]
}
 8080cf6:	4770      	bx	lr
 8080cf8:	080813a8 	.word	0x080813a8

08080cfc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8080cfc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8080cfe:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8080d02:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8080d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8080d0a:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8080d0e:	6044      	str	r4, [r0, #4]
}
 8080d10:	bd10      	pop	{r4, pc}
	...

08080d14 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8080d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080d16:	4d04      	ldr	r5, [pc, #16]	; (8080d28 <_ZN9IPAddressC1Ehhhh+0x14>)
 8080d18:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8080d1a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8080d1e:	9500      	str	r5, [sp, #0]
 8080d20:	f7ff ffec 	bl	8080cfc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8080d24:	b003      	add	sp, #12
 8080d26:	bd30      	pop	{r4, r5, pc}
 8080d28:	080813a8 	.word	0x080813a8

08080d2c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8080d2c:	7441      	strb	r1, [r0, #17]
}
 8080d2e:	4770      	bx	lr

08080d30 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8080d30:	4770      	bx	lr

08080d32 <_ZN9USBSerial4readEv>:
{
 8080d32:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8080d34:	2100      	movs	r1, #0
 8080d36:	7c00      	ldrb	r0, [r0, #16]
 8080d38:	f7ff fc86 	bl	8080648 <HAL_USB_USART_Receive_Data>
}
 8080d3c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080d40:	bd08      	pop	{r3, pc}

08080d42 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 8080d42:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8080d44:	2101      	movs	r1, #1
 8080d46:	7c00      	ldrb	r0, [r0, #16]
 8080d48:	f7ff fc7e 	bl	8080648 <HAL_USB_USART_Receive_Data>
}
 8080d4c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080d50:	bd08      	pop	{r3, pc}

08080d52 <_ZN9USBSerial17availableForWriteEv>:
{
 8080d52:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8080d54:	7c00      	ldrb	r0, [r0, #16]
 8080d56:	f7ff fc6f 	bl	8080638 <HAL_USB_USART_Available_Data_For_Write>
}
 8080d5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080d5e:	bd08      	pop	{r3, pc}

08080d60 <_ZN9USBSerial9availableEv>:
{
 8080d60:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8080d62:	7c00      	ldrb	r0, [r0, #16]
 8080d64:	f7ff fc60 	bl	8080628 <HAL_USB_USART_Available_Data>
}
 8080d68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080d6c:	bd08      	pop	{r3, pc}

08080d6e <_ZN9USBSerial5writeEh>:
{
 8080d6e:	b538      	push	{r3, r4, r5, lr}
 8080d70:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8080d72:	7c00      	ldrb	r0, [r0, #16]
{
 8080d74:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8080d76:	f7ff fc5f 	bl	8080638 <HAL_USB_USART_Available_Data_For_Write>
 8080d7a:	2800      	cmp	r0, #0
 8080d7c:	dc01      	bgt.n	8080d82 <_ZN9USBSerial5writeEh+0x14>
 8080d7e:	7c60      	ldrb	r0, [r4, #17]
 8080d80:	b128      	cbz	r0, 8080d8e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8080d82:	4629      	mov	r1, r5
 8080d84:	7c20      	ldrb	r0, [r4, #16]
 8080d86:	f7ff fc67 	bl	8080658 <HAL_USB_USART_Send_Data>
 8080d8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8080d8e:	bd38      	pop	{r3, r4, r5, pc}

08080d90 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8080d90:	7c00      	ldrb	r0, [r0, #16]
 8080d92:	f7ff bc69 	b.w	8080668 <HAL_USB_USART_Flush_Data>

08080d96 <_ZN9USBSerialD0Ev>:
 8080d96:	b510      	push	{r4, lr}
 8080d98:	4604      	mov	r4, r0
 8080d9a:	2114      	movs	r1, #20
 8080d9c:	f000 f9e9 	bl	8081172 <_ZdlPvj>
 8080da0:	4620      	mov	r0, r4
 8080da2:	bd10      	pop	{r4, pc}

08080da4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8080da4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080daa:	4604      	mov	r4, r0
 8080dac:	4608      	mov	r0, r1
 8080dae:	2100      	movs	r1, #0
 8080db0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8080db4:	4b04      	ldr	r3, [pc, #16]	; (8080dc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8080db6:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8080db8:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8080dba:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8080dbc:	4611      	mov	r1, r2
  _blocking = true;
 8080dbe:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8080dc0:	f7ff fc22 	bl	8080608 <HAL_USB_USART_Init>
}
 8080dc4:	4620      	mov	r0, r4
 8080dc6:	bd10      	pop	{r4, pc}
 8080dc8:	080813bc 	.word	0x080813bc

08080dcc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8080dcc:	2200      	movs	r2, #0
 8080dce:	7c00      	ldrb	r0, [r0, #16]
 8080dd0:	f7ff bc22 	b.w	8080618 <HAL_USB_USART_Begin>

08080dd4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8080dd4:	b510      	push	{r4, lr}
 8080dd6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8080dd8:	2214      	movs	r2, #20
 8080dda:	2100      	movs	r1, #0
 8080ddc:	f000 f9ea 	bl	80811b4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8080de0:	4b05      	ldr	r3, [pc, #20]	; (8080df8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8080de2:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8080de4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8080de6:	4b05      	ldr	r3, [pc, #20]	; (8080dfc <_Z19acquireSerialBufferv+0x28>)
 8080de8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8080dea:	f240 1301 	movw	r3, #257	; 0x101
 8080dee:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8080df0:	2381      	movs	r3, #129	; 0x81
 8080df2:	8223      	strh	r3, [r4, #16]
}
 8080df4:	bd10      	pop	{r4, pc}
 8080df6:	bf00      	nop
 8080df8:	200000e8 	.word	0x200000e8
 8080dfc:	200001e9 	.word	0x200001e9

08080e00 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8080e00:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080e02:	4d0f      	ldr	r5, [pc, #60]	; (8080e40 <_Z16_fetch_usbserialv+0x40>)
{
 8080e04:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8080e06:	a801      	add	r0, sp, #4
 8080e08:	f7ff ffe4 	bl	8080dd4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080e0c:	7829      	ldrb	r1, [r5, #0]
 8080e0e:	f3bf 8f5b 	dmb	ish
 8080e12:	f011 0401 	ands.w	r4, r1, #1
 8080e16:	d110      	bne.n	8080e3a <_Z16_fetch_usbserialv+0x3a>
 8080e18:	4628      	mov	r0, r5
 8080e1a:	f7ff f940 	bl	808009e <__cxa_guard_acquire>
 8080e1e:	b160      	cbz	r0, 8080e3a <_Z16_fetch_usbserialv+0x3a>
 8080e20:	4621      	mov	r1, r4
 8080e22:	aa01      	add	r2, sp, #4
 8080e24:	4807      	ldr	r0, [pc, #28]	; (8080e44 <_Z16_fetch_usbserialv+0x44>)
 8080e26:	f7ff ffbd 	bl	8080da4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8080e2a:	4628      	mov	r0, r5
 8080e2c:	f7ff f93c 	bl	80800a8 <__cxa_guard_release>
 8080e30:	4a05      	ldr	r2, [pc, #20]	; (8080e48 <_Z16_fetch_usbserialv+0x48>)
 8080e32:	4906      	ldr	r1, [pc, #24]	; (8080e4c <_Z16_fetch_usbserialv+0x4c>)
 8080e34:	4803      	ldr	r0, [pc, #12]	; (8080e44 <_Z16_fetch_usbserialv+0x44>)
 8080e36:	f000 f997 	bl	8081168 <__aeabi_atexit>
	return _usbserial;
}
 8080e3a:	4802      	ldr	r0, [pc, #8]	; (8080e44 <_Z16_fetch_usbserialv+0x44>)
 8080e3c:	b007      	add	sp, #28
 8080e3e:	bd30      	pop	{r4, r5, pc}
 8080e40:	200000b8 	.word	0x200000b8
 8080e44:	200000c0 	.word	0x200000c0
 8080e48:	20000070 	.word	0x20000070
 8080e4c:	08080d31 	.word	0x08080d31

08080e50 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8080e50:	b510      	push	{r4, lr}
 8080e52:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8080e54:	2214      	movs	r2, #20
 8080e56:	2100      	movs	r1, #0
 8080e58:	f000 f9ac 	bl	80811b4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8080e5c:	4b05      	ldr	r3, [pc, #20]	; (8080e74 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8080e5e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8080e60:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8080e62:	4b05      	ldr	r3, [pc, #20]	; (8080e78 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8080e64:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8080e66:	f240 1301 	movw	r3, #257	; 0x101
 8080e6a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8080e6c:	2381      	movs	r3, #129	; 0x81
 8080e6e:	8223      	strh	r3, [r4, #16]
}
 8080e70:	bd10      	pop	{r4, pc}
 8080e72:	bf00      	nop
 8080e74:	2000026a 	.word	0x2000026a
 8080e78:	2000036b 	.word	0x2000036b

08080e7c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8080e7c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8080e7e:	4c0f      	ldr	r4, [pc, #60]	; (8080ebc <_Z17_fetch_usbserial1v+0x40>)
{
 8080e80:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8080e82:	a801      	add	r0, sp, #4
 8080e84:	f7ff ffe4 	bl	8080e50 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8080e88:	7823      	ldrb	r3, [r4, #0]
 8080e8a:	f3bf 8f5b 	dmb	ish
 8080e8e:	07db      	lsls	r3, r3, #31
 8080e90:	d410      	bmi.n	8080eb4 <_Z17_fetch_usbserial1v+0x38>
 8080e92:	4620      	mov	r0, r4
 8080e94:	f7ff f903 	bl	808009e <__cxa_guard_acquire>
 8080e98:	b160      	cbz	r0, 8080eb4 <_Z17_fetch_usbserial1v+0x38>
 8080e9a:	2101      	movs	r1, #1
 8080e9c:	aa01      	add	r2, sp, #4
 8080e9e:	4808      	ldr	r0, [pc, #32]	; (8080ec0 <_Z17_fetch_usbserial1v+0x44>)
 8080ea0:	f7ff ff80 	bl	8080da4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8080ea4:	4620      	mov	r0, r4
 8080ea6:	f7ff f8ff 	bl	80800a8 <__cxa_guard_release>
 8080eaa:	4a06      	ldr	r2, [pc, #24]	; (8080ec4 <_Z17_fetch_usbserial1v+0x48>)
 8080eac:	4906      	ldr	r1, [pc, #24]	; (8080ec8 <_Z17_fetch_usbserial1v+0x4c>)
 8080eae:	4804      	ldr	r0, [pc, #16]	; (8080ec0 <_Z17_fetch_usbserial1v+0x44>)
 8080eb0:	f000 f95a 	bl	8081168 <__aeabi_atexit>
  return _usbserial1;
}
 8080eb4:	4802      	ldr	r0, [pc, #8]	; (8080ec0 <_Z17_fetch_usbserial1v+0x44>)
 8080eb6:	b006      	add	sp, #24
 8080eb8:	bd10      	pop	{r4, pc}
 8080eba:	bf00      	nop
 8080ebc:	200000bc 	.word	0x200000bc
 8080ec0:	200000d4 	.word	0x200000d4
 8080ec4:	20000070 	.word	0x20000070
 8080ec8:	08080d31 	.word	0x08080d31

08080ecc <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8080ece:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8080ed0:	b085      	sub	sp, #20
 8080ed2:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080ed4:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 8080ed6:	460f      	mov	r7, r1
 8080ed8:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8080eda:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080edc:	f000 f996 	bl	808120c <strlen>
 8080ee0:	687b      	ldr	r3, [r7, #4]
 8080ee2:	b281      	uxth	r1, r0
 8080ee4:	9600      	str	r6, [sp, #0]
 8080ee6:	4628      	mov	r0, r5
 8080ee8:	aa03      	add	r2, sp, #12
 8080eea:	f7ff fb85 	bl	80805f8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080eee:	b130      	cbz	r0, 8080efe <_ZN5spark13CellularClass7resolveEPKc+0x32>
 8080ef0:	4631      	mov	r1, r6
 8080ef2:	4620      	mov	r0, r4
 8080ef4:	f7ff fefc 	bl	8080cf0 <_ZN9IPAddressC1Em>
    }
 8080ef8:	4620      	mov	r0, r4
 8080efa:	b005      	add	sp, #20
 8080efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080efe:	4620      	mov	r0, r4
 8080f00:	a903      	add	r1, sp, #12
 8080f02:	f7ff feed 	bl	8080ce0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8080f06:	e7f7      	b.n	8080ef8 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08080f08 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8080f08:	2200      	movs	r2, #0
 8080f0a:	6840      	ldr	r0, [r0, #4]
 8080f0c:	4611      	mov	r1, r2
 8080f0e:	f7ff bc21 	b.w	8080754 <network_listening>

08080f12 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 8080f12:	2200      	movs	r2, #0
 8080f14:	6840      	ldr	r0, [r0, #4]
 8080f16:	4611      	mov	r1, r2
 8080f18:	f7ff bc2c 	b.w	8080774 <network_get_listen_timeout>

08080f1c <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8080f1c:	2200      	movs	r2, #0
 8080f1e:	6840      	ldr	r0, [r0, #4]
 8080f20:	f7ff bc20 	b.w	8080764 <network_set_listen_timeout>

08080f24 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 8080f24:	2200      	movs	r2, #0
 8080f26:	6840      	ldr	r0, [r0, #4]
 8080f28:	f081 0101 	eor.w	r1, r1, #1
 8080f2c:	f7ff bc0a 	b.w	8080744 <network_listen>

08080f30 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 8080f30:	2300      	movs	r3, #0
 8080f32:	6840      	ldr	r0, [r0, #4]
 8080f34:	461a      	mov	r2, r3
 8080f36:	4619      	mov	r1, r3
 8080f38:	f7ff bbf4 	b.w	8080724 <network_on>

08080f3c <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8080f3c:	2200      	movs	r2, #0
 8080f3e:	6840      	ldr	r0, [r0, #4]
 8080f40:	4611      	mov	r1, r2
 8080f42:	f7ff bbd7 	b.w	80806f4 <network_connecting>

08080f46 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 8080f46:	2300      	movs	r3, #0
 8080f48:	6840      	ldr	r0, [r0, #4]
 8080f4a:	461a      	mov	r2, r3
 8080f4c:	f7ff bbca 	b.w	80806e4 <network_connect>

08080f50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8080f50:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8080f52:	2428      	movs	r4, #40	; 0x28
 8080f54:	4b07      	ldr	r3, [pc, #28]	; (8080f74 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8080f56:	4622      	mov	r2, r4
 8080f58:	4618      	mov	r0, r3
 8080f5a:	2100      	movs	r1, #0
 8080f5c:	f000 f92a 	bl	80811b4 <memset>
        cid = -1;
 8080f60:	f04f 32ff 	mov.w	r2, #4294967295
 8080f64:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8080f66:	2204      	movs	r2, #4
 8080f68:	4b03      	ldr	r3, [pc, #12]	; (8080f78 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 8080f6a:	8004      	strh	r4, [r0, #0]
 8080f6c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8080f6e:	4a03      	ldr	r2, [pc, #12]	; (8080f7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8080f70:	601a      	str	r2, [r3, #0]
 8080f72:	bd10      	pop	{r4, pc}
 8080f74:	200003f4 	.word	0x200003f4
 8080f78:	200003ec 	.word	0x200003ec
 8080f7c:	080813ec 	.word	0x080813ec

08080f80 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8080f80:	4770      	bx	lr

08080f82 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8080f82:	7441      	strb	r1, [r0, #17]
}
 8080f84:	4770      	bx	lr

08080f86 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 8080f86:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8080f88:	7c00      	ldrb	r0, [r0, #16]
 8080f8a:	f7ff fb2d 	bl	80805e8 <hal_usart_available_data_for_write>
}
 8080f8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080f92:	bd08      	pop	{r3, pc}

08080f94 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8080f94:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8080f96:	7c00      	ldrb	r0, [r0, #16]
 8080f98:	f7ff fb06 	bl	80805a8 <hal_usart_available>
}
 8080f9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080fa0:	bd08      	pop	{r3, pc}

08080fa2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8080fa2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8080fa4:	7c00      	ldrb	r0, [r0, #16]
 8080fa6:	f7ff fb0f 	bl	80805c8 <hal_usart_peek>
}
 8080faa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080fae:	bd08      	pop	{r3, pc}

08080fb0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8080fb0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 8080fb2:	7c00      	ldrb	r0, [r0, #16]
 8080fb4:	f7ff fb00 	bl	80805b8 <hal_usart_read>
}
 8080fb8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080fbc:	bd08      	pop	{r3, pc}

08080fbe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 8080fbe:	7c00      	ldrb	r0, [r0, #16]
 8080fc0:	f7ff bb0a 	b.w	80805d8 <hal_usart_flush>

08080fc4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8080fc4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8080fc6:	7c46      	ldrb	r6, [r0, #17]
{
 8080fc8:	4604      	mov	r4, r0
 8080fca:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8080fcc:	b12e      	cbz	r6, 8080fda <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 8080fce:	4629      	mov	r1, r5
 8080fd0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8080fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8080fd6:	f7ff badf 	b.w	8080598 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8080fda:	7c00      	ldrb	r0, [r0, #16]
 8080fdc:	f7ff fb04 	bl	80805e8 <hal_usart_available_data_for_write>
 8080fe0:	2800      	cmp	r0, #0
 8080fe2:	dcf4      	bgt.n	8080fce <_ZN11USARTSerial5writeEh+0xa>
}
 8080fe4:	4630      	mov	r0, r6
 8080fe6:	bd70      	pop	{r4, r5, r6, pc}

08080fe8 <_ZN11USARTSerialD0Ev>:
 8080fe8:	b510      	push	{r4, lr}
 8080fea:	4604      	mov	r4, r0
 8080fec:	2114      	movs	r1, #20
 8080fee:	f000 f8c0 	bl	8081172 <_ZdlPvj>
 8080ff2:	4620      	mov	r0, r4
 8080ff4:	bd10      	pop	{r4, pc}
	...

08080ff8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8080ff8:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8080ffc:	b510      	push	{r4, lr}
 8080ffe:	4604      	mov	r4, r0
 8081000:	4608      	mov	r0, r1
 8081002:	4611      	mov	r1, r2
 8081004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8081008:	e9c4 c201 	strd	ip, r2, [r4, #4]
 808100c:	4a04      	ldr	r2, [pc, #16]	; (8081020 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 808100e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8081010:	6022      	str	r2, [r4, #0]
  _blocking = true;
 8081012:	2201      	movs	r2, #1
 8081014:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 8081016:	461a      	mov	r2, r3
 8081018:	f7ff fab6 	bl	8080588 <hal_usart_init>
}
 808101c:	4620      	mov	r0, r4
 808101e:	bd10      	pop	{r4, pc}
 8081020:	08081420 	.word	0x08081420

08081024 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8081024:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8081026:	4d0d      	ldr	r5, [pc, #52]	; (808105c <_Z22__fetch_global_Serial1v+0x38>)
 8081028:	7829      	ldrb	r1, [r5, #0]
 808102a:	f3bf 8f5b 	dmb	ish
 808102e:	f011 0401 	ands.w	r4, r1, #1
 8081032:	d111      	bne.n	8081058 <_Z22__fetch_global_Serial1v+0x34>
 8081034:	4628      	mov	r0, r5
 8081036:	f7ff f832 	bl	808009e <__cxa_guard_acquire>
 808103a:	b168      	cbz	r0, 8081058 <_Z22__fetch_global_Serial1v+0x34>
 808103c:	4621      	mov	r1, r4
 808103e:	4a08      	ldr	r2, [pc, #32]	; (8081060 <_Z22__fetch_global_Serial1v+0x3c>)
 8081040:	4b08      	ldr	r3, [pc, #32]	; (8081064 <_Z22__fetch_global_Serial1v+0x40>)
 8081042:	4809      	ldr	r0, [pc, #36]	; (8081068 <_Z22__fetch_global_Serial1v+0x44>)
 8081044:	f7ff ffd8 	bl	8080ff8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8081048:	4628      	mov	r0, r5
 808104a:	f7ff f82d 	bl	80800a8 <__cxa_guard_release>
 808104e:	4a07      	ldr	r2, [pc, #28]	; (808106c <_Z22__fetch_global_Serial1v+0x48>)
 8081050:	4907      	ldr	r1, [pc, #28]	; (8081070 <_Z22__fetch_global_Serial1v+0x4c>)
 8081052:	4805      	ldr	r0, [pc, #20]	; (8081068 <_Z22__fetch_global_Serial1v+0x44>)
 8081054:	f000 f888 	bl	8081168 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8081058:	4803      	ldr	r0, [pc, #12]	; (8081068 <_Z22__fetch_global_Serial1v+0x44>)
 808105a:	bd38      	pop	{r3, r4, r5, pc}
 808105c:	2000041c 	.word	0x2000041c
 8081060:	20000420 	.word	0x20000420
 8081064:	200004a4 	.word	0x200004a4
 8081068:	20000528 	.word	0x20000528
 808106c:	20000070 	.word	0x20000070
 8081070:	08080f81 	.word	0x08080f81

08081074 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8081074:	2300      	movs	r3, #0
 8081076:	6840      	ldr	r0, [r0, #4]
 8081078:	461a      	mov	r2, r3
 808107a:	f7ff bb33 	b.w	80806e4 <network_connect>

0808107e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808107e:	2200      	movs	r2, #0
 8081080:	2102      	movs	r1, #2
 8081082:	6840      	ldr	r0, [r0, #4]
 8081084:	f7ff bb3e 	b.w	8080704 <network_disconnect>

08081088 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8081088:	2200      	movs	r2, #0
 808108a:	6840      	ldr	r0, [r0, #4]
 808108c:	4611      	mov	r1, r2
 808108e:	f7ff bb31 	b.w	80806f4 <network_connecting>

08081092 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8081092:	2200      	movs	r2, #0
 8081094:	6840      	ldr	r0, [r0, #4]
 8081096:	4611      	mov	r1, r2
 8081098:	f7ff bb3c 	b.w	8080714 <network_ready>

0808109c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808109c:	2300      	movs	r3, #0
 808109e:	6840      	ldr	r0, [r0, #4]
 80810a0:	461a      	mov	r2, r3
 80810a2:	4619      	mov	r1, r3
 80810a4:	f7ff bb3e 	b.w	8080724 <network_on>

080810a8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80810a8:	2300      	movs	r3, #0
 80810aa:	6840      	ldr	r0, [r0, #4]
 80810ac:	461a      	mov	r2, r3
 80810ae:	4619      	mov	r1, r3
 80810b0:	f7ff bb40 	b.w	8080734 <network_off>

080810b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80810b4:	2200      	movs	r2, #0
 80810b6:	6840      	ldr	r0, [r0, #4]
 80810b8:	f081 0101 	eor.w	r1, r1, #1
 80810bc:	f7ff bb42 	b.w	8080744 <network_listen>

080810c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80810c0:	2200      	movs	r2, #0
 80810c2:	6840      	ldr	r0, [r0, #4]
 80810c4:	f7ff bb4e 	b.w	8080764 <network_set_listen_timeout>

080810c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80810c8:	2200      	movs	r2, #0
 80810ca:	6840      	ldr	r0, [r0, #4]
 80810cc:	4611      	mov	r1, r2
 80810ce:	f7ff bb51 	b.w	8080774 <network_get_listen_timeout>

080810d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80810d2:	2200      	movs	r2, #0
 80810d4:	6840      	ldr	r0, [r0, #4]
 80810d6:	4611      	mov	r1, r2
 80810d8:	f7ff bb3c 	b.w	8080754 <network_listening>

080810dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80810dc:	b570      	push	{r4, r5, r6, lr}
 80810de:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 80810e0:	2600      	movs	r6, #0
 80810e2:	b086      	sub	sp, #24
 80810e4:	4604      	mov	r4, r0
    IPAddress addr;
 80810e6:	a804      	add	r0, sp, #16
 80810e8:	f7ff fdf2 	bl	8080cd0 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80810ec:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 80810ee:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80810f0:	f000 f88c 	bl	808120c <strlen>
 80810f4:	4b0a      	ldr	r3, [pc, #40]	; (8081120 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 80810f6:	9600      	str	r6, [sp, #0]
 80810f8:	b281      	uxth	r1, r0
 80810fa:	685b      	ldr	r3, [r3, #4]
 80810fc:	4628      	mov	r0, r5
 80810fe:	aa03      	add	r2, sp, #12
 8081100:	f7ff fa7a 	bl	80805f8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081104:	b130      	cbz	r0, 8081114 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8081106:	4631      	mov	r1, r6
 8081108:	4620      	mov	r0, r4
 808110a:	f7ff fdf1 	bl	8080cf0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808110e:	4620      	mov	r0, r4
 8081110:	b006      	add	sp, #24
 8081112:	bd70      	pop	{r4, r5, r6, pc}
 8081114:	4620      	mov	r0, r4
 8081116:	a903      	add	r1, sp, #12
 8081118:	f7ff fde2 	bl	8080ce0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 808111c:	e7f7      	b.n	808110e <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 808111e:	bf00      	nop
 8081120:	200003ec 	.word	0x200003ec

08081124 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8081124:	4b02      	ldr	r3, [pc, #8]	; (8081130 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8081126:	4a03      	ldr	r2, [pc, #12]	; (8081134 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8081128:	601a      	str	r2, [r3, #0]
 808112a:	2200      	movs	r2, #0
 808112c:	605a      	str	r2, [r3, #4]

} // spark
 808112e:	4770      	bx	lr
 8081130:	2000053c 	.word	0x2000053c
 8081134:	08081450 	.word	0x08081450

08081138 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8081138:	2300      	movs	r3, #0
 808113a:	b513      	push	{r0, r1, r4, lr}
 808113c:	4c07      	ldr	r4, [pc, #28]	; (808115c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808113e:	461a      	mov	r2, r3
 8081140:	4619      	mov	r1, r3
 8081142:	4620      	mov	r0, r4
 8081144:	9300      	str	r3, [sp, #0]
 8081146:	f7ff fde5 	bl	8080d14 <_ZN9IPAddressC1Ehhhh>
 808114a:	4620      	mov	r0, r4
 808114c:	4a04      	ldr	r2, [pc, #16]	; (8081160 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808114e:	4905      	ldr	r1, [pc, #20]	; (8081164 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8081150:	b002      	add	sp, #8
 8081152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8081156:	f000 b807 	b.w	8081168 <__aeabi_atexit>
 808115a:	bf00      	nop
 808115c:	20000548 	.word	0x20000548
 8081160:	20000070 	.word	0x20000070
 8081164:	08080c8f 	.word	0x08080c8f

08081168 <__aeabi_atexit>:
 8081168:	460b      	mov	r3, r1
 808116a:	4601      	mov	r1, r0
 808116c:	4618      	mov	r0, r3
 808116e:	f000 b805 	b.w	808117c <__cxa_atexit>

08081172 <_ZdlPvj>:
 8081172:	f7fe bf92 	b.w	808009a <_ZdlPv>

08081176 <_ZnwjRKSt9nothrow_t>:
 8081176:	f7fe bf8e 	b.w	8080096 <_Znwj>
	...

0808117c <__cxa_atexit>:
 808117c:	b510      	push	{r4, lr}
 808117e:	4604      	mov	r4, r0
 8081180:	4804      	ldr	r0, [pc, #16]	; (8081194 <__cxa_atexit+0x18>)
 8081182:	4613      	mov	r3, r2
 8081184:	b120      	cbz	r0, 8081190 <__cxa_atexit+0x14>
 8081186:	460a      	mov	r2, r1
 8081188:	2002      	movs	r0, #2
 808118a:	4621      	mov	r1, r4
 808118c:	f3af 8000 	nop.w
 8081190:	bd10      	pop	{r4, pc}
 8081192:	bf00      	nop
 8081194:	00000000 	.word	0x00000000

08081198 <memcpy>:
 8081198:	440a      	add	r2, r1
 808119a:	4291      	cmp	r1, r2
 808119c:	f100 33ff 	add.w	r3, r0, #4294967295
 80811a0:	d100      	bne.n	80811a4 <memcpy+0xc>
 80811a2:	4770      	bx	lr
 80811a4:	b510      	push	{r4, lr}
 80811a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80811aa:	4291      	cmp	r1, r2
 80811ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80811b0:	d1f9      	bne.n	80811a6 <memcpy+0xe>
 80811b2:	bd10      	pop	{r4, pc}

080811b4 <memset>:
 80811b4:	4603      	mov	r3, r0
 80811b6:	4402      	add	r2, r0
 80811b8:	4293      	cmp	r3, r2
 80811ba:	d100      	bne.n	80811be <memset+0xa>
 80811bc:	4770      	bx	lr
 80811be:	f803 1b01 	strb.w	r1, [r3], #1
 80811c2:	e7f9      	b.n	80811b8 <memset+0x4>

080811c4 <srand>:
 80811c4:	b538      	push	{r3, r4, r5, lr}
 80811c6:	4b0d      	ldr	r3, [pc, #52]	; (80811fc <srand+0x38>)
 80811c8:	4604      	mov	r4, r0
 80811ca:	681d      	ldr	r5, [r3, #0]
 80811cc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80811ce:	b97b      	cbnz	r3, 80811f0 <srand+0x2c>
 80811d0:	2018      	movs	r0, #24
 80811d2:	f7ff faff 	bl	80807d4 <malloc>
 80811d6:	4a0a      	ldr	r2, [pc, #40]	; (8081200 <srand+0x3c>)
 80811d8:	4b0a      	ldr	r3, [pc, #40]	; (8081204 <srand+0x40>)
 80811da:	63a8      	str	r0, [r5, #56]	; 0x38
 80811dc:	e9c0 2300 	strd	r2, r3, [r0]
 80811e0:	4b09      	ldr	r3, [pc, #36]	; (8081208 <srand+0x44>)
 80811e2:	2201      	movs	r2, #1
 80811e4:	6083      	str	r3, [r0, #8]
 80811e6:	230b      	movs	r3, #11
 80811e8:	8183      	strh	r3, [r0, #12]
 80811ea:	2300      	movs	r3, #0
 80811ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80811f0:	2200      	movs	r2, #0
 80811f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80811f4:	611c      	str	r4, [r3, #16]
 80811f6:	615a      	str	r2, [r3, #20]
 80811f8:	bd38      	pop	{r3, r4, r5, pc}
 80811fa:	bf00      	nop
 80811fc:	2000000c 	.word	0x2000000c
 8081200:	abcd330e 	.word	0xabcd330e
 8081204:	e66d1234 	.word	0xe66d1234
 8081208:	0005deec 	.word	0x0005deec

0808120c <strlen>:
 808120c:	4603      	mov	r3, r0
 808120e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8081212:	2a00      	cmp	r2, #0
 8081214:	d1fb      	bne.n	808120e <strlen+0x2>
 8081216:	1a18      	subs	r0, r3, r0
 8081218:	3801      	subs	r0, #1
 808121a:	4770      	bx	lr

0808121c <dynalib_user>:
 808121c:	001d 0808 005d 0808 0085 0808 0089 0808     ....]...........
 808122c:	0000 0000 6543 6c6c 6c75 7261 3d20 2520     ....Cellular = %
 808123c:	2e64 4320 6f6c 6475 3d20 2520 2e64 7300     d. Cloud = %d..s
 808124c:	6174 7472 7720 6968 656c 6400 6469 6e20     tart while.did n
 808125c:	746f 6320 6e6f 656e 7463 6300 6968 6c6c     ot connect.chill
 808126c:	6620 726f 3220 7330 4e00 574f 7420 7275      for 20s.NOW tur
 808127c:	206e 7665 7265 7479 6968 676e 6f20 6666     n everything off
 808128c:	4300 6e6f 656e 7463 6f69 206e 6146 6c69     .Connection Fail
 808129c:	6465 7300 6174 7472 7720 6961 2074 6f66     ed.start wait fo
 80812ac:	0072 6974 656d 7420 206f 6f63 6e6e 6365     r.time to connec
 80812bc:	2074 6c25 0075 6f74 6174 206c 6974 656d     t %lu.total time
 80812cc:	203a 6c25 0075 6146 6c69 7275 7365 3d20     : %lu.Failures =
 80812dc:	2520 0069 655a 6f72 7320 656c 7065 7420      %i.Zero sleep t
 80812ec:	6d69 2c65 6120 6a64 7375 6974 676e 7420     ime, adjusting t
 80812fc:	206f 3031 7320 6365 6e6f 7364 7320 656c     o 10 seconds sle
 808130c:	7065 7420 6d69 2e65 4700 696f 676e 7420     ep time..Going t
 808131c:	206f 6c73 6565 2070 6f66 2072 6425 6d20     o sleep for %d m
 808132c:	6e69 7475 7365 2520 2064 6573 6f63 646e     inutes %d second
 808133c:	2e73 0a00 3d0a 3d3d 203d 4f4c 504f 3d20     s....==== LOOP =
 808134c:	3d3d 003d 6977 6972 676e 5300 7379 6574     ===.wiring.Syste
 808135c:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
 808136c:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
 808137c:	002e 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
 808138c:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
 808139c:	0065 0000                                   e...

080813a0 <_ZTV9IPAddress>:
	...
 80813a8:	0c9f 0808 0c8f 0808 0c91 0808               ............

080813b4 <_ZTV9USBSerial>:
	...
 80813bc:	0d31 0808 0d97 0808 0d6f 0808 0985 0808     1.......o.......
 80813cc:	0d61 0808 0d33 0808 0d43 0808 0d91 0808     a...3...C.......
 80813dc:	0d53 0808 0d2d 0808                         S...-...

080813e4 <_ZTVN5spark13CellularClassE>:
	...
 80813ec:	0f47 0808 00e7 0808 0f3d 0808 00f1 0808     G.......=.......
 80813fc:	0f31 0808 00db 0808 0f25 0808 0f1d 0808     1.......%.......
 808140c:	0f13 0808 0f09 0808 0ecd 0808               ............

08081418 <_ZTV11USARTSerial>:
	...
 8081420:	0f81 0808 0fe9 0808 0fc5 0808 0985 0808     ................
 8081430:	0f95 0808 0fb1 0808 0fa3 0808 0fbf 0808     ................
 8081440:	0f83 0808 0f87 0808                         ........

08081448 <_ZTVN5spark12NetworkClassE>:
	...
 8081450:	1075 0808 107f 0808 1089 0808 1093 0808     u...............
 8081460:	109d 0808 10a9 0808 10b5 0808 10c1 0808     ................
 8081470:	10c9 0808 10d3 0808 10dd 0808               ............

0808147c <_ZSt7nothrow>:
	...

0808147d <link_const_variable_data_end>:
 808147d:	00          	.byte	0x00
	...

08081480 <link_constructors_location>:
 8081480:	0808051d 	.word	0x0808051d
 8081484:	08080949 	.word	0x08080949
 8081488:	08080aa1 	.word	0x08080aa1
 808148c:	08080ab1 	.word	0x08080ab1
 8081490:	08080ae9 	.word	0x08080ae9
 8081494:	08080f51 	.word	0x08080f51
 8081498:	08081125 	.word	0x08081125
 808149c:	08081139 	.word	0x08081139
