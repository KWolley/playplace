
c:/Users/karaw/Documents/aquarealtime/resdev/software/playplace/target/2.0.1/electron/playplace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002ca4  0808001c  0808001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08082cc0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  08082cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000534  20000074  20000074  00030074  2**2
                  ALLOC
  6 .module_info_suffix 00000028  08082d38  08082d38  00022d38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08082d60  08082d60  00022d60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ca967  00000000  00000000  00022d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f71f  00000000  00000000  000ed6cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018f7f  00000000  00000000  000fcdea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001bb0  00000000  00000000  00115d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004c88  00000000  00000000  00117919  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00020e00  00000000  00000000  0011c5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000228cb  00000000  00000000  0013d3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b1a60  00000000  00000000  0015fc6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000048c4  00000000  00000000  002116cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <link_dynalib_end+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <link_dynalib_end+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f002 fb2d 	bl	808268c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <link_dynalib_end+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <link_dynalib_end+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f002 fb4f 	bl	80826dc <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <link_dynalib_end+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000000 	.word	0x20000000
 8080048:	08082cc4 	.word	0x08082cc4
 808004c:	20000074 	.word	0x20000074
 8080050:	20000074 	.word	0x20000074
 8080054:	200005a8 	.word	0x200005a8
 8080058:	200005a8 	.word	0x200005a8

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f001 fe45 	bl	8081cec <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080062:	2500      	movs	r5, #0
 8080064:	4e05      	ldr	r6, [pc, #20]	; (808007c <module_user_init+0x20>)
 8080066:	4c06      	ldr	r4, [pc, #24]	; (8080080 <module_user_init+0x24>)
 8080068:	1ba4      	subs	r4, r4, r6
 808006a:	08a4      	lsrs	r4, r4, #2
 808006c:	42a5      	cmp	r5, r4
 808006e:	d100      	bne.n	8080072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080072:	f856 3b04 	ldr.w	r3, [r6], #4
 8080076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f7      	b.n	808006c <module_user_init+0x10>
 808007c:	08082ca0 	.word	0x08082ca0
 8080080:	08082cc0 	.word	0x08082cc0

08080084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080084:	f000 b867 	b.w	8080156 <setup>

08080088 <module_user_loop>:
}

void module_user_loop() {
 8080088:	b508      	push	{r3, lr}
    loop();
 808008a:	f000 f871 	bl	8080170 <loop>
    _post_loop();
}
 808008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 8080092:	f001 bded 	b.w	8081c70 <_post_loop>

08080096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 8080096:	f000 bb9d 	b.w	80807d4 <malloc>

0808009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 808009a:	f000 bba3 	b.w	80807e4 <free>
	...

080800a0 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800a0:	2100      	movs	r1, #0
 80800a2:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80800a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800a6:	4a02      	ldr	r2, [pc, #8]	; (80800b0 <__cxa_pure_virtual+0x10>)
 80800a8:	f000 fabe 	bl	8080628 <panic_>
  while (1);
 80800ac:	e7fe      	b.n	80800ac <__cxa_pure_virtual+0xc>
 80800ae:	bf00      	nop
 80800b0:	08080499 	.word	0x08080499

080800b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800b4:	7800      	ldrb	r0, [r0, #0]
 80800b6:	fab0 f080 	clz	r0, r0
 80800ba:	0940      	lsrs	r0, r0, #5
 80800bc:	4770      	bx	lr

080800be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800be:	2301      	movs	r3, #1
 80800c0:	7003      	strb	r3, [r0, #0]
 80800c2:	4770      	bx	lr

080800c4 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80800c4:	4770      	bx	lr

080800c6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80800c6:	6a00      	ldr	r0, [r0, #32]
 80800c8:	6803      	ldr	r3, [r0, #0]
 80800ca:	68db      	ldr	r3, [r3, #12]
 80800cc:	4718      	bx	r3
	...

080800d0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80800d0:	b510      	push	{r4, lr}
 80800d2:	4604      	mov	r4, r0
 80800d4:	4b09      	ldr	r3, [pc, #36]	; (80800fc <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80800d6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80800d8:	f000 febc 	bl	8080e54 <_ZN5spark10LogManager8instanceEv>
 80800dc:	4621      	mov	r1, r4
 80800de:	f001 f8eb 	bl	80812b8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80800e2:	f001 ff05 	bl	8081ef0 <_Z16_fetch_usbserialv>
 80800e6:	f001 fee9 	bl	8081ebc <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 80800ea:	4620      	mov	r0, r4
 80800ec:	4b04      	ldr	r3, [pc, #16]	; (8080100 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80800ee:	f840 3b04 	str.w	r3, [r0], #4
 80800f2:	f000 ffcf 	bl	8081094 <_ZN5spark6detail9LogFilterD1Ev>
    }
 80800f6:	4620      	mov	r0, r4
 80800f8:	bd10      	pop	{r4, pc}
 80800fa:	bf00      	nop
 80800fc:	0808296c 	.word	0x0808296c
 8080100:	08082954 	.word	0x08082954

08080104 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 8080104:	b510      	push	{r4, lr}
 8080106:	4604      	mov	r4, r0
    }
 8080108:	f7ff ffe2 	bl	80800d0 <_ZN5spark16SerialLogHandlerD1Ev>
 808010c:	4620      	mov	r0, r4
 808010e:	2124      	movs	r1, #36	; 0x24
 8080110:	f002 faa9 	bl	8082666 <_ZdlPvj>
 8080114:	4620      	mov	r0, r4
 8080116:	bd10      	pop	{r4, pc}

08080118 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080118:	b510      	push	{r4, lr}
 808011a:	4604      	mov	r4, r0
        if (wakeupSource_) {
 808011c:	6800      	ldr	r0, [r0, #0]
 808011e:	b108      	cbz	r0, 8080124 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8080120:	f000 fb60 	bl	80807e4 <free>
class SystemClass {
 8080124:	4620      	mov	r0, r4
 8080126:	bd10      	pop	{r4, pc}

08080128 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080128:	b40e      	push	{r1, r2, r3}
 808012a:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 808012c:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 808012e:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 8080130:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 8080132:	b08d      	sub	sp, #52	; 0x34
 8080134:	aa0f      	add	r2, sp, #60	; 0x3c
 8080136:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 808013a:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 808013e:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 8080142:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080144:	201e      	movs	r0, #30
 8080146:	aa04      	add	r2, sp, #16
 8080148:	f000 fa7e 	bl	8080648 <log_message_v>
}
 808014c:	b00d      	add	sp, #52	; 0x34
 808014e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8080152:	b003      	add	sp, #12
 8080154:	4770      	bx	lr

08080156 <setup>:
unsigned long connectMillis = CELL_CONNECT_SECONDS * 1000;
int failures = 0;

// setup() runs once, when the device is first turned on.
void setup()
{
 8080156:	b508      	push	{r3, lr}
  Serial.begin(9600);
 8080158:	f001 feca 	bl	8081ef0 <_Z16_fetch_usbserialv>
 808015c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080160:	f001 fea8 	bl	8081eb4 <_ZN9USBSerial5beginEl>
  delay(2000);
}
 8080164:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(2000);
 8080168:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808016c:	f001 bd1e 	b.w	8081bac <delay>

08080170 <loop>:
// loop() runs over and over again, as quickly as it can execute.
void loop()
{
 8080170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  delay(2000);
 8080174:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
 8080178:	b08b      	sub	sp, #44	; 0x2c
  delay(2000);
 808017a:	f001 fd17 	bl	8081bac <delay>
  Log.info("\n\n==== LOOP ====");
 808017e:	494a      	ldr	r1, [pc, #296]	; (80802a8 <loop+0x138>)
 8080180:	484a      	ldr	r0, [pc, #296]	; (80802ac <loop+0x13c>)
 8080182:	f7ff ffd1 	bl	8080128 <_ZNK5spark6Logger4infoEPKcz>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080186:	2200      	movs	r2, #0
 8080188:	4d49      	ldr	r5, [pc, #292]	; (80802b0 <loop+0x140>)
 808018a:	4611      	mov	r1, r2
 808018c:	6868      	ldr	r0, [r5, #4]
 808018e:	f000 fac1 	bl	8080714 <network_ready>
 8080192:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080194:	f000 fb06 	bl	80807a4 <spark_cloud_flag_connected>
  Log.info("Cellular = %d.Cloud = %d.", (int)Cellular.ready(), (int)Particle.connected());
 8080198:	4622      	mov	r2, r4
 808019a:	4603      	mov	r3, r0
 808019c:	4945      	ldr	r1, [pc, #276]	; (80802b4 <loop+0x144>)
 808019e:	4843      	ldr	r0, [pc, #268]	; (80802ac <loop+0x13c>)
 80801a0:	f7ff ffc2 	bl	8080128 <_ZNK5spark6Logger4infoEPKcz>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80801a4:	f000 f980 	bl	80804a8 <HAL_Timer_Get_Milli_Seconds>
 80801a8:	4604      	mov	r4, r0
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80801aa:	f000 faf3 	bl	8080794 <spark_cloud_flag_connect>
  unsigned long startTime = millis();
  Particle.connect();
  if (waitFor(Particle.connected, connectMillis))
 80801ae:	4b42      	ldr	r3, [pc, #264]	; (80802b8 <loop+0x148>)
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80801b0:	2000      	movs	r0, #0
 80801b2:	681e      	ldr	r6, [r3, #0]
 80801b4:	f000 f980 	bl	80804b8 <hal_timer_millis>
 80801b8:	f04f 0b00 	mov.w	fp, #0
 80801bc:	4682      	mov	sl, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80801be:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
 80801c0:	2000      	movs	r0, #0
 80801c2:	f000 f979 	bl	80804b8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80801c6:	ebb0 080a 	subs.w	r8, r0, sl
 80801ca:	eb61 090b 	sbc.w	r9, r1, fp
        while (_while() && !_condition()) {
 80801ce:	45b9      	cmp	r9, r7
 80801d0:	bf08      	it	eq
 80801d2:	45b0      	cmpeq	r8, r6
 80801d4:	d205      	bcs.n	80801e2 <loop+0x72>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80801d6:	f000 fae5 	bl	80807a4 <spark_cloud_flag_connected>
 80801da:	b910      	cbnz	r0, 80801e2 <loop+0x72>
            spark_process();
 80801dc:	f000 fad2 	bl	8080784 <spark_process>
        while (_while() && !_condition()) {
 80801e0:	e7ee      	b.n	80801c0 <loop+0x50>
 80801e2:	f000 fadf 	bl	80807a4 <spark_cloud_flag_connected>
 80801e6:	4e35      	ldr	r6, [pc, #212]	; (80802bc <loop+0x14c>)
 80801e8:	2800      	cmp	r0, #0
 80801ea:	d053      	beq.n	8080294 <loop+0x124>
 80801ec:	f000 fada 	bl	80807a4 <spark_cloud_flag_connected>
  {
    if (Particle.connected())
 80801f0:	b118      	cbz	r0, 80801fa <loop+0x8a>
    {
      delay(20000);
 80801f2:	f644 6020 	movw	r0, #20000	; 0x4e20
 80801f6:	f001 fcd9 	bl	8081bac <delay>
 80801fa:	f000 f955 	bl	80804a8 <HAL_Timer_Get_Milli_Seconds>
  }
  else
  {
    failures++;
  }
  Log.info("total time: %lu, failures: %d", millis() - startTime, failures);
 80801fe:	1b02      	subs	r2, r0, r4
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
 8080200:	2400      	movs	r4, #0
 8080202:	6833      	ldr	r3, [r6, #0]
 8080204:	492e      	ldr	r1, [pc, #184]	; (80802c0 <loop+0x150>)
 8080206:	4829      	ldr	r0, [pc, #164]	; (80802ac <loop+0x13c>)
 8080208:	f7ff ff8e 	bl	8080128 <_ZNK5spark6Logger4infoEPKcz>
  Particle.disconnect();
 808020c:	a804      	add	r0, sp, #16
 808020e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8080212:	f88d 4018 	strb.w	r4, [sp, #24]
 8080216:	f001 fd9b 	bl	8081d50 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808021a:	6868      	ldr	r0, [r5, #4]
 808021c:	4622      	mov	r2, r4
 808021e:	2102      	movs	r1, #2
 8080220:	f000 fa70 	bl	8080704 <network_disconnect>
        network_off(*this, 0, 0, NULL);
 8080224:	6868      	ldr	r0, [r5, #4]
 8080226:	4623      	mov	r3, r4
 8080228:	4622      	mov	r2, r4
 808022a:	4621      	mov	r1, r4
 808022c:	f000 fa82 	bl	8080734 <network_off>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
 8080230:	ab05      	add	r3, sp, #20
 8080232:	9304      	str	r3, [sp, #16]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 8080234:	2301      	movs	r3, #1
 8080236:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 808023a:	2303      	movs	r3, #3
        config_.size = sizeof(hal_sleep_config_t);
 808023c:	4e21      	ldr	r6, [pc, #132]	; (80802c4 <loop+0x154>)
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
 808023e:	2010      	movs	r0, #16
 8080240:	4921      	ldr	r1, [pc, #132]	; (80802c8 <loop+0x158>)
        config_.wakeup_sources = nullptr;
 8080242:	e9cd 4407 	strd	r4, r4, [sp, #28]
              valid_(true) {
 8080246:	f8ad 4019 	strh.w	r4, [sp, #25]
 808024a:	f88d 401b 	strb.w	r4, [sp, #27]
        config_.size = sizeof(hal_sleep_config_t);
 808024e:	9605      	str	r6, [sp, #20]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 8080250:	f88d 3018 	strb.w	r3, [sp, #24]
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
 8080254:	f002 fa09 	bl	808266a <_ZnwjRKSt9nothrow_t>
 8080258:	4605      	mov	r5, r0
 808025a:	b1f8      	cbz	r0, 808029c <loop+0x12c>
 808025c:	2210      	movs	r2, #16
 808025e:	4621      	mov	r1, r4
 8080260:	f002 fa3c 	bl	80826dc <memset>
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
 8080264:	2304      	movs	r3, #4
 8080266:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 8080268:	9b08      	ldr	r3, [sp, #32]
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
 808026a:	602e      	str	r6, [r5, #0]
            wakeupSource->base.next = config_.wakeup_sources;
 808026c:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
 808026e:	4b17      	ldr	r3, [pc, #92]	; (80802cc <loop+0x15c>)
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 8080270:	9508      	str	r5, [sp, #32]
            wakeupSource->ms = ms;
 8080272:	60eb      	str	r3, [r5, #12]


  SystemSleepConfiguration config;
  config.mode(SystemSleepMode::HIBERNATE)
      .duration(900000); // 15min
  System.sleep(config);
 8080274:	a801      	add	r0, sp, #4
 8080276:	a904      	add	r1, sp, #16
 8080278:	f000 fb0a 	bl	8080890 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
 808027c:	9801      	ldr	r0, [sp, #4]
 808027e:	b108      	cbz	r0, 8080284 <loop+0x114>
            free(wakeupSource_);
 8080280:	f000 fab0 	bl	80807e4 <free>
        auto wakeupSource = config_.wakeup_sources;
 8080284:	9808      	ldr	r0, [sp, #32]
        while (wakeupSource) {
 8080286:	b160      	cbz	r0, 80802a2 <loop+0x132>
            auto next = wakeupSource->next;
 8080288:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
 808028a:	210c      	movs	r1, #12
 808028c:	f002 f9eb 	bl	8082666 <_ZdlPvj>
            wakeupSource = next;
 8080290:	4620      	mov	r0, r4
        while (wakeupSource) {
 8080292:	e7f8      	b.n	8080286 <loop+0x116>
    failures++;
 8080294:	6833      	ldr	r3, [r6, #0]
 8080296:	3301      	adds	r3, #1
 8080298:	6033      	str	r3, [r6, #0]
 808029a:	e7ae      	b.n	80801fa <loop+0x8a>
                valid_ = false;
 808029c:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
                return *this;
 80802a0:	e7e8      	b.n	8080274 <loop+0x104>
}
 80802a2:	b00b      	add	sp, #44	; 0x2c
 80802a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80802a8:	08082900 	.word	0x08082900
 80802ac:	200000c8 	.word	0x200000c8
 80802b0:	20000444 	.word	0x20000444
 80802b4:	08082911 	.word	0x08082911
 80802b8:	20000000 	.word	0x20000000
 80802bc:	20000084 	.word	0x20000084
 80802c0:	0808292b 	.word	0x0808292b
 80802c4:	00030010 	.word	0x00030010
 80802c8:	08082b9d 	.word	0x08082b9d
 80802cc:	000dbba0 	.word	0x000dbba0

080802d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80802d0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80802d2:	2614      	movs	r6, #20
 80802d4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80802d8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80802da:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80802de:	42ae      	cmp	r6, r5
 80802e0:	d004      	beq.n	80802ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 80802e2:	4628      	mov	r0, r5
 80802e4:	f000 fb56 	bl	8080994 <_ZN6StringD1Ev>
 80802e8:	3514      	adds	r5, #20
 80802ea:	e7f8      	b.n	80802de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80802ec:	6820      	ldr	r0, [r4, #0]
 80802ee:	f000 fa79 	bl	80807e4 <free>
    AllocatorT::free(data_);
}
 80802f2:	4620      	mov	r0, r4
 80802f4:	bd70      	pop	{r4, r5, r6, pc}

080802f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80802f6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80802f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80802fa:	4604      	mov	r4, r0
 80802fc:	460d      	mov	r5, r1
 80802fe:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 8080300:	d916      	bls.n	8080330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 8080302:	4290      	cmp	r0, r2
 8080304:	d215      	bcs.n	8080332 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 8080306:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 808030a:	1a75      	subs	r5, r6, r1
 808030c:	f1a1 0714 	sub.w	r7, r1, #20
 8080310:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 8080312:	42b7      	cmp	r7, r6
 8080314:	d01c      	beq.n	8080350 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 8080316:	b12c      	cbz	r4, 8080324 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 8080318:	4631      	mov	r1, r6
 808031a:	4620      	mov	r0, r4
 808031c:	f000 fba1 	bl	8080a62 <_ZN6StringC1EOS_>
 8080320:	7c33      	ldrb	r3, [r6, #16]
 8080322:	7423      	strb	r3, [r4, #16]
 8080324:	4630      	mov	r0, r6
 8080326:	f000 fb35 	bl	8080994 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 808032a:	3e14      	subs	r6, #20
 808032c:	3c14      	subs	r4, #20
 808032e:	e7f0      	b.n	8080312 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 8080330:	d00e      	beq.n	8080350 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 8080332:	42b5      	cmp	r5, r6
 8080334:	d00c      	beq.n	8080350 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 8080336:	b12c      	cbz	r4, 8080344 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 8080338:	4629      	mov	r1, r5
 808033a:	4620      	mov	r0, r4
 808033c:	f000 fb91 	bl	8080a62 <_ZN6StringC1EOS_>
 8080340:	7c2b      	ldrb	r3, [r5, #16]
 8080342:	7423      	strb	r3, [r4, #16]
 8080344:	4628      	mov	r0, r5
 8080346:	f000 fb25 	bl	8080994 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 808034a:	3514      	adds	r5, #20
 808034c:	3414      	adds	r4, #20
 808034e:	e7f0      	b.n	8080332 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 8080350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080352 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 8080352:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 8080354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 8080358:	e9c0 3300 	strd	r3, r3, [r0]
 808035c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 808035e:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 8080360:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 8080362:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 8080364:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 8080366:	dd24      	ble.n	80803b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 8080368:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 808036c:	fb08 f007 	mul.w	r0, r8, r7
 8080370:	f000 fa30 	bl	80807d4 <malloc>
            if (!d) {
 8080374:	4605      	mov	r5, r0
 8080376:	b1e0      	cbz	r0, 80803b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 8080378:	e9d4 1200 	ldrd	r1, r2, [r4]
 808037c:	fb08 1202 	mla	r2, r8, r2, r1
 8080380:	f7ff ffb9 	bl	80802f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 8080384:	6820      	ldr	r0, [r4, #0]
 8080386:	f000 fa2d 	bl	80807e4 <free>
        data_ = d;
 808038a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 808038c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 808038e:	e9d6 7300 	ldrd	r7, r3, [r6]
 8080392:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 8080396:	45b8      	cmp	r8, r7
 8080398:	d009      	beq.n	80803ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 808039a:	4639      	mov	r1, r7
 808039c:	4628      	mov	r0, r5
 808039e:	f000 fb7a 	bl	8080a96 <_ZN6StringC1ERKS_>
 80803a2:	7c3b      	ldrb	r3, [r7, #16]
 80803a4:	3514      	adds	r5, #20
 80803a6:	f805 3c04 	strb.w	r3, [r5, #-4]
 80803aa:	3714      	adds	r7, #20
 80803ac:	e7f3      	b.n	8080396 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 80803ae:	6873      	ldr	r3, [r6, #4]
 80803b0:	6063      	str	r3, [r4, #4]
}
 80803b2:	4620      	mov	r0, r4
 80803b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080803b8 <_GLOBAL__sub_I_SystemMode>:
 80803b8:	b5f0      	push	{r4, r5, r6, r7, lr}
              error_(SYSTEM_ERROR_NONE) {
 80803ba:	2400      	movs	r4, #0
    SleepResult() {}
 80803bc:	4b29      	ldr	r3, [pc, #164]	; (8080464 <_GLOBAL__sub_I_SystemMode+0xac>)
              error_(SYSTEM_ERROR_NONE) {
 80803be:	4d2a      	ldr	r5, [pc, #168]	; (8080468 <_GLOBAL__sub_I_SystemMode+0xb0>)
SYSTEM_MODE(SEMI_AUTOMATIC);
 80803c0:	4f2a      	ldr	r7, [pc, #168]	; (808046c <_GLOBAL__sub_I_SystemMode+0xb4>)
}
 80803c2:	b08d      	sub	sp, #52	; 0x34
    SleepResult() {}
 80803c4:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
 80803c6:	602c      	str	r4, [r5, #0]
 80803c8:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
 80803ca:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
 80803cc:	2002      	movs	r0, #2
 80803ce:	f000 f953 	bl	8080678 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
 80803d2:	463a      	mov	r2, r7
 80803d4:	4628      	mov	r0, r5
 80803d6:	4926      	ldr	r1, [pc, #152]	; (8080470 <_GLOBAL__sub_I_SystemMode+0xb8>)
 80803d8:	f002 f940 	bl	808265c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
 80803dc:	4621      	mov	r1, r4
 80803de:	2001      	movs	r0, #1
 80803e0:	f000 f95a 	bl	8080698 <system_thread_set_state>
        capacity_(0) {
 80803e4:	e9cd 4400 	strd	r4, r4, [sp]
 80803e8:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 80803ea:	f001 fd81 	bl	8081ef0 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 80803ee:	4c21      	ldr	r4, [pc, #132]	; (8080474 <_GLOBAL__sub_I_SystemMode+0xbc>)
 80803f0:	4605      	mov	r5, r0
 80803f2:	4626      	mov	r6, r4
 80803f4:	4669      	mov	r1, sp
 80803f6:	a803      	add	r0, sp, #12
 80803f8:	f7ff ffab 	bl	8080352 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 80803fc:	a903      	add	r1, sp, #12
 80803fe:	a806      	add	r0, sp, #24
 8080400:	f7ff ffa7 	bl	8080352 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 8080404:	4b1c      	ldr	r3, [pc, #112]	; (8080478 <_GLOBAL__sub_I_SystemMode+0xc0>)
 8080406:	a906      	add	r1, sp, #24
 8080408:	f846 3b04 	str.w	r3, [r6], #4
 808040c:	a809      	add	r0, sp, #36	; 0x24
 808040e:	f7ff ffa0 	bl	8080352 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8080412:	aa09      	add	r2, sp, #36	; 0x24
 8080414:	2101      	movs	r1, #1
 8080416:	4630      	mov	r0, r6
 8080418:	f001 f8a0 	bl	808155c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 808041c:	a809      	add	r0, sp, #36	; 0x24
 808041e:	f7ff ff57 	bl	80802d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 8080422:	a806      	add	r0, sp, #24
 8080424:	f7ff ff54 	bl	80802d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8080428:	4b14      	ldr	r3, [pc, #80]	; (808047c <_GLOBAL__sub_I_SystemMode+0xc4>)
 808042a:	6225      	str	r5, [r4, #32]
 808042c:	6023      	str	r3, [r4, #0]
 808042e:	a803      	add	r0, sp, #12
 8080430:	f7ff ff4e 	bl	80802d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8080434:	4b12      	ldr	r3, [pc, #72]	; (8080480 <_GLOBAL__sub_I_SystemMode+0xc8>)
 8080436:	6023      	str	r3, [r4, #0]
        Serial.begin();
 8080438:	f001 fd5a 	bl	8081ef0 <_Z16_fetch_usbserialv>
 808043c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080440:	f001 fd38 	bl	8081eb4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 8080444:	f000 fd06 	bl	8080e54 <_ZN5spark10LogManager8instanceEv>
 8080448:	4621      	mov	r1, r4
 808044a:	f001 f81a 	bl	8081482 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_TRACE);
 808044e:	4668      	mov	r0, sp
 8080450:	f7ff ff3e 	bl	80802d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8080454:	463a      	mov	r2, r7
 8080456:	4620      	mov	r0, r4
 8080458:	490a      	ldr	r1, [pc, #40]	; (8080484 <_GLOBAL__sub_I_SystemMode+0xcc>)
 808045a:	f002 f8ff 	bl	808265c <__aeabi_atexit>
}
 808045e:	b00d      	add	sp, #52	; 0x34
 8080460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080462:	bf00      	nop
 8080464:	ffff0000 	.word	0xffff0000
 8080468:	20000078 	.word	0x20000078
 808046c:	20000074 	.word	0x20000074
 8080470:	08080119 	.word	0x08080119
 8080474:	20000088 	.word	0x20000088
 8080478:	08082954 	.word	0x08082954
 808047c:	08082a44 	.word	0x08082a44
 8080480:	0808296c 	.word	0x0808296c
 8080484:	080800d1 	.word	0x080800d1

08080488 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080488:	b508      	push	{r3, lr}
 808048a:	4b02      	ldr	r3, [pc, #8]	; (8080494 <HAL_RNG_GetRandomNumber+0xc>)
 808048c:	681b      	ldr	r3, [r3, #0]
 808048e:	685b      	ldr	r3, [r3, #4]
 8080490:	9301      	str	r3, [sp, #4]
 8080492:	bd08      	pop	{r3, pc}
 8080494:	0804019c 	.word	0x0804019c

08080498 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8080498:	b508      	push	{r3, lr}
 808049a:	4b02      	ldr	r3, [pc, #8]	; (80804a4 <HAL_Delay_Microseconds+0xc>)
 808049c:	681b      	ldr	r3, [r3, #0]
 808049e:	68db      	ldr	r3, [r3, #12]
 80804a0:	9301      	str	r3, [sp, #4]
 80804a2:	bd08      	pop	{r3, pc}
 80804a4:	0804019c 	.word	0x0804019c

080804a8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80804a8:	b508      	push	{r3, lr}
 80804aa:	4b02      	ldr	r3, [pc, #8]	; (80804b4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80804ac:	681b      	ldr	r3, [r3, #0]
 80804ae:	695b      	ldr	r3, [r3, #20]
 80804b0:	9301      	str	r3, [sp, #4]
 80804b2:	bd08      	pop	{r3, pc}
 80804b4:	0804019c 	.word	0x0804019c

080804b8 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80804b8:	b508      	push	{r3, lr}
 80804ba:	4b02      	ldr	r3, [pc, #8]	; (80804c4 <hal_timer_millis+0xc>)
 80804bc:	681b      	ldr	r3, [r3, #0]
 80804be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80804c0:	9301      	str	r3, [sp, #4]
 80804c2:	bd08      	pop	{r3, pc}
 80804c4:	0804019c 	.word	0x0804019c

080804c8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80804c8:	b508      	push	{r3, lr}
 80804ca:	4b02      	ldr	r3, [pc, #8]	; (80804d4 <os_mutex_recursive_create+0xc>)
 80804cc:	681b      	ldr	r3, [r3, #0]
 80804ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80804d0:	9301      	str	r3, [sp, #4]
 80804d2:	bd08      	pop	{r3, pc}
 80804d4:	080401d0 	.word	0x080401d0

080804d8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80804d8:	b508      	push	{r3, lr}
 80804da:	4b02      	ldr	r3, [pc, #8]	; (80804e4 <os_mutex_recursive_destroy+0xc>)
 80804dc:	681b      	ldr	r3, [r3, #0]
 80804de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80804e0:	9301      	str	r3, [sp, #4]
 80804e2:	bd08      	pop	{r3, pc}
 80804e4:	080401d0 	.word	0x080401d0

080804e8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80804e8:	b508      	push	{r3, lr}
 80804ea:	4b02      	ldr	r3, [pc, #8]	; (80804f4 <os_mutex_recursive_lock+0xc>)
 80804ec:	681b      	ldr	r3, [r3, #0]
 80804ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80804f0:	9301      	str	r3, [sp, #4]
 80804f2:	bd08      	pop	{r3, pc}
 80804f4:	080401d0 	.word	0x080401d0

080804f8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80804f8:	b508      	push	{r3, lr}
 80804fa:	4b02      	ldr	r3, [pc, #8]	; (8080504 <os_mutex_recursive_unlock+0xc>)
 80804fc:	681b      	ldr	r3, [r3, #0]
 80804fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8080500:	9301      	str	r3, [sp, #4]
 8080502:	bd08      	pop	{r3, pc}
 8080504:	080401d0 	.word	0x080401d0

08080508 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8080508:	b508      	push	{r3, lr}
 808050a:	4b02      	ldr	r3, [pc, #8]	; (8080514 <hal_usart_init+0xc>)
 808050c:	681b      	ldr	r3, [r3, #0]
 808050e:	699b      	ldr	r3, [r3, #24]
 8080510:	9301      	str	r3, [sp, #4]
 8080512:	bd08      	pop	{r3, pc}
 8080514:	080401c4 	.word	0x080401c4

08080518 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 8080518:	b508      	push	{r3, lr}
 808051a:	4b02      	ldr	r3, [pc, #8]	; (8080524 <hal_usart_end+0xc>)
 808051c:	681b      	ldr	r3, [r3, #0]
 808051e:	6a1b      	ldr	r3, [r3, #32]
 8080520:	9301      	str	r3, [sp, #4]
 8080522:	bd08      	pop	{r3, pc}
 8080524:	080401c4 	.word	0x080401c4

08080528 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8080528:	b508      	push	{r3, lr}
 808052a:	4b02      	ldr	r3, [pc, #8]	; (8080534 <hal_usart_write+0xc>)
 808052c:	681b      	ldr	r3, [r3, #0]
 808052e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080530:	9301      	str	r3, [sp, #4]
 8080532:	bd08      	pop	{r3, pc}
 8080534:	080401c4 	.word	0x080401c4

08080538 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8080538:	b508      	push	{r3, lr}
 808053a:	4b02      	ldr	r3, [pc, #8]	; (8080544 <hal_usart_available+0xc>)
 808053c:	681b      	ldr	r3, [r3, #0]
 808053e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080540:	9301      	str	r3, [sp, #4]
 8080542:	bd08      	pop	{r3, pc}
 8080544:	080401c4 	.word	0x080401c4

08080548 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8080548:	b508      	push	{r3, lr}
 808054a:	4b02      	ldr	r3, [pc, #8]	; (8080554 <hal_usart_read+0xc>)
 808054c:	681b      	ldr	r3, [r3, #0]
 808054e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080550:	9301      	str	r3, [sp, #4]
 8080552:	bd08      	pop	{r3, pc}
 8080554:	080401c4 	.word	0x080401c4

08080558 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8080558:	b508      	push	{r3, lr}
 808055a:	4b02      	ldr	r3, [pc, #8]	; (8080564 <hal_usart_peek+0xc>)
 808055c:	681b      	ldr	r3, [r3, #0]
 808055e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080560:	9301      	str	r3, [sp, #4]
 8080562:	bd08      	pop	{r3, pc}
 8080564:	080401c4 	.word	0x080401c4

08080568 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8080568:	b508      	push	{r3, lr}
 808056a:	4b02      	ldr	r3, [pc, #8]	; (8080574 <hal_usart_flush+0xc>)
 808056c:	681b      	ldr	r3, [r3, #0]
 808056e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080570:	9301      	str	r3, [sp, #4]
 8080572:	bd08      	pop	{r3, pc}
 8080574:	080401c4 	.word	0x080401c4

08080578 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8080578:	b508      	push	{r3, lr}
 808057a:	4b02      	ldr	r3, [pc, #8]	; (8080584 <hal_usart_available_data_for_write+0xc>)
 808057c:	681b      	ldr	r3, [r3, #0]
 808057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080580:	9301      	str	r3, [sp, #4]
 8080582:	bd08      	pop	{r3, pc}
 8080584:	080401c4 	.word	0x080401c4

08080588 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 8080588:	b508      	push	{r3, lr}
 808058a:	4b02      	ldr	r3, [pc, #8]	; (8080594 <hal_usart_begin_config+0xc>)
 808058c:	681b      	ldr	r3, [r3, #0]
 808058e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080590:	9301      	str	r3, [sp, #4]
 8080592:	bd08      	pop	{r3, pc}
 8080594:	080401c4 	.word	0x080401c4

08080598 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8080598:	b508      	push	{r3, lr}
 808059a:	4b02      	ldr	r3, [pc, #8]	; (80805a4 <inet_gethostbyname+0xc>)
 808059c:	681b      	ldr	r3, [r3, #0]
 808059e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80805a0:	9301      	str	r3, [sp, #4]
 80805a2:	bd08      	pop	{r3, pc}
 80805a4:	08060020 	.word	0x08060020

080805a8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80805a8:	b508      	push	{r3, lr}
 80805aa:	4b02      	ldr	r3, [pc, #8]	; (80805b4 <HAL_USB_USART_Init+0xc>)
 80805ac:	681b      	ldr	r3, [r3, #0]
 80805ae:	681b      	ldr	r3, [r3, #0]
 80805b0:	9301      	str	r3, [sp, #4]
 80805b2:	bd08      	pop	{r3, pc}
 80805b4:	0806001c 	.word	0x0806001c

080805b8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80805b8:	b508      	push	{r3, lr}
 80805ba:	4b02      	ldr	r3, [pc, #8]	; (80805c4 <HAL_USB_USART_Begin+0xc>)
 80805bc:	681b      	ldr	r3, [r3, #0]
 80805be:	685b      	ldr	r3, [r3, #4]
 80805c0:	9301      	str	r3, [sp, #4]
 80805c2:	bd08      	pop	{r3, pc}
 80805c4:	0806001c 	.word	0x0806001c

080805c8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80805c8:	b508      	push	{r3, lr}
 80805ca:	4b02      	ldr	r3, [pc, #8]	; (80805d4 <HAL_USB_USART_End+0xc>)
 80805cc:	681b      	ldr	r3, [r3, #0]
 80805ce:	689b      	ldr	r3, [r3, #8]
 80805d0:	9301      	str	r3, [sp, #4]
 80805d2:	bd08      	pop	{r3, pc}
 80805d4:	0806001c 	.word	0x0806001c

080805d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80805d8:	b508      	push	{r3, lr}
 80805da:	4b02      	ldr	r3, [pc, #8]	; (80805e4 <HAL_USB_USART_Available_Data+0xc>)
 80805dc:	681b      	ldr	r3, [r3, #0]
 80805de:	691b      	ldr	r3, [r3, #16]
 80805e0:	9301      	str	r3, [sp, #4]
 80805e2:	bd08      	pop	{r3, pc}
 80805e4:	0806001c 	.word	0x0806001c

080805e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80805e8:	b508      	push	{r3, lr}
 80805ea:	4b02      	ldr	r3, [pc, #8]	; (80805f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80805ec:	681b      	ldr	r3, [r3, #0]
 80805ee:	695b      	ldr	r3, [r3, #20]
 80805f0:	9301      	str	r3, [sp, #4]
 80805f2:	bd08      	pop	{r3, pc}
 80805f4:	0806001c 	.word	0x0806001c

080805f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80805f8:	b508      	push	{r3, lr}
 80805fa:	4b02      	ldr	r3, [pc, #8]	; (8080604 <HAL_USB_USART_Receive_Data+0xc>)
 80805fc:	681b      	ldr	r3, [r3, #0]
 80805fe:	699b      	ldr	r3, [r3, #24]
 8080600:	9301      	str	r3, [sp, #4]
 8080602:	bd08      	pop	{r3, pc}
 8080604:	0806001c 	.word	0x0806001c

08080608 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080608:	b508      	push	{r3, lr}
 808060a:	4b02      	ldr	r3, [pc, #8]	; (8080614 <HAL_USB_USART_Send_Data+0xc>)
 808060c:	681b      	ldr	r3, [r3, #0]
 808060e:	69db      	ldr	r3, [r3, #28]
 8080610:	9301      	str	r3, [sp, #4]
 8080612:	bd08      	pop	{r3, pc}
 8080614:	0806001c 	.word	0x0806001c

08080618 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080618:	b508      	push	{r3, lr}
 808061a:	4b02      	ldr	r3, [pc, #8]	; (8080624 <HAL_USB_USART_Flush_Data+0xc>)
 808061c:	681b      	ldr	r3, [r3, #0]
 808061e:	6a1b      	ldr	r3, [r3, #32]
 8080620:	9301      	str	r3, [sp, #4]
 8080622:	bd08      	pop	{r3, pc}
 8080624:	0806001c 	.word	0x0806001c

08080628 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8080628:	b508      	push	{r3, lr}
 808062a:	4b02      	ldr	r3, [pc, #8]	; (8080634 <panic_+0xc>)
 808062c:	681b      	ldr	r3, [r3, #0]
 808062e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080630:	9301      	str	r3, [sp, #4]
 8080632:	bd08      	pop	{r3, pc}
 8080634:	080201a0 	.word	0x080201a0

08080638 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 8080638:	b508      	push	{r3, lr}
 808063a:	4b02      	ldr	r3, [pc, #8]	; (8080644 <log_message+0xc>)
 808063c:	681b      	ldr	r3, [r3, #0]
 808063e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8080640:	9301      	str	r3, [sp, #4]
 8080642:	bd08      	pop	{r3, pc}
 8080644:	080201a0 	.word	0x080201a0

08080648 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8080648:	b508      	push	{r3, lr}
 808064a:	4b02      	ldr	r3, [pc, #8]	; (8080654 <log_message_v+0xc>)
 808064c:	681b      	ldr	r3, [r3, #0]
 808064e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8080650:	9301      	str	r3, [sp, #4]
 8080652:	bd08      	pop	{r3, pc}
 8080654:	080201a0 	.word	0x080201a0

08080658 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 8080658:	b508      	push	{r3, lr}
 808065a:	4b02      	ldr	r3, [pc, #8]	; (8080664 <log_level_name+0xc>)
 808065c:	681b      	ldr	r3, [r3, #0]
 808065e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8080660:	9301      	str	r3, [sp, #4]
 8080662:	bd08      	pop	{r3, pc}
 8080664:	080201a0 	.word	0x080201a0

08080668 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 8080668:	b508      	push	{r3, lr}
 808066a:	4b02      	ldr	r3, [pc, #8]	; (8080674 <log_set_callbacks+0xc>)
 808066c:	681b      	ldr	r3, [r3, #0]
 808066e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8080670:	9301      	str	r3, [sp, #4]
 8080672:	bd08      	pop	{r3, pc}
 8080674:	080201a0 	.word	0x080201a0

08080678 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080678:	b508      	push	{r3, lr}
 808067a:	4b02      	ldr	r3, [pc, #8]	; (8080684 <set_system_mode+0xc>)
 808067c:	681b      	ldr	r3, [r3, #0]
 808067e:	685b      	ldr	r3, [r3, #4]
 8080680:	9301      	str	r3, [sp, #4]
 8080682:	bd08      	pop	{r3, pc}
 8080684:	080401a4 	.word	0x080401a4

08080688 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8080688:	b508      	push	{r3, lr}
 808068a:	4b02      	ldr	r3, [pc, #8]	; (8080694 <system_delay_ms+0xc>)
 808068c:	681b      	ldr	r3, [r3, #0]
 808068e:	695b      	ldr	r3, [r3, #20]
 8080690:	9301      	str	r3, [sp, #4]
 8080692:	bd08      	pop	{r3, pc}
 8080694:	080401a4 	.word	0x080401a4

08080698 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8080698:	b508      	push	{r3, lr}
 808069a:	4b02      	ldr	r3, [pc, #8]	; (80806a4 <system_thread_set_state+0xc>)
 808069c:	681b      	ldr	r3, [r3, #0]
 808069e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80806a0:	9301      	str	r3, [sp, #4]
 80806a2:	bd08      	pop	{r3, pc}
 80806a4:	080401a4 	.word	0x080401a4

080806a8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80806a8:	b508      	push	{r3, lr}
 80806aa:	4b03      	ldr	r3, [pc, #12]	; (80806b8 <system_ctrl_set_app_request_handler+0x10>)
 80806ac:	681b      	ldr	r3, [r3, #0]
 80806ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80806b2:	9301      	str	r3, [sp, #4]
 80806b4:	bd08      	pop	{r3, pc}
 80806b6:	0000      	.short	0x0000
 80806b8:	080401a4 	.word	0x080401a4

080806bc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80806bc:	b508      	push	{r3, lr}
 80806be:	4b03      	ldr	r3, [pc, #12]	; (80806cc <system_ctrl_set_result+0x10>)
 80806c0:	681b      	ldr	r3, [r3, #0]
 80806c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80806c6:	9301      	str	r3, [sp, #4]
 80806c8:	bd08      	pop	{r3, pc}
 80806ca:	0000      	.short	0x0000
 80806cc:	080401a4 	.word	0x080401a4

080806d0 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
 80806d0:	b508      	push	{r3, lr}
 80806d2:	4b03      	ldr	r3, [pc, #12]	; (80806e0 <system_sleep_ext+0x10>)
 80806d4:	681b      	ldr	r3, [r3, #0]
 80806d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80806da:	9301      	str	r3, [sp, #4]
 80806dc:	bd08      	pop	{r3, pc}
 80806de:	0000      	.short	0x0000
 80806e0:	080401a4 	.word	0x080401a4

080806e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80806e4:	b508      	push	{r3, lr}
 80806e6:	4b02      	ldr	r3, [pc, #8]	; (80806f0 <network_connect+0xc>)
 80806e8:	681b      	ldr	r3, [r3, #0]
 80806ea:	685b      	ldr	r3, [r3, #4]
 80806ec:	9301      	str	r3, [sp, #4]
 80806ee:	bd08      	pop	{r3, pc}
 80806f0:	080401c8 	.word	0x080401c8

080806f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80806f4:	b508      	push	{r3, lr}
 80806f6:	4b02      	ldr	r3, [pc, #8]	; (8080700 <network_connecting+0xc>)
 80806f8:	681b      	ldr	r3, [r3, #0]
 80806fa:	689b      	ldr	r3, [r3, #8]
 80806fc:	9301      	str	r3, [sp, #4]
 80806fe:	bd08      	pop	{r3, pc}
 8080700:	080401c8 	.word	0x080401c8

08080704 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8080704:	b508      	push	{r3, lr}
 8080706:	4b02      	ldr	r3, [pc, #8]	; (8080710 <network_disconnect+0xc>)
 8080708:	681b      	ldr	r3, [r3, #0]
 808070a:	68db      	ldr	r3, [r3, #12]
 808070c:	9301      	str	r3, [sp, #4]
 808070e:	bd08      	pop	{r3, pc}
 8080710:	080401c8 	.word	0x080401c8

08080714 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8080714:	b508      	push	{r3, lr}
 8080716:	4b02      	ldr	r3, [pc, #8]	; (8080720 <network_ready+0xc>)
 8080718:	681b      	ldr	r3, [r3, #0]
 808071a:	691b      	ldr	r3, [r3, #16]
 808071c:	9301      	str	r3, [sp, #4]
 808071e:	bd08      	pop	{r3, pc}
 8080720:	080401c8 	.word	0x080401c8

08080724 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8080724:	b508      	push	{r3, lr}
 8080726:	4b02      	ldr	r3, [pc, #8]	; (8080730 <network_on+0xc>)
 8080728:	681b      	ldr	r3, [r3, #0]
 808072a:	695b      	ldr	r3, [r3, #20]
 808072c:	9301      	str	r3, [sp, #4]
 808072e:	bd08      	pop	{r3, pc}
 8080730:	080401c8 	.word	0x080401c8

08080734 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8080734:	b508      	push	{r3, lr}
 8080736:	4b02      	ldr	r3, [pc, #8]	; (8080740 <network_off+0xc>)
 8080738:	681b      	ldr	r3, [r3, #0]
 808073a:	699b      	ldr	r3, [r3, #24]
 808073c:	9301      	str	r3, [sp, #4]
 808073e:	bd08      	pop	{r3, pc}
 8080740:	080401c8 	.word	0x080401c8

08080744 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8080744:	b508      	push	{r3, lr}
 8080746:	4b02      	ldr	r3, [pc, #8]	; (8080750 <network_listen+0xc>)
 8080748:	681b      	ldr	r3, [r3, #0]
 808074a:	69db      	ldr	r3, [r3, #28]
 808074c:	9301      	str	r3, [sp, #4]
 808074e:	bd08      	pop	{r3, pc}
 8080750:	080401c8 	.word	0x080401c8

08080754 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8080754:	b508      	push	{r3, lr}
 8080756:	4b02      	ldr	r3, [pc, #8]	; (8080760 <network_listening+0xc>)
 8080758:	681b      	ldr	r3, [r3, #0]
 808075a:	6a1b      	ldr	r3, [r3, #32]
 808075c:	9301      	str	r3, [sp, #4]
 808075e:	bd08      	pop	{r3, pc}
 8080760:	080401c8 	.word	0x080401c8

08080764 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8080764:	b508      	push	{r3, lr}
 8080766:	4b02      	ldr	r3, [pc, #8]	; (8080770 <network_set_listen_timeout+0xc>)
 8080768:	681b      	ldr	r3, [r3, #0]
 808076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808076c:	9301      	str	r3, [sp, #4]
 808076e:	bd08      	pop	{r3, pc}
 8080770:	080401c8 	.word	0x080401c8

08080774 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8080774:	b508      	push	{r3, lr}
 8080776:	4b02      	ldr	r3, [pc, #8]	; (8080780 <network_get_listen_timeout+0xc>)
 8080778:	681b      	ldr	r3, [r3, #0]
 808077a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808077c:	9301      	str	r3, [sp, #4]
 808077e:	bd08      	pop	{r3, pc}
 8080780:	080401c8 	.word	0x080401c8

08080784 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8080784:	b508      	push	{r3, lr}
 8080786:	4b02      	ldr	r3, [pc, #8]	; (8080790 <spark_process+0xc>)
 8080788:	681b      	ldr	r3, [r3, #0]
 808078a:	689b      	ldr	r3, [r3, #8]
 808078c:	9301      	str	r3, [sp, #4]
 808078e:	bd08      	pop	{r3, pc}
 8080790:	080401cc 	.word	0x080401cc

08080794 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8080794:	b508      	push	{r3, lr}
 8080796:	4b02      	ldr	r3, [pc, #8]	; (80807a0 <spark_cloud_flag_connect+0xc>)
 8080798:	681b      	ldr	r3, [r3, #0]
 808079a:	68db      	ldr	r3, [r3, #12]
 808079c:	9301      	str	r3, [sp, #4]
 808079e:	bd08      	pop	{r3, pc}
 80807a0:	080401cc 	.word	0x080401cc

080807a4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80807a4:	b508      	push	{r3, lr}
 80807a6:	4b02      	ldr	r3, [pc, #8]	; (80807b0 <spark_cloud_flag_connected+0xc>)
 80807a8:	681b      	ldr	r3, [r3, #0]
 80807aa:	695b      	ldr	r3, [r3, #20]
 80807ac:	9301      	str	r3, [sp, #4]
 80807ae:	bd08      	pop	{r3, pc}
 80807b0:	080401cc 	.word	0x080401cc

080807b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80807b4:	b508      	push	{r3, lr}
 80807b6:	4b02      	ldr	r3, [pc, #8]	; (80807c0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80807b8:	681b      	ldr	r3, [r3, #0]
 80807ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80807bc:	9301      	str	r3, [sp, #4]
 80807be:	bd08      	pop	{r3, pc}
 80807c0:	080401cc 	.word	0x080401cc

080807c4 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 80807c4:	b508      	push	{r3, lr}
 80807c6:	4b02      	ldr	r3, [pc, #8]	; (80807d0 <spark_cloud_disconnect+0xc>)
 80807c8:	681b      	ldr	r3, [r3, #0]
 80807ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80807cc:	9301      	str	r3, [sp, #4]
 80807ce:	bd08      	pop	{r3, pc}
 80807d0:	080401cc 	.word	0x080401cc

080807d4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80807d4:	b508      	push	{r3, lr}
 80807d6:	4b02      	ldr	r3, [pc, #8]	; (80807e0 <malloc+0xc>)
 80807d8:	681b      	ldr	r3, [r3, #0]
 80807da:	681b      	ldr	r3, [r3, #0]
 80807dc:	9301      	str	r3, [sp, #4]
 80807de:	bd08      	pop	{r3, pc}
 80807e0:	080401a0 	.word	0x080401a0

080807e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80807e4:	b508      	push	{r3, lr}
 80807e6:	4b02      	ldr	r3, [pc, #8]	; (80807f0 <free+0xc>)
 80807e8:	681b      	ldr	r3, [r3, #0]
 80807ea:	685b      	ldr	r3, [r3, #4]
 80807ec:	9301      	str	r3, [sp, #4]
 80807ee:	bd08      	pop	{r3, pc}
 80807f0:	080401a0 	.word	0x080401a0

080807f4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80807f4:	b508      	push	{r3, lr}
 80807f6:	4b02      	ldr	r3, [pc, #8]	; (8080800 <realloc+0xc>)
 80807f8:	681b      	ldr	r3, [r3, #0]
 80807fa:	689b      	ldr	r3, [r3, #8]
 80807fc:	9301      	str	r3, [sp, #4]
 80807fe:	bd08      	pop	{r3, pc}
 8080800:	080401a0 	.word	0x080401a0

08080804 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8080804:	b508      	push	{r3, lr}
 8080806:	4b02      	ldr	r3, [pc, #8]	; (8080810 <vsnprintf+0xc>)
 8080808:	681b      	ldr	r3, [r3, #0]
 808080a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808080c:	9301      	str	r3, [sp, #4]
 808080e:	bd08      	pop	{r3, pc}
 8080810:	080401a0 	.word	0x080401a0

08080814 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8080814:	b508      	push	{r3, lr}
 8080816:	4b02      	ldr	r3, [pc, #8]	; (8080820 <newlib_impure_ptr_callback+0xc>)
 8080818:	681b      	ldr	r3, [r3, #0]
 808081a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808081c:	9301      	str	r3, [sp, #4]
 808081e:	bd08      	pop	{r3, pc}
 8080820:	080401a0 	.word	0x080401a0

08080824 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8080824:	b510      	push	{r4, lr}
 8080826:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8080828:	6800      	ldr	r0, [r0, #0]
 808082a:	b118      	cbz	r0, 8080834 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 808082c:	f7ff ffda 	bl	80807e4 <free>
            wakeupSource_ = nullptr;
 8080830:	2300      	movs	r3, #0
 8080832:	6023      	str	r3, [r4, #0]
        }
    }
 8080834:	bd10      	pop	{r4, pc}

08080836 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8080836:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8080838:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808083c:	460d      	mov	r5, r1
        error_ = result.error_;
 808083e:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8080840:	460b      	mov	r3, r1
 8080842:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8080846:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 8080848:	f8c0 2006 	str.w	r2, [r0, #6]
 808084c:	889b      	ldrh	r3, [r3, #4]
 808084e:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8080850:	f7ff ffe8 	bl	8080824 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 8080854:	682b      	ldr	r3, [r5, #0]
 8080856:	b113      	cbz	r3, 808085e <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8080858:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 808085a:	2300      	movs	r3, #0
 808085c:	602b      	str	r3, [r5, #0]
    }
 808085e:	4620      	mov	r0, r4
 8080860:	bd38      	pop	{r3, r4, r5, pc}
	...

08080864 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
 8080864:	b538      	push	{r3, r4, r5, lr}
 8080866:	460c      	mov	r4, r1
 8080868:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
 808086a:	f7ff ffdb 	bl	8080824 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
 808086e:	b144      	cbz	r4, 8080882 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
 8080870:	8820      	ldrh	r0, [r4, #0]
 8080872:	f7ff ffaf 	bl	80807d4 <malloc>
 8080876:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
 8080878:	b128      	cbz	r0, 8080886 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
 808087a:	4621      	mov	r1, r4
 808087c:	8822      	ldrh	r2, [r4, #0]
 808087e:	f001 ff05 	bl	808268c <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
 8080882:	2000      	movs	r0, #0
    }
 8080884:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
 8080886:	4801      	ldr	r0, [pc, #4]	; (808088c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
 8080888:	e7fc      	b.n	8080884 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
 808088a:	bf00      	nop
 808088c:	fffffefc 	.word	0xfffffefc

08080890 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
 8080890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080892:	4d2d      	ldr	r5, [pc, #180]	; (8080948 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
 8080894:	7d0b      	ldrb	r3, [r1, #20]
 8080896:	4604      	mov	r4, r0
 8080898:	b08b      	sub	sp, #44	; 0x2c
 808089a:	4608      	mov	r0, r1
 808089c:	1daf      	adds	r7, r5, #6
 808089e:	2b00      	cmp	r3, #0
 80808a0:	d038      	beq.n	8080914 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
 80808a2:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
 80808a4:	791b      	ldrb	r3, [r3, #4]
 80808a6:	2b00      	cmp	r3, #0
 80808a8:	d034      	beq.n	8080914 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
 80808aa:	2200      	movs	r2, #0
    SleepResult() {}
 80808ac:	4b27      	ldr	r3, [pc, #156]	; (808094c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
 80808ae:	a902      	add	r1, sp, #8
 80808b0:	3004      	adds	r0, #4
 80808b2:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
 80808b4:	9202      	str	r2, [sp, #8]
 80808b6:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
 80808ba:	f88d 200e 	strb.w	r2, [sp, #14]
 80808be:	f7ff ff07 	bl	80806d0 <system_sleep_ext>
        compatResult_ = result.compatResult_;
 80808c2:	f8dd 300e 	ldr.w	r3, [sp, #14]
        result.setError(static_cast<system_error_t>(ret));
 80808c6:	b200      	sxth	r0, r0
 80808c8:	f8c5 3006 	str.w	r3, [r5, #6]
 80808cc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
 80808d0:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
 80808d4:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 80808d6:	9902      	ldr	r1, [sp, #8]
 80808d8:	4628      	mov	r0, r5
        compatResult_ = result.compatResult_;
 80808da:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
 80808dc:	f7ff ffc2 	bl	8080864 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
 80808e0:	a802      	add	r0, sp, #8
 80808e2:	f7ff ff9f 	bl	8080824 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
 80808e6:	2300      	movs	r3, #0
 80808e8:	6023      	str	r3, [r4, #0]
 80808ea:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 80808ec:	71a3      	strb	r3, [r4, #6]
 80808ee:	8123      	strh	r3, [r4, #8]
 80808f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80808f4:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
 80808f6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 80808fa:	4620      	mov	r0, r4
        error_ = result.error_;
 80808fc:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
 80808fe:	683b      	ldr	r3, [r7, #0]
        copyWakeupSource(result.wakeupSource_);
 8080900:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
 8080902:	f8c4 3006 	str.w	r3, [r4, #6]
 8080906:	88bb      	ldrh	r3, [r7, #4]
 8080908:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
 808090a:	f7ff ffab 	bl	8080864 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
 808090e:	4620      	mov	r0, r4
 8080910:	b00b      	add	sp, #44	; 0x2c
 8080912:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
 8080914:	2600      	movs	r6, #0
 8080916:	2320      	movs	r3, #32
 8080918:	e9cd 3602 	strd	r3, r6, [sp, #8]
 808091c:	4b0c      	ldr	r3, [pc, #48]	; (8080950 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
 808091e:	2032      	movs	r0, #50	; 0x32
 8080920:	9300      	str	r3, [sp, #0]
 8080922:	490c      	ldr	r1, [pc, #48]	; (8080954 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
 8080924:	4633      	mov	r3, r6
 8080926:	aa02      	add	r2, sp, #8
 8080928:	f7ff fe86 	bl	8080638 <log_message>
    SleepResult() {}
 808092c:	4b07      	ldr	r3, [pc, #28]	; (808094c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
 808092e:	a902      	add	r1, sp, #8
 8080930:	9304      	str	r3, [sp, #16]
        error_ = error;
 8080932:	f64f 63f2 	movw	r3, #65266	; 0xfef2
 8080936:	4804      	ldr	r0, [pc, #16]	; (8080948 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
 8080938:	9602      	str	r6, [sp, #8]
    SleepResult() {}
 808093a:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
 808093e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8080942:	f7ff ff78 	bl	8080836 <_ZN17SystemSleepResultaSEOS_>
 8080946:	e7cb      	b.n	80808e0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
 8080948:	200000ac 	.word	0x200000ac
 808094c:	ffff0000 	.word	0xffff0000
 8080950:	08082983 	.word	0x08082983
 8080954:	0808297c 	.word	0x0808297c

08080958 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8080958:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 808095a:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 808095c:	b510      	push	{r4, lr}
 808095e:	4b08      	ldr	r3, [pc, #32]	; (8080980 <_GLOBAL__sub_I_System+0x28>)
 8080960:	4c08      	ldr	r4, [pc, #32]	; (8080984 <_GLOBAL__sub_I_System+0x2c>)
 8080962:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 8080964:	4b08      	ldr	r3, [pc, #32]	; (8080988 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 8080966:	6020      	str	r0, [r4, #0]
 8080968:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 808096a:	71a0      	strb	r0, [r4, #6]
 808096c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808096e:	f7ff fe83 	bl	8080678 <set_system_mode>
SystemClass System;
 8080972:	4620      	mov	r0, r4
 8080974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 8080978:	4a04      	ldr	r2, [pc, #16]	; (808098c <_GLOBAL__sub_I_System+0x34>)
 808097a:	4905      	ldr	r1, [pc, #20]	; (8080990 <_GLOBAL__sub_I_System+0x38>)
 808097c:	f001 be6e 	b.w	808265c <__aeabi_atexit>
 8080980:	200000b8 	.word	0x200000b8
 8080984:	200000ac 	.word	0x200000ac
 8080988:	ffff0000 	.word	0xffff0000
 808098c:	20000074 	.word	0x20000074
 8080990:	08080119 	.word	0x08080119

08080994 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8080994:	b510      	push	{r4, lr}
 8080996:	4604      	mov	r4, r0
{
	free(buffer);
 8080998:	6800      	ldr	r0, [r0, #0]
 808099a:	f7ff ff23 	bl	80807e4 <free>
}
 808099e:	4620      	mov	r0, r4
 80809a0:	bd10      	pop	{r4, pc}

080809a2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80809a2:	b510      	push	{r4, lr}
 80809a4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80809a6:	6800      	ldr	r0, [r0, #0]
 80809a8:	b108      	cbz	r0, 80809ae <_ZN6String10invalidateEv+0xc>
 80809aa:	f7ff ff1b 	bl	80807e4 <free>
	buffer = NULL;
 80809ae:	2300      	movs	r3, #0
	capacity = len = 0;
 80809b0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80809b4:	6023      	str	r3, [r4, #0]
}
 80809b6:	bd10      	pop	{r4, pc}

080809b8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80809b8:	b538      	push	{r3, r4, r5, lr}
 80809ba:	4604      	mov	r4, r0
 80809bc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80809be:	6800      	ldr	r0, [r0, #0]
 80809c0:	3101      	adds	r1, #1
 80809c2:	f7ff ff17 	bl	80807f4 <realloc>
	if (newbuffer) {
 80809c6:	b110      	cbz	r0, 80809ce <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80809c8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80809cc:	2001      	movs	r0, #1
	}
	return 0;
}
 80809ce:	bd38      	pop	{r3, r4, r5, pc}

080809d0 <_ZN6String7reserveEj>:
{
 80809d0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80809d2:	6803      	ldr	r3, [r0, #0]
{
 80809d4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80809d6:	b123      	cbz	r3, 80809e2 <_ZN6String7reserveEj+0x12>
 80809d8:	6843      	ldr	r3, [r0, #4]
 80809da:	428b      	cmp	r3, r1
 80809dc:	d301      	bcc.n	80809e2 <_ZN6String7reserveEj+0x12>
 80809de:	2001      	movs	r0, #1
}
 80809e0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80809e2:	4620      	mov	r0, r4
 80809e4:	f7ff ffe8 	bl	80809b8 <_ZN6String12changeBufferEj>
 80809e8:	2800      	cmp	r0, #0
 80809ea:	d0f9      	beq.n	80809e0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80809ec:	68a3      	ldr	r3, [r4, #8]
 80809ee:	2b00      	cmp	r3, #0
 80809f0:	d1f5      	bne.n	80809de <_ZN6String7reserveEj+0xe>
 80809f2:	6822      	ldr	r2, [r4, #0]
 80809f4:	7013      	strb	r3, [r2, #0]
 80809f6:	e7f2      	b.n	80809de <_ZN6String7reserveEj+0xe>

080809f8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80809f8:	b570      	push	{r4, r5, r6, lr}
 80809fa:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80809fc:	4611      	mov	r1, r2
{
 80809fe:	4604      	mov	r4, r0
 8080a00:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8080a02:	f7ff ffe5 	bl	80809d0 <_ZN6String7reserveEj>
 8080a06:	b920      	cbnz	r0, 8080a12 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 8080a08:	4620      	mov	r0, r4
 8080a0a:	f7ff ffca 	bl	80809a2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 8080a0e:	4620      	mov	r0, r4
 8080a10:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 8080a12:	462a      	mov	r2, r5
 8080a14:	4631      	mov	r1, r6
 8080a16:	6820      	ldr	r0, [r4, #0]
	len = length;
 8080a18:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8080a1a:	f001 fe37 	bl	808268c <memcpy>
	buffer[len] = 0;
 8080a1e:	2100      	movs	r1, #0
 8080a20:	6822      	ldr	r2, [r4, #0]
 8080a22:	68a3      	ldr	r3, [r4, #8]
 8080a24:	54d1      	strb	r1, [r2, r3]
	return *this;
 8080a26:	e7f2      	b.n	8080a0e <_ZN6String4copyEPKcj+0x16>

08080a28 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8080a28:	b538      	push	{r3, r4, r5, lr}
 8080a2a:	4605      	mov	r5, r0
	if (buffer) {
 8080a2c:	6800      	ldr	r0, [r0, #0]
{
 8080a2e:	460c      	mov	r4, r1
	if (buffer) {
 8080a30:	b168      	cbz	r0, 8080a4e <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 8080a32:	686a      	ldr	r2, [r5, #4]
 8080a34:	688b      	ldr	r3, [r1, #8]
 8080a36:	429a      	cmp	r2, r3
 8080a38:	d307      	bcc.n	8080a4a <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 8080a3a:	6809      	ldr	r1, [r1, #0]
 8080a3c:	f001 fe9b 	bl	8082776 <strcpy>
			len = rhs.len;
 8080a40:	68a3      	ldr	r3, [r4, #8]
 8080a42:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8080a44:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 8080a46:	60a3      	str	r3, [r4, #8]
}
 8080a48:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 8080a4a:	f7ff fecb 	bl	80807e4 <free>
	buffer = rhs.buffer;
 8080a4e:	6823      	ldr	r3, [r4, #0]
 8080a50:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8080a52:	6863      	ldr	r3, [r4, #4]
 8080a54:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8080a56:	68a3      	ldr	r3, [r4, #8]
 8080a58:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8080a5a:	2300      	movs	r3, #0
	rhs.capacity = 0;
 8080a5c:	e9c4 3300 	strd	r3, r3, [r4]
 8080a60:	e7f1      	b.n	8080a46 <_ZN6String4moveERS_+0x1e>

08080a62 <_ZN6StringC1EOS_>:
	buffer = NULL;
 8080a62:	2300      	movs	r3, #0
String::String(String &&rval)
 8080a64:	b510      	push	{r4, lr}
 8080a66:	4604      	mov	r4, r0
	capacity = 0;
 8080a68:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8080a6c:	6083      	str	r3, [r0, #8]
	flags = 0;
 8080a6e:	7303      	strb	r3, [r0, #12]
	move(rval);
 8080a70:	f7ff ffda 	bl	8080a28 <_ZN6String4moveERS_>
}
 8080a74:	4620      	mov	r0, r4
 8080a76:	bd10      	pop	{r4, pc}

08080a78 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8080a78:	4288      	cmp	r0, r1
{
 8080a7a:	b510      	push	{r4, lr}
 8080a7c:	460b      	mov	r3, r1
 8080a7e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8080a80:	d004      	beq.n	8080a8c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8080a82:	6809      	ldr	r1, [r1, #0]
 8080a84:	b121      	cbz	r1, 8080a90 <_ZN6StringaSERKS_+0x18>
 8080a86:	689a      	ldr	r2, [r3, #8]
 8080a88:	f7ff ffb6 	bl	80809f8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8080a8c:	4620      	mov	r0, r4
 8080a8e:	bd10      	pop	{r4, pc}
	else invalidate();
 8080a90:	f7ff ff87 	bl	80809a2 <_ZN6String10invalidateEv>
 8080a94:	e7fa      	b.n	8080a8c <_ZN6StringaSERKS_+0x14>

08080a96 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 8080a96:	2300      	movs	r3, #0
String::String(const String &value)
 8080a98:	b510      	push	{r4, lr}
 8080a9a:	4604      	mov	r4, r0
	capacity = 0;
 8080a9c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8080aa0:	6083      	str	r3, [r0, #8]
	flags = 0;
 8080aa2:	7303      	strb	r3, [r0, #12]
	*this = value;
 8080aa4:	f7ff ffe8 	bl	8080a78 <_ZN6StringaSERKS_>
}
 8080aa8:	4620      	mov	r0, r4
 8080aaa:	bd10      	pop	{r4, pc}

08080aac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8080aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080aae:	4606      	mov	r6, r0
 8080ab0:	460d      	mov	r5, r1
  size_t n = 0;
 8080ab2:	2400      	movs	r4, #0
 8080ab4:	188f      	adds	r7, r1, r2
  while (size--) {
 8080ab6:	42bd      	cmp	r5, r7
 8080ab8:	d00c      	beq.n	8080ad4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8080aba:	6833      	ldr	r3, [r6, #0]
 8080abc:	4630      	mov	r0, r6
 8080abe:	689b      	ldr	r3, [r3, #8]
 8080ac0:	f815 1b01 	ldrb.w	r1, [r5], #1
 8080ac4:	4798      	blx	r3
     if (chunk>=0)
 8080ac6:	1e03      	subs	r3, r0, #0
 8080ac8:	db01      	blt.n	8080ace <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8080aca:	441c      	add	r4, r3
  while (size--) {
 8080acc:	e7f3      	b.n	8080ab6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8080ace:	2c00      	cmp	r4, #0
 8080ad0:	bf08      	it	eq
 8080ad2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8080ad4:	4620      	mov	r0, r4
 8080ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080ad8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8080ad8:	b570      	push	{r4, r5, r6, lr}
 8080ada:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8080adc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8080ade:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8080ae0:	b149      	cbz	r1, 8080af6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8080ae2:	f001 fe50 	bl	8082786 <strlen>
 8080ae6:	682b      	ldr	r3, [r5, #0]
 8080ae8:	4602      	mov	r2, r0
 8080aea:	4621      	mov	r1, r4
 8080aec:	4628      	mov	r0, r5
    }
 8080aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8080af2:	68db      	ldr	r3, [r3, #12]
 8080af4:	4718      	bx	r3
    }
 8080af6:	bd70      	pop	{r4, r5, r6, pc}

08080af8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8080af8:	6803      	ldr	r3, [r0, #0]
 8080afa:	689b      	ldr	r3, [r3, #8]
 8080afc:	4718      	bx	r3

08080afe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8080afe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8080b00:	210d      	movs	r1, #13
{
 8080b02:	4605      	mov	r5, r0
  size_t n = print('\r');
 8080b04:	f7ff fff8 	bl	8080af8 <_ZN5Print5printEc>
  n += print('\n');
 8080b08:	210a      	movs	r1, #10
  size_t n = print('\r');
 8080b0a:	4604      	mov	r4, r0
  n += print('\n');
 8080b0c:	4628      	mov	r0, r5
 8080b0e:	f7ff fff3 	bl	8080af8 <_ZN5Print5printEc>
  return n;
}
 8080b12:	4420      	add	r0, r4
 8080b14:	bd38      	pop	{r3, r4, r5, pc}

08080b16 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8080b16:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8080b18:	2a01      	cmp	r2, #1
 8080b1a:	bf98      	it	ls
 8080b1c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8080b1e:	b530      	push	{r4, r5, lr}
 8080b20:	b08b      	sub	sp, #44	; 0x2c
 8080b22:	460c      	mov	r4, r1
  *str = '\0';
 8080b24:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8080b28:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 8080b2a:	4625      	mov	r5, r4
 8080b2c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8080b30:	fb04 5312 	mls	r3, r4, r2, r5
 8080b34:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080b36:	2b09      	cmp	r3, #9
 8080b38:	bf94      	ite	ls
 8080b3a:	3330      	addls	r3, #48	; 0x30
 8080b3c:	3337      	addhi	r3, #55	; 0x37
 8080b3e:	b2db      	uxtb	r3, r3
  } while(n);
 8080b40:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080b42:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8080b46:	d9f0      	bls.n	8080b2a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8080b48:	f7ff ffc6 	bl	8080ad8 <_ZN5Print5writeEPKc>
}
 8080b4c:	b00b      	add	sp, #44	; 0x2c
 8080b4e:	bd30      	pop	{r4, r5, pc}

08080b50 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 8080b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080b54:	b086      	sub	sp, #24
 8080b56:	af00      	add	r7, sp, #0
 8080b58:	4605      	mov	r5, r0
 8080b5a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 8080b5c:	1d38      	adds	r0, r7, #4
 8080b5e:	2114      	movs	r1, #20
{
 8080b60:	4614      	mov	r4, r2
    va_copy(args2, args);
 8080b62:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 8080b64:	f7ff fe4e 	bl	8080804 <vsnprintf>

    if (n<bufsize)
 8080b68:	2813      	cmp	r0, #19
 8080b6a:	d80e      	bhi.n	8080b8a <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 8080b6c:	4628      	mov	r0, r5
 8080b6e:	1d39      	adds	r1, r7, #4
 8080b70:	f7ff ffb2 	bl	8080ad8 <_ZN5Print5writeEPKc>
 8080b74:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 8080b76:	b11e      	cbz	r6, 8080b80 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 8080b78:	4628      	mov	r0, r5
 8080b7a:	f7ff ffc0 	bl	8080afe <_ZN5Print7printlnEv>
 8080b7e:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 8080b80:	4620      	mov	r0, r4
 8080b82:	3718      	adds	r7, #24
 8080b84:	46bd      	mov	sp, r7
 8080b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 8080b8a:	f100 0308 	add.w	r3, r0, #8
 8080b8e:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 8080b92:	46e8      	mov	r8, sp
        char bigger[n+1];
 8080b94:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 8080b98:	4622      	mov	r2, r4
 8080b9a:	1c41      	adds	r1, r0, #1
 8080b9c:	683b      	ldr	r3, [r7, #0]
 8080b9e:	4668      	mov	r0, sp
 8080ba0:	f7ff fe30 	bl	8080804 <vsnprintf>
  return write(str);
 8080ba4:	4669      	mov	r1, sp
 8080ba6:	4628      	mov	r0, r5
 8080ba8:	f7ff ff96 	bl	8080ad8 <_ZN5Print5writeEPKc>
 8080bac:	4604      	mov	r4, r0
 8080bae:	46c5      	mov	sp, r8
 8080bb0:	e7e1      	b.n	8080b76 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

08080bb2 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 8080bb2:	6880      	ldr	r0, [r0, #8]
 8080bb4:	6803      	ldr	r3, [r0, #0]
 8080bb6:	68db      	ldr	r3, [r3, #12]
 8080bb8:	4718      	bx	r3

08080bba <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 8080bba:	4770      	bx	lr

08080bbc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 8080bbc:	4608      	mov	r0, r1
 8080bbe:	b111      	cbz	r1, 8080bc6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 8080bc0:	680b      	ldr	r3, [r1, #0]
 8080bc2:	685b      	ldr	r3, [r3, #4]
 8080bc4:	4718      	bx	r3
}
 8080bc6:	4770      	bx	lr

08080bc8 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 8080bc8:	4770      	bx	lr

08080bca <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 8080bca:	4770      	bx	lr

08080bcc <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 8080bcc:	4770      	bx	lr

08080bce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 8080bce:	b538      	push	{r3, r4, r5, lr}
 8080bd0:	4604      	mov	r4, r0
 8080bd2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 8080bd4:	6800      	ldr	r0, [r0, #0]
 8080bd6:	212e      	movs	r1, #46	; 0x2e
 8080bd8:	f001 fdb9 	bl	808274e <strchrnul>
    size = s - category;
 8080bdc:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 8080bde:	4602      	mov	r2, r0
    size = s - category;
 8080be0:	1ac0      	subs	r0, r0, r3
 8080be2:	6028      	str	r0, [r5, #0]
    if (size) {
 8080be4:	b120      	cbz	r0, 8080bf0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 8080be6:	7813      	ldrb	r3, [r2, #0]
 8080be8:	b103      	cbz	r3, 8080bec <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 8080bea:	3201      	adds	r2, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080bec:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8080bee:	6022      	str	r2, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
 8080bf0:	bd38      	pop	{r3, r4, r5, pc}

08080bf2 <_ZN5spark16JSONStreamWriterD0Ev>:
 8080bf2:	b510      	push	{r4, lr}
 8080bf4:	4604      	mov	r4, r0
 8080bf6:	210c      	movs	r1, #12
 8080bf8:	f001 fd35 	bl	8082666 <_ZdlPvj>
 8080bfc:	4620      	mov	r0, r4
 8080bfe:	bd10      	pop	{r4, pc}

08080c00 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 8080c00:	b510      	push	{r4, lr}
 8080c02:	4604      	mov	r4, r0
 8080c04:	2104      	movs	r1, #4
 8080c06:	f001 fd2e 	bl	8082666 <_ZdlPvj>
 8080c0a:	4620      	mov	r0, r4
 8080c0c:	bd10      	pop	{r4, pc}

08080c0e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 8080c0e:	b510      	push	{r4, lr}
 8080c10:	4604      	mov	r4, r0
 8080c12:	2104      	movs	r1, #4
 8080c14:	f001 fd27 	bl	8082666 <_ZdlPvj>
 8080c18:	4620      	mov	r0, r4
 8080c1a:	bd10      	pop	{r4, pc}

08080c1c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 8080c1c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 8080c1e:	f001 fda0 	bl	8082762 <strcmp>
}
 8080c22:	fab0 f080 	clz	r0, r0
 8080c26:	0940      	lsrs	r0, r0, #5
 8080c28:	bd08      	pop	{r3, pc}

08080c2a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 8080c2a:	b510      	push	{r4, lr}
 8080c2c:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 8080c2e:	f001 f95f 	bl	8081ef0 <_Z16_fetch_usbserialv>
 8080c32:	4284      	cmp	r4, r0
 8080c34:	d105      	bne.n	8080c42 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 8080c36:	f001 f95b 	bl	8081ef0 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 8080c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 8080c3e:	f001 b93d 	b.w	8081ebc <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 8080c42:	f001 f993 	bl	8081f6c <_Z17_fetch_usbserial1v>
 8080c46:	4284      	cmp	r4, r0
 8080c48:	d102      	bne.n	8080c50 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 8080c4a:	f001 f98f 	bl	8081f6c <_Z17_fetch_usbserial1v>
 8080c4e:	e7f4      	b.n	8080c3a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 8080c50:	f001 fa7a 	bl	8082148 <_Z22__fetch_global_Serial1v>
 8080c54:	4284      	cmp	r4, r0
 8080c56:	d105      	bne.n	8080c64 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 8080c58:	f001 fa76 	bl	8082148 <_Z22__fetch_global_Serial1v>
}
 8080c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 8080c60:	f001 ba6f 	b.w	8082142 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 8080c64:	b12c      	cbz	r4, 8080c72 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 8080c66:	6823      	ldr	r3, [r4, #0]
 8080c68:	4620      	mov	r0, r4
}
 8080c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8080c6e:	685b      	ldr	r3, [r3, #4]
 8080c70:	4718      	bx	r3
 8080c72:	bd10      	pop	{r4, pc}

08080c74 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 8080c74:	b538      	push	{r3, r4, r5, lr}
 8080c76:	4605      	mov	r5, r0
    return value(val, strlen(val));
 8080c78:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 8080c7a:	460c      	mov	r4, r1
    return value(val, strlen(val));
 8080c7c:	f001 fd83 	bl	8082786 <strlen>
 8080c80:	4621      	mov	r1, r4
 8080c82:	4602      	mov	r2, r0
 8080c84:	4628      	mov	r0, r5
}
 8080c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 8080c8a:	f001 bcc0 	b.w	808260e <_ZN5spark10JSONWriter5valueEPKcj>

08080c8e <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 8080c8e:	b570      	push	{r4, r5, r6, lr}
 8080c90:	4604      	mov	r4, r0
    write(str, strlen(str));
 8080c92:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 8080c94:	460d      	mov	r5, r1
    write(str, strlen(str));
 8080c96:	f001 fd76 	bl	8082786 <strlen>
 8080c9a:	6823      	ldr	r3, [r4, #0]
 8080c9c:	4602      	mov	r2, r0
 8080c9e:	4629      	mov	r1, r5
 8080ca0:	4620      	mov	r0, r4
}
 8080ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 8080ca6:	68db      	ldr	r3, [r3, #12]
 8080ca8:	4718      	bx	r3

08080caa <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 8080caa:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 8080cac:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 8080cae:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 8080cb2:	2201      	movs	r2, #1
 8080cb4:	68db      	ldr	r3, [r3, #12]
 8080cb6:	f10d 0107 	add.w	r1, sp, #7
 8080cba:	4798      	blx	r3
}
 8080cbc:	b003      	add	sp, #12
 8080cbe:	f85d fb04 	ldr.w	pc, [sp], #4

08080cc2 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 8080cc2:	b40e      	push	{r1, r2, r3}
 8080cc4:	b503      	push	{r0, r1, lr}
 8080cc6:	ab03      	add	r3, sp, #12
 8080cc8:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 8080ccc:	2100      	movs	r1, #0
 8080cce:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 8080cd0:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 8080cd2:	f7ff ff3d 	bl	8080b50 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 8080cd6:	b002      	add	sp, #8
 8080cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8080cdc:	b003      	add	sp, #12
 8080cde:	4770      	bx	lr

08080ce0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8080ce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 8080ce4:	f04f 0814 	mov.w	r8, #20
 8080ce8:	e9d0 9500 	ldrd	r9, r5, [r0]
 8080cec:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8080cee:	464c      	mov	r4, r9
 8080cf0:	fb08 f505 	mul.w	r5, r8, r5
 8080cf4:	9300      	str	r3, [sp, #0]
 8080cf6:	10ab      	asrs	r3, r5, #2
 8080cf8:	4d17      	ldr	r5, [pc, #92]	; (8080d58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 8080cfa:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 8080cfc:	2d00      	cmp	r5, #0
 8080cfe:	dd23      	ble.n	8080d48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 8080d00:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 8080d02:	fb08 f006 	mul.w	r0, r8, r6
 8080d06:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 8080d0a:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8080d0e:	463a      	mov	r2, r7
 8080d10:	455f      	cmp	r7, fp
 8080d12:	bf28      	it	cs
 8080d14:	465a      	movcs	r2, fp
 8080d16:	5820      	ldr	r0, [r4, r0]
 8080d18:	9101      	str	r1, [sp, #4]
 8080d1a:	f001 fd3c 	bl	8082796 <strncmp>
                if (cmp == 0) {
 8080d1e:	2301      	movs	r3, #1
 8080d20:	9901      	ldr	r1, [sp, #4]
 8080d22:	b978      	cbnz	r0, 8080d44 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 8080d24:	455f      	cmp	r7, fp
 8080d26:	d103      	bne.n	8080d30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 8080d28:	9a00      	ldr	r2, [sp, #0]
 8080d2a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8080d2c:	4635      	mov	r5, r6
 8080d2e:	e7e5      	b.n	8080cfc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 8080d30:	bf8c      	ite	hi
 8080d32:	2001      	movhi	r0, #1
 8080d34:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 8080d36:	2800      	cmp	r0, #0
 8080d38:	d0f8      	beq.n	8080d2c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 8080d3a:	1bae      	subs	r6, r5, r6
	      ++__first;
 8080d3c:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 8080d40:	3e01      	subs	r6, #1
 8080d42:	e7f3      	b.n	8080d2c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 8080d44:	0fc0      	lsrs	r0, r0, #31
 8080d46:	e7f6      	b.n	8080d36 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 8080d48:	eba4 0409 	sub.w	r4, r4, r9
}
 8080d4c:	4802      	ldr	r0, [pc, #8]	; (8080d58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 8080d4e:	10a4      	asrs	r4, r4, #2
 8080d50:	4360      	muls	r0, r4
 8080d52:	b003      	add	sp, #12
 8080d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080d58:	cccccccd 	.word	0xcccccccd

08080d5c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 8080d5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 8080d5e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 8080d60:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 8080d62:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 8080d64:	b303      	cbz	r3, 8080da8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 8080d66:	b1f9      	cbz	r1, 8080da8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 8080d68:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 8080d6a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 8080d6e:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 8080d70:	a903      	add	r1, sp, #12
 8080d72:	a801      	add	r0, sp, #4
 8080d74:	f7ff ff2b 	bl	8080bce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8080d78:	4601      	mov	r1, r0
 8080d7a:	b1a8      	cbz	r0, 8080da8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 8080d7c:	f10d 030b 	add.w	r3, sp, #11
 8080d80:	4620      	mov	r0, r4
 8080d82:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 8080d84:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 8080d88:	f7ff ffaa 	bl	8080ce0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 8080d8c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8080d90:	b153      	cbz	r3, 8080da8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 8080d92:	2314      	movs	r3, #20
 8080d94:	6824      	ldr	r4, [r4, #0]
 8080d96:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 8080d9a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 8080d9e:	3408      	adds	r4, #8
            if (node.level >= 0) {
 8080da0:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 8080da2:	bfa8      	it	ge
 8080da4:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 8080da6:	e7e3      	b.n	8080d70 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 8080da8:	4630      	mov	r0, r6
 8080daa:	b004      	add	sp, #16
 8080dac:	bd70      	pop	{r4, r5, r6, pc}
	...

08080db0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 8080db0:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 8080db2:	4c0a      	ldr	r4, [pc, #40]	; (8080ddc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 8080db4:	7823      	ldrb	r3, [r4, #0]
 8080db6:	f3bf 8f5b 	dmb	ish
 8080dba:	07db      	lsls	r3, r3, #31
 8080dbc:	d40b      	bmi.n	8080dd6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 8080dbe:	4620      	mov	r0, r4
 8080dc0:	f7ff f978 	bl	80800b4 <__cxa_guard_acquire>
 8080dc4:	b138      	cbz	r0, 8080dd6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 8080dc6:	4620      	mov	r0, r4
 8080dc8:	f7ff f979 	bl	80800be <__cxa_guard_release>
 8080dcc:	4a04      	ldr	r2, [pc, #16]	; (8080de0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 8080dce:	4905      	ldr	r1, [pc, #20]	; (8080de4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 8080dd0:	4805      	ldr	r0, [pc, #20]	; (8080de8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 8080dd2:	f001 fc43 	bl	808265c <__aeabi_atexit>
}
 8080dd6:	4804      	ldr	r0, [pc, #16]	; (8080de8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 8080dd8:	bd10      	pop	{r4, pc}
 8080dda:	bf00      	nop
 8080ddc:	200000c0 	.word	0x200000c0
 8080de0:	20000074 	.word	0x20000074
 8080de4:	08080bcb 	.word	0x08080bcb
 8080de8:	20000004 	.word	0x20000004

08080dec <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 8080dec:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 8080dee:	4c0a      	ldr	r4, [pc, #40]	; (8080e18 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 8080df0:	7823      	ldrb	r3, [r4, #0]
 8080df2:	f3bf 8f5b 	dmb	ish
 8080df6:	07db      	lsls	r3, r3, #31
 8080df8:	d40b      	bmi.n	8080e12 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 8080dfa:	4620      	mov	r0, r4
 8080dfc:	f7ff f95a 	bl	80800b4 <__cxa_guard_acquire>
 8080e00:	b138      	cbz	r0, 8080e12 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 8080e02:	4620      	mov	r0, r4
 8080e04:	f7ff f95b 	bl	80800be <__cxa_guard_release>
 8080e08:	4a04      	ldr	r2, [pc, #16]	; (8080e1c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 8080e0a:	4905      	ldr	r1, [pc, #20]	; (8080e20 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 8080e0c:	4805      	ldr	r0, [pc, #20]	; (8080e24 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 8080e0e:	f001 fc25 	bl	808265c <__aeabi_atexit>
    return &factory;
}
 8080e12:	4804      	ldr	r0, [pc, #16]	; (8080e24 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 8080e14:	bd10      	pop	{r4, pc}
 8080e16:	bf00      	nop
 8080e18:	200000c4 	.word	0x200000c4
 8080e1c:	20000074 	.word	0x20000074
 8080e20:	08080bc9 	.word	0x08080bc9
 8080e24:	20000008 	.word	0x20000008

08080e28 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 8080e28:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 8080e2a:	2500      	movs	r5, #0
 8080e2c:	4604      	mov	r4, r0
 8080e2e:	e9c0 5500 	strd	r5, r5, [r0]
 8080e32:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8080e36:	6085      	str	r5, [r0, #8]
 8080e38:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 8080e3a:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 8080e3e:	f7ff fb43 	bl	80804c8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 8080e42:	f7ff ffb5 	bl	8080db0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 8080e46:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 8080e48:	f7ff ffd0 	bl	8080dec <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 8080e4c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 8080e4e:	6220      	str	r0, [r4, #32]
}
 8080e50:	4620      	mov	r0, r4
 8080e52:	bd38      	pop	{r3, r4, r5, pc}

08080e54 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 8080e54:	b510      	push	{r4, lr}
    static LogManager mgr;
 8080e56:	4c0b      	ldr	r4, [pc, #44]	; (8080e84 <_ZN5spark10LogManager8instanceEv+0x30>)
 8080e58:	7823      	ldrb	r3, [r4, #0]
 8080e5a:	f3bf 8f5b 	dmb	ish
 8080e5e:	07db      	lsls	r3, r3, #31
 8080e60:	d40e      	bmi.n	8080e80 <_ZN5spark10LogManager8instanceEv+0x2c>
 8080e62:	4620      	mov	r0, r4
 8080e64:	f7ff f926 	bl	80800b4 <__cxa_guard_acquire>
 8080e68:	b150      	cbz	r0, 8080e80 <_ZN5spark10LogManager8instanceEv+0x2c>
 8080e6a:	4807      	ldr	r0, [pc, #28]	; (8080e88 <_ZN5spark10LogManager8instanceEv+0x34>)
 8080e6c:	f7ff ffdc 	bl	8080e28 <_ZN5spark10LogManagerC1Ev>
 8080e70:	4620      	mov	r0, r4
 8080e72:	f7ff f924 	bl	80800be <__cxa_guard_release>
 8080e76:	4a05      	ldr	r2, [pc, #20]	; (8080e8c <_ZN5spark10LogManager8instanceEv+0x38>)
 8080e78:	4905      	ldr	r1, [pc, #20]	; (8080e90 <_ZN5spark10LogManager8instanceEv+0x3c>)
 8080e7a:	4803      	ldr	r0, [pc, #12]	; (8080e88 <_ZN5spark10LogManager8instanceEv+0x34>)
 8080e7c:	f001 fbee 	bl	808265c <__aeabi_atexit>
    return &mgr;
}
 8080e80:	4801      	ldr	r0, [pc, #4]	; (8080e88 <_ZN5spark10LogManager8instanceEv+0x34>)
 8080e82:	bd10      	pop	{r4, pc}
 8080e84:	200000bc 	.word	0x200000bc
 8080e88:	200000cc 	.word	0x200000cc
 8080e8c:	20000074 	.word	0x20000074
 8080e90:	08081343 	.word	0x08081343

08080e94 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 8080e94:	2300      	movs	r3, #0
 8080e96:	4a02      	ldr	r2, [pc, #8]	; (8080ea0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 8080e98:	4902      	ldr	r1, [pc, #8]	; (8080ea4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 8080e9a:	4803      	ldr	r0, [pc, #12]	; (8080ea8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 8080e9c:	f7ff bbe4 	b.w	8080668 <log_set_callbacks>
 8080ea0:	08081221 	.word	0x08081221
 8080ea4:	080811ad 	.word	0x080811ad
 8080ea8:	0808112d 	.word	0x0808112d

08080eac <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 8080eac:	2300      	movs	r3, #0
 8080eae:	461a      	mov	r2, r3
 8080eb0:	4619      	mov	r1, r3
 8080eb2:	4618      	mov	r0, r3
 8080eb4:	f7ff bbd8 	b.w	8080668 <log_set_callbacks>

08080eb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080eb8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080eba:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 8080ebc:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 8080ebe:	b17c      	cbz	r4, 8080ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 8080ec0:	6863      	ldr	r3, [r4, #4]
 8080ec2:	3b01      	subs	r3, #1
 8080ec4:	6063      	str	r3, [r4, #4]
 8080ec6:	b95b      	cbnz	r3, 8080ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8080ec8:	6823      	ldr	r3, [r4, #0]
 8080eca:	4620      	mov	r0, r4
 8080ecc:	689b      	ldr	r3, [r3, #8]
 8080ece:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080ed0:	68a3      	ldr	r3, [r4, #8]
 8080ed2:	3b01      	subs	r3, #1
 8080ed4:	60a3      	str	r3, [r4, #8]
 8080ed6:	b91b      	cbnz	r3, 8080ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080ed8:	6823      	ldr	r3, [r4, #0]
 8080eda:	4620      	mov	r0, r4
 8080edc:	68db      	ldr	r3, [r3, #12]
 8080ede:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 8080ee0:	4628      	mov	r0, r5
 8080ee2:	bd38      	pop	{r3, r4, r5, pc}

08080ee4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8080ee4:	680b      	ldr	r3, [r1, #0]
 8080ee6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8080ee8:	b113      	cbz	r3, 8080ef0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 8080eea:	685a      	ldr	r2, [r3, #4]
 8080eec:	3201      	adds	r2, #1
 8080eee:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 8080ef0:	4770      	bx	lr

08080ef2 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 8080ef2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080ef4:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 8080ef6:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080ef8:	f851 3b04 	ldr.w	r3, [r1], #4
 8080efc:	a801      	add	r0, sp, #4
 8080efe:	9300      	str	r3, [sp, #0]
 8080f00:	f7ff fff0 	bl	8080ee4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8080f04:	466a      	mov	r2, sp
 8080f06:	4629      	mov	r1, r5
 8080f08:	4620      	mov	r0, r4
 8080f0a:	f001 fa2b 	bl	8082364 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080f0e:	a801      	add	r0, sp, #4
 8080f10:	f7ff ffd2 	bl	8080eb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8080f14:	4620      	mov	r0, r4
 8080f16:	b003      	add	sp, #12
 8080f18:	bd30      	pop	{r4, r5, pc}

08080f1a <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 8080f1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080f1c:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 8080f1e:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080f20:	f851 3b04 	ldr.w	r3, [r1], #4
 8080f24:	a801      	add	r0, sp, #4
 8080f26:	9300      	str	r3, [sp, #0]
 8080f28:	f7ff ffdc 	bl	8080ee4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8080f2c:	466a      	mov	r2, sp
 8080f2e:	4629      	mov	r1, r5
 8080f30:	4620      	mov	r0, r4
 8080f32:	f001 fa93 	bl	808245c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 8080f36:	a801      	add	r0, sp, #4
 8080f38:	f7ff ffbe 	bl	8080eb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8080f3c:	4620      	mov	r0, r4
 8080f3e:	b003      	add	sp, #12
 8080f40:	bd30      	pop	{r4, r5, pc}

08080f42 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 8080f42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080f44:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 8080f46:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080f48:	f851 3b04 	ldr.w	r3, [r1], #4
 8080f4c:	a801      	add	r0, sp, #4
 8080f4e:	9300      	str	r3, [sp, #0]
 8080f50:	f7ff ffc8 	bl	8080ee4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8080f54:	466a      	mov	r2, sp
 8080f56:	4629      	mov	r1, r5
 8080f58:	4620      	mov	r0, r4
 8080f5a:	f001 fa5b 	bl	8082414 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 8080f5e:	a801      	add	r0, sp, #4
 8080f60:	f7ff ffaa 	bl	8080eb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8080f64:	4620      	mov	r0, r4
 8080f66:	b003      	add	sp, #12
 8080f68:	bd30      	pop	{r4, r5, pc}
	...

08080f6c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 8080f6c:	b570      	push	{r4, r5, r6, lr}
 8080f6e:	b08a      	sub	sp, #40	; 0x28
 8080f70:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 8080f72:	4601      	mov	r1, r0
 8080f74:	a804      	add	r0, sp, #16
 8080f76:	f7ff ffd0 	bl	8080f1a <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 8080f7a:	4e14      	ldr	r6, [pc, #80]	; (8080fcc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 8080f7c:	a804      	add	r0, sp, #16
 8080f7e:	f001 fa85 	bl	808248c <_ZN5spark18JSONObjectIterator4nextEv>
 8080f82:	b1e8      	cbz	r0, 8080fc0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 8080f84:	4668      	mov	r0, sp
 8080f86:	a904      	add	r1, sp, #16
 8080f88:	f7ff ffdb 	bl	8080f42 <_ZNK5spark18JSONObjectIterator4nameEv>
 8080f8c:	4631      	mov	r1, r6
 8080f8e:	9802      	ldr	r0, [sp, #8]
 8080f90:	f7ff fe44 	bl	8080c1c <_ZNK5spark10JSONStringeqEPKc.isra.0>
 8080f94:	4604      	mov	r4, r0
 8080f96:	b110      	cbz	r0, 8080f9e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 8080f98:	1e2c      	subs	r4, r5, #0
 8080f9a:	bf18      	it	ne
 8080f9c:	2401      	movne	r4, #1
 8080f9e:	a801      	add	r0, sp, #4
 8080fa0:	f7ff ff8a 	bl	8080eb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080fa4:	2c00      	cmp	r4, #0
 8080fa6:	d0e9      	beq.n	8080f7c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 8080fa8:	4668      	mov	r0, sp
 8080faa:	a904      	add	r1, sp, #16
 8080fac:	f7ff ffa1 	bl	8080ef2 <_ZNK5spark18JSONObjectIterator5valueEv>
 8080fb0:	4668      	mov	r0, sp
 8080fb2:	f001 fa0e 	bl	80823d2 <_ZNK5spark9JSONValue5toIntEv>
 8080fb6:	6028      	str	r0, [r5, #0]
 8080fb8:	a801      	add	r0, sp, #4
 8080fba:	f7ff ff7d 	bl	8080eb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080fbe:	e7dd      	b.n	8080f7c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 8080fc0:	a805      	add	r0, sp, #20
 8080fc2:	f7ff ff79 	bl	8080eb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8080fc6:	b00a      	add	sp, #40	; 0x28
 8080fc8:	bd70      	pop	{r4, r5, r6, pc}
 8080fca:	bf00      	nop
 8080fcc:	080829aa 	.word	0x080829aa

08080fd0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8080fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080fd2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 8080fd4:	4919      	ldr	r1, [pc, #100]	; (808103c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 8080fd6:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8080fd8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 8080fda:	f001 fbc2 	bl	8082762 <strcmp>
 8080fde:	b948      	cbnz	r0, 8080ff4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 8080fe0:	f000 ff86 	bl	8081ef0 <_Z16_fetch_usbserialv>
 8080fe4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080fe8:	f000 ff64 	bl	8081eb4 <_ZN9USBSerial5beginEl>
        return &Serial;
 8080fec:	f000 ff80 	bl	8081ef0 <_Z16_fetch_usbserialv>
}
 8080ff0:	b003      	add	sp, #12
 8080ff2:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 8080ff4:	4620      	mov	r0, r4
 8080ff6:	4912      	ldr	r1, [pc, #72]	; (8081040 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 8080ff8:	f001 fbb3 	bl	8082762 <strcmp>
 8080ffc:	b940      	cbnz	r0, 8081010 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 8080ffe:	f000 ffb5 	bl	8081f6c <_Z17_fetch_usbserial1v>
 8081002:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081006:	f000 ff55 	bl	8081eb4 <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 808100a:	f000 ffaf 	bl	8081f6c <_Z17_fetch_usbserial1v>
 808100e:	e7ef      	b.n	8080ff0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 8081010:	4620      	mov	r0, r4
 8081012:	490c      	ldr	r1, [pc, #48]	; (8081044 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 8081014:	f001 fba5 	bl	8082762 <strcmp>
 8081018:	b970      	cbnz	r0, 8081038 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 808101a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 808101e:	a901      	add	r1, sp, #4
 8081020:	4628      	mov	r0, r5
        int baud = 9600;
 8081022:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 8081024:	f7ff ffa2 	bl	8080f6c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 8081028:	f001 f88e 	bl	8082148 <_Z22__fetch_global_Serial1v>
 808102c:	9901      	ldr	r1, [sp, #4]
 808102e:	f001 f885 	bl	808213c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 8081032:	f001 f889 	bl	8082148 <_Z22__fetch_global_Serial1v>
 8081036:	e7db      	b.n	8080ff0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 8081038:	2000      	movs	r0, #0
 808103a:	e7d9      	b.n	8080ff0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 808103c:	080829af 	.word	0x080829af
 8081040:	080829b6 	.word	0x080829b6
 8081044:	080829b9 	.word	0x080829b9

08081048 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 8081048:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 808104a:	2614      	movs	r6, #20
 808104c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 8081050:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 8081052:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8081056:	42ae      	cmp	r6, r5
 8081058:	d005      	beq.n	8081066 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 808105a:	f105 0008 	add.w	r0, r5, #8
 808105e:	f7ff fff3 	bl	8081048 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8081062:	3514      	adds	r5, #20
 8081064:	e7f7      	b.n	8081056 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 8081066:	6820      	ldr	r0, [r4, #0]
 8081068:	f7ff fbbc 	bl	80807e4 <free>
}
 808106c:	4620      	mov	r0, r4
 808106e:	bd70      	pop	{r4, r5, r6, pc}

08081070 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 8081070:	b570      	push	{r4, r5, r6, lr}
 8081072:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 8081074:	e9d0 5300 	ldrd	r5, r3, [r0]
 8081078:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 808107c:	42ae      	cmp	r6, r5
 808107e:	d004      	beq.n	808108a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 8081080:	4628      	mov	r0, r5
 8081082:	f7ff fc87 	bl	8080994 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 8081086:	3510      	adds	r5, #16
 8081088:	e7f8      	b.n	808107c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 808108a:	6820      	ldr	r0, [r4, #0]
 808108c:	f7ff fbaa 	bl	80807e4 <free>
}
 8081090:	4620      	mov	r0, r4
 8081092:	bd70      	pop	{r4, r5, r6, pc}

08081094 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 8081094:	b510      	push	{r4, lr}
 8081096:	4604      	mov	r4, r0
 8081098:	300c      	adds	r0, #12
 808109a:	f7ff ffd5 	bl	8081048 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 808109e:	4620      	mov	r0, r4
 80810a0:	f7ff ffe6 	bl	8081070 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80810a4:	4620      	mov	r0, r4
 80810a6:	bd10      	pop	{r4, pc}

080810a8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 80810a8:	b510      	push	{r4, lr}
 80810aa:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 80810ac:	4b03      	ldr	r3, [pc, #12]	; (80810bc <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80810ae:	f840 3b04 	str.w	r3, [r0], #4
 80810b2:	f7ff ffef 	bl	8081094 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 80810b6:	4620      	mov	r0, r4
 80810b8:	bd10      	pop	{r4, pc}
 80810ba:	bf00      	nop
 80810bc:	08082954 	.word	0x08082954

080810c0 <_ZN5spark16StreamLogHandlerD0Ev>:
 80810c0:	b510      	push	{r4, lr}
 80810c2:	4604      	mov	r4, r0
 80810c4:	f7ff fff0 	bl	80810a8 <_ZN5spark16StreamLogHandlerD1Ev>
 80810c8:	4620      	mov	r0, r4
 80810ca:	2124      	movs	r1, #36	; 0x24
 80810cc:	f001 facb 	bl	8082666 <_ZdlPvj>
 80810d0:	4620      	mov	r0, r4
 80810d2:	bd10      	pop	{r4, pc}

080810d4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 80810d4:	b510      	push	{r4, lr}
 80810d6:	4604      	mov	r4, r0
 80810d8:	4b02      	ldr	r3, [pc, #8]	; (80810e4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80810da:	6003      	str	r3, [r0, #0]
 80810dc:	f7ff ffe4 	bl	80810a8 <_ZN5spark16StreamLogHandlerD1Ev>
 80810e0:	4620      	mov	r0, r4
 80810e2:	bd10      	pop	{r4, pc}
 80810e4:	08082a5c 	.word	0x08082a5c

080810e8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80810e8:	b510      	push	{r4, lr}
 80810ea:	4604      	mov	r4, r0
 80810ec:	f7ff fff2 	bl	80810d4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80810f0:	4620      	mov	r0, r4
 80810f2:	2124      	movs	r1, #36	; 0x24
 80810f4:	f001 fab7 	bl	8082666 <_ZdlPvj>
 80810f8:	4620      	mov	r0, r4
 80810fa:	bd10      	pop	{r4, pc}

080810fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 80810fc:	2200      	movs	r2, #0
 80810fe:	e9c0 2200 	strd	r2, r2, [r0]
 8081102:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 8081104:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 8081106:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8081108:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 808110a:	6004      	str	r4, [r0, #0]
 808110c:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808110e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8081110:	6044      	str	r4, [r0, #4]
 8081112:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081114:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 8081116:	6084      	str	r4, [r0, #8]
}
 8081118:	bd10      	pop	{r4, pc}

0808111a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 808111a:	b510      	push	{r4, lr}
 808111c:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 808111e:	6803      	ldr	r3, [r0, #0]
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8081120:	6818      	ldr	r0, [r3, #0]
 8081122:	f7ff f9e9 	bl	80804f8 <os_mutex_recursive_unlock>
 8081126:	4620      	mov	r0, r4
 8081128:	bd10      	pop	{r4, pc}
	...

0808112c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 808112c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081130:	b087      	sub	sp, #28
 8081132:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8081134:	4b1c      	ldr	r3, [pc, #112]	; (80811a8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 8081136:	4680      	mov	r8, r0
 8081138:	685b      	ldr	r3, [r3, #4]
 808113a:	4689      	mov	r9, r1
 808113c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8081140:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 8081142:	b96b      	cbnz	r3, 8081160 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 8081144:	f7ff fe86 	bl	8080e54 <_ZN5spark10LogManager8instanceEv>
 8081148:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 808114a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 808114e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081150:	9305      	str	r3, [sp, #20]
 8081152:	f7ff f9c9 	bl	80804e8 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 8081156:	7b23      	ldrb	r3, [r4, #12]
 8081158:	b12b      	cbz	r3, 8081166 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 808115a:	a805      	add	r0, sp, #20
 808115c:	f7ff ffdd 	bl	808111a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 8081160:	b007      	add	sp, #28
 8081162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 8081166:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 8081168:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 808116c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 808116e:	e9d4 5300 	ldrd	r5, r3, [r4]
 8081172:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 8081176:	45aa      	cmp	sl, r5
 8081178:	d012      	beq.n	80811a0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 808117a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 808117e:	4631      	mov	r1, r6
 8081180:	1d38      	adds	r0, r7, #4
 8081182:	f7ff fdeb 	bl	8080d5c <_ZNK5spark6detail9LogFilter5levelEPKc>
 8081186:	4581      	cmp	r9, r0
 8081188:	d3f5      	bcc.n	8081176 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 808118a:	9a03      	ldr	r2, [sp, #12]
 808118c:	683b      	ldr	r3, [r7, #0]
 808118e:	9200      	str	r2, [sp, #0]
 8081190:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8081194:	464a      	mov	r2, r9
 8081196:	4633      	mov	r3, r6
 8081198:	4641      	mov	r1, r8
 808119a:	4638      	mov	r0, r7
 808119c:	47d8      	blx	fp
 808119e:	e7ea      	b.n	8081176 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 80811a0:	2300      	movs	r3, #0
 80811a2:	7323      	strb	r3, [r4, #12]
 80811a4:	e7d9      	b.n	808115a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 80811a6:	bf00      	nop
 80811a8:	e000ed00 	.word	0xe000ed00

080811ac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80811ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80811b0:	469b      	mov	fp, r3
 80811b2:	4b1a      	ldr	r3, [pc, #104]	; (808121c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 80811b4:	4680      	mov	r8, r0
 80811b6:	685b      	ldr	r3, [r3, #4]
 80811b8:	4689      	mov	r9, r1
 80811ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80811be:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 80811c0:	b96b      	cbnz	r3, 80811de <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 80811c2:	f7ff fe47 	bl	8080e54 <_ZN5spark10LogManager8instanceEv>
 80811c6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80811c8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80811cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80811ce:	9301      	str	r3, [sp, #4]
 80811d0:	f7ff f98a 	bl	80804e8 <os_mutex_recursive_lock>
        if (that->isActive()) {
 80811d4:	7b23      	ldrb	r3, [r4, #12]
 80811d6:	b12b      	cbz	r3, 80811e4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 80811d8:	a801      	add	r0, sp, #4
 80811da:	f7ff ff9e 	bl	808111a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80811de:	b003      	add	sp, #12
 80811e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 80811e4:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 80811e6:	b2f6      	uxtb	r6, r6
 80811e8:	7323      	strb	r3, [r4, #12]
 80811ea:	e9d4 5300 	ldrd	r5, r3, [r4]
 80811ee:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80811f2:	4555      	cmp	r5, sl
 80811f4:	d00e      	beq.n	8081214 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 80811f6:	f855 7b04 	ldr.w	r7, [r5], #4
 80811fa:	4659      	mov	r1, fp
 80811fc:	1d38      	adds	r0, r7, #4
 80811fe:	f7ff fdad 	bl	8080d5c <_ZNK5spark6detail9LogFilter5levelEPKc>
 8081202:	4286      	cmp	r6, r0
 8081204:	d3f5      	bcc.n	80811f2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 8081206:	683b      	ldr	r3, [r7, #0]
 8081208:	464a      	mov	r2, r9
 808120a:	4641      	mov	r1, r8
 808120c:	4638      	mov	r0, r7
 808120e:	68db      	ldr	r3, [r3, #12]
 8081210:	4798      	blx	r3
 8081212:	e7ee      	b.n	80811f2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 8081214:	2300      	movs	r3, #0
 8081216:	7323      	strb	r3, [r4, #12]
 8081218:	e7de      	b.n	80811d8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 808121a:	bf00      	nop
 808121c:	e000ed00 	.word	0xe000ed00

08081220 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 8081220:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8081224:	4b16      	ldr	r3, [pc, #88]	; (8081280 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 8081226:	4605      	mov	r5, r0
 8081228:	685b      	ldr	r3, [r3, #4]
 808122a:	460f      	mov	r7, r1
 808122c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 8081230:	bb1b      	cbnz	r3, 808127a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 8081232:	f7ff fe0f 	bl	8080e54 <_ZN5spark10LogManager8instanceEv>
 8081236:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8081238:	f100 0324 	add.w	r3, r0, #36	; 0x24
 808123c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 808123e:	9301      	str	r3, [sp, #4]
 8081240:	f7ff f952 	bl	80804e8 <os_mutex_recursive_lock>
 8081244:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 8081248:	2446      	movs	r4, #70	; 0x46
 808124a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 808124e:	45b0      	cmp	r8, r6
 8081250:	d109      	bne.n	8081266 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 8081252:	a801      	add	r0, sp, #4
 8081254:	f7ff ff61 	bl	808111a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 8081258:	42a5      	cmp	r5, r4
 808125a:	bfb4      	ite	lt
 808125c:	2000      	movlt	r0, #0
 808125e:	2001      	movge	r0, #1
}
 8081260:	b002      	add	sp, #8
 8081262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 8081266:	f856 0b04 	ldr.w	r0, [r6], #4
 808126a:	4639      	mov	r1, r7
 808126c:	3004      	adds	r0, #4
 808126e:	f7ff fd75 	bl	8080d5c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 8081272:	4284      	cmp	r4, r0
 8081274:	bfa8      	it	ge
 8081276:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 8081278:	e7e9      	b.n	808124e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 808127a:	2000      	movs	r0, #0
 808127c:	e7f0      	b.n	8081260 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 808127e:	bf00      	nop
 8081280:	e000ed00 	.word	0xe000ed00

08081284 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 8081284:	460b      	mov	r3, r1
 8081286:	b570      	push	{r4, r5, r6, lr}
 8081288:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 808128a:	c805      	ldmia	r0, {r0, r2}
 808128c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 8081290:	4282      	cmp	r2, r0
 8081292:	d007      	beq.n	80812a4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 8081294:	4601      	mov	r1, r0
            if (*p == value) {
 8081296:	681d      	ldr	r5, [r3, #0]
 8081298:	f851 6b04 	ldr.w	r6, [r1], #4
 808129c:	42ae      	cmp	r6, r5
 808129e:	d003      	beq.n	80812a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 80812a0:	4608      	mov	r0, r1
 80812a2:	e7f5      	b.n	8081290 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 80812a4:	2000      	movs	r0, #0
}
 80812a6:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 80812a8:	1a52      	subs	r2, r2, r1
 80812aa:	f001 f9fd 	bl	80826a8 <memmove>
    --size_;
 80812ae:	6863      	ldr	r3, [r4, #4]
    return true;
 80812b0:	2001      	movs	r0, #1
    --size_;
 80812b2:	3b01      	subs	r3, #1
 80812b4:	6063      	str	r3, [r4, #4]
    return true;
 80812b6:	e7f6      	b.n	80812a6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

080812b8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 80812b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80812ba:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80812bc:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80812c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 80812c2:	9101      	str	r1, [sp, #4]
 80812c4:	9303      	str	r3, [sp, #12]
 80812c6:	f7ff f90f 	bl	80804e8 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80812ca:	4620      	mov	r0, r4
 80812cc:	a901      	add	r1, sp, #4
 80812ce:	f7ff ffd9 	bl	8081284 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80812d2:	b118      	cbz	r0, 80812dc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 80812d4:	6863      	ldr	r3, [r4, #4]
 80812d6:	b90b      	cbnz	r3, 80812dc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 80812d8:	f7ff fde8 	bl	8080eac <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80812dc:	a803      	add	r0, sp, #12
 80812de:	f7ff ff1c 	bl	808111a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80812e2:	b004      	add	sp, #16
 80812e4:	bd10      	pop	{r4, pc}

080812e6 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 80812e6:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 80812e8:	b570      	push	{r4, r5, r6, lr}
 80812ea:	4604      	mov	r4, r0
 80812ec:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80812f0:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80812f4:	42ae      	cmp	r6, r5
 80812f6:	d015      	beq.n	8081324 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 80812f8:	4620      	mov	r0, r4
 80812fa:	f105 0110 	add.w	r1, r5, #16
 80812fe:	f7ff ffc1 	bl	8081284 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 8081302:	6863      	ldr	r3, [r4, #4]
 8081304:	b90b      	cbnz	r3, 808130a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 8081306:	f7ff fdd1 	bl	8080eac <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 808130a:	69e0      	ldr	r0, [r4, #28]
 808130c:	6929      	ldr	r1, [r5, #16]
 808130e:	6803      	ldr	r3, [r0, #0]
 8081310:	68db      	ldr	r3, [r3, #12]
 8081312:	4798      	blx	r3
        if (h.stream) {
 8081314:	6969      	ldr	r1, [r5, #20]
 8081316:	b119      	cbz	r1, 8081320 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 8081318:	6a20      	ldr	r0, [r4, #32]
 808131a:	6803      	ldr	r3, [r0, #0]
 808131c:	68db      	ldr	r3, [r3, #12]
 808131e:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 8081320:	3518      	adds	r5, #24
 8081322:	e7e7      	b.n	80812f4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 8081324:	2618      	movs	r6, #24
 8081326:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 808132a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 808132e:	42ae      	cmp	r6, r5
 8081330:	d004      	beq.n	808133c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 8081332:	4628      	mov	r0, r5
 8081334:	f7ff fb2e 	bl	8080994 <_ZN6StringD1Ev>
 8081338:	3518      	adds	r5, #24
 808133a:	e7f8      	b.n	808132e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 808133c:	2300      	movs	r3, #0
 808133e:	6163      	str	r3, [r4, #20]
}
 8081340:	bd70      	pop	{r4, r5, r6, pc}

08081342 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 8081342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8081344:	4604      	mov	r4, r0
    resetSystemCallbacks();
 8081346:	f7ff fdb1 	bl	8080eac <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 808134a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 808134e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8081350:	9301      	str	r3, [sp, #4]
 8081352:	f7ff f8c9 	bl	80804e8 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 8081356:	4620      	mov	r0, r4
 8081358:	f7ff ffc5 	bl	80812e6 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 808135c:	a801      	add	r0, sp, #4
 808135e:	f7ff fedc 	bl	808111a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 8081362:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8081364:	b108      	cbz	r0, 808136a <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 8081366:	f7ff f8b7 	bl	80804d8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 808136a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 808136e:	2618      	movs	r6, #24
 8081370:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8081374:	42ae      	cmp	r6, r5
 8081376:	d004      	beq.n	8081382 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 8081378:	4628      	mov	r0, r5
 808137a:	f7ff fb0b 	bl	8080994 <_ZN6StringD1Ev>
 808137e:	3518      	adds	r5, #24
 8081380:	e7f8      	b.n	8081374 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 8081382:	6920      	ldr	r0, [r4, #16]
 8081384:	f7ff fa2e 	bl	80807e4 <free>
 8081388:	6820      	ldr	r0, [r4, #0]
 808138a:	f7ff fa2b 	bl	80807e4 <free>
}
 808138e:	4620      	mov	r0, r4
 8081390:	b002      	add	sp, #8
 8081392:	bd70      	pop	{r4, r5, r6, pc}

08081394 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 8081394:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 8081396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081398:	4606      	mov	r6, r0
 808139a:	460c      	mov	r4, r1
 808139c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 808139e:	d927      	bls.n	80813f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 80813a0:	4290      	cmp	r0, r2
 80813a2:	d226      	bcs.n	80813f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 80813a4:	2600      	movs	r6, #0
            --end;
 80813a6:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80813aa:	1a6c      	subs	r4, r5, r1
 80813ac:	f1a1 0714 	sub.w	r7, r1, #20
 80813b0:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80813b2:	42af      	cmp	r7, r5
 80813b4:	d03d      	beq.n	8081432 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 80813b6:	b1a4      	cbz	r4, 80813e2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 80813b8:	682b      	ldr	r3, [r5, #0]
 80813ba:	6023      	str	r3, [r4, #0]
 80813bc:	88ab      	ldrh	r3, [r5, #4]
 80813be:	80a3      	strh	r3, [r4, #4]
 80813c0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 80813c4:	e9c4 6602 	strd	r6, r6, [r4, #8]
 80813c8:	6126      	str	r6, [r4, #16]
 80813ca:	80e3      	strh	r3, [r4, #6]
 80813cc:	68ab      	ldr	r3, [r5, #8]
 80813ce:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80813d0:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80813d2:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80813d4:	68ea      	ldr	r2, [r5, #12]
 80813d6:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80813d8:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80813da:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80813dc:	692a      	ldr	r2, [r5, #16]
 80813de:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80813e0:	612b      	str	r3, [r5, #16]
 80813e2:	f105 0008 	add.w	r0, r5, #8
 80813e6:	f7ff fe2f 	bl	8081048 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 80813ea:	3d14      	subs	r5, #20
 80813ec:	3c14      	subs	r4, #20
 80813ee:	e7e0      	b.n	80813b2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 80813f0:	d01f      	beq.n	8081432 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 80813f2:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 80813f4:	42ac      	cmp	r4, r5
 80813f6:	d01c      	beq.n	8081432 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 80813f8:	b1a6      	cbz	r6, 8081424 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 80813fa:	6823      	ldr	r3, [r4, #0]
 80813fc:	6033      	str	r3, [r6, #0]
 80813fe:	88a3      	ldrh	r3, [r4, #4]
 8081400:	80b3      	strh	r3, [r6, #4]
 8081402:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 8081406:	e9c6 7702 	strd	r7, r7, [r6, #8]
 808140a:	6137      	str	r7, [r6, #16]
 808140c:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 808140e:	68a3      	ldr	r3, [r4, #8]
 8081410:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081412:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081414:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081416:	68e2      	ldr	r2, [r4, #12]
 8081418:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808141a:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808141c:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 808141e:	6922      	ldr	r2, [r4, #16]
 8081420:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8081422:	6123      	str	r3, [r4, #16]
 8081424:	f104 0008 	add.w	r0, r4, #8
 8081428:	f7ff fe0e 	bl	8081048 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 808142c:	3414      	adds	r4, #20
 808142e:	3614      	adds	r6, #20
 8081430:	e7e0      	b.n	80813f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 8081432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081434 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 8081434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8081436:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 808143a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 808143c:	4604      	mov	r4, r0
 808143e:	460e      	mov	r6, r1
 8081440:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8081442:	db0d      	blt.n	8081460 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 8081444:	3501      	adds	r5, #1
        if (n > 0) {
 8081446:	2d00      	cmp	r5, #0
 8081448:	6800      	ldr	r0, [r0, #0]
 808144a:	dd04      	ble.n	8081456 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 808144c:	00a9      	lsls	r1, r5, #2
 808144e:	f7ff f9d1 	bl	80807f4 <realloc>
            if (!d) {
 8081452:	b918      	cbnz	r0, 808145c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 8081454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 8081456:	f7ff f9c5 	bl	80807e4 <free>
        T* d = nullptr;
 808145a:	2000      	movs	r0, #0
        data_ = d;
 808145c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 808145e:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 8081460:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 8081462:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 8081464:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 8081468:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 808146a:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 808146e:	1d08      	adds	r0, r1, #4
 8081470:	f001 f91a 	bl	80826a8 <memmove>
    new(p) T(std::move(value));
 8081474:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 8081478:	6863      	ldr	r3, [r4, #4]
    return true;
 808147a:	2001      	movs	r0, #1
    ++size_;
 808147c:	3301      	adds	r3, #1
 808147e:	6063      	str	r3, [r4, #4]
    return true;
 8081480:	e7e8      	b.n	8081454 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

08081482 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 8081482:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081484:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 8081486:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 808148a:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 808148c:	460d      	mov	r5, r1
 808148e:	9301      	str	r3, [sp, #4]
 8081490:	f7ff f82a 	bl	80804e8 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 8081494:	e9d4 3100 	ldrd	r3, r1, [r4]
 8081498:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 808149c:	4283      	cmp	r3, r0
 808149e:	461a      	mov	r2, r3
 80814a0:	d00a      	beq.n	80814b8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 80814a2:	6812      	ldr	r2, [r2, #0]
 80814a4:	3304      	adds	r3, #4
 80814a6:	42aa      	cmp	r2, r5
 80814a8:	d1f8      	bne.n	808149c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 80814aa:	a801      	add	r0, sp, #4
 80814ac:	f7ff fe35 	bl	808111a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 80814b0:	2500      	movs	r5, #0
}
 80814b2:	4628      	mov	r0, r5
 80814b4:	b003      	add	sp, #12
 80814b6:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 80814b8:	462a      	mov	r2, r5
 80814ba:	4620      	mov	r0, r4
 80814bc:	f7ff ffba 	bl	8081434 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80814c0:	4605      	mov	r5, r0
 80814c2:	2800      	cmp	r0, #0
 80814c4:	d0f1      	beq.n	80814aa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 80814c6:	6863      	ldr	r3, [r4, #4]
 80814c8:	2b01      	cmp	r3, #1
 80814ca:	d101      	bne.n	80814d0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 80814cc:	f7ff fce2 	bl	8080e94 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80814d0:	a801      	add	r0, sp, #4
 80814d2:	f7ff fe22 	bl	808111a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80814d6:	e7ec      	b.n	80814b2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

080814d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80814d8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80814da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80814dc:	4604      	mov	r4, r0
 80814de:	460d      	mov	r5, r1
 80814e0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80814e2:	d914      	bls.n	808150e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80814e4:	4290      	cmp	r0, r2
 80814e6:	d213      	bcs.n	8081510 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 80814e8:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 80814ec:	1a75      	subs	r5, r6, r1
 80814ee:	f1a1 0710 	sub.w	r7, r1, #16
 80814f2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80814f4:	42b7      	cmp	r7, r6
 80814f6:	d018      	beq.n	808152a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80814f8:	b11c      	cbz	r4, 8081502 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80814fa:	4631      	mov	r1, r6
 80814fc:	4620      	mov	r0, r4
 80814fe:	f7ff fab0 	bl	8080a62 <_ZN6StringC1EOS_>
                end->~T();
 8081502:	4630      	mov	r0, r6
 8081504:	f7ff fa46 	bl	8080994 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 8081508:	3e10      	subs	r6, #16
 808150a:	3c10      	subs	r4, #16
 808150c:	e7f2      	b.n	80814f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 808150e:	d00c      	beq.n	808152a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 8081510:	42b5      	cmp	r5, r6
 8081512:	d00a      	beq.n	808152a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 8081514:	b11c      	cbz	r4, 808151e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 8081516:	4629      	mov	r1, r5
 8081518:	4620      	mov	r0, r4
 808151a:	f7ff faa2 	bl	8080a62 <_ZN6StringC1EOS_>
                p->~T();
 808151e:	4628      	mov	r0, r5
 8081520:	f7ff fa38 	bl	8080994 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 8081524:	3510      	adds	r5, #16
 8081526:	3410      	adds	r4, #16
 8081528:	e7f2      	b.n	8081510 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 808152a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808152c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 808152c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 808152e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 8081530:	4605      	mov	r5, r0
        if (n > 0) {
 8081532:	dd11      	ble.n	8081558 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 8081534:	0130      	lsls	r0, r6, #4
 8081536:	f7ff f94d 	bl	80807d4 <malloc>
            if (!d) {
 808153a:	4604      	mov	r4, r0
 808153c:	b158      	cbz	r0, 8081556 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 808153e:	e9d5 1200 	ldrd	r1, r2, [r5]
 8081542:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8081546:	f7ff ffc7 	bl	80814d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 808154a:	6828      	ldr	r0, [r5, #0]
 808154c:	f7ff f94a 	bl	80807e4 <free>
        return true;
 8081550:	2001      	movs	r0, #1
        data_ = d;
 8081552:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 8081554:	60ae      	str	r6, [r5, #8]
    }
 8081556:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 8081558:	2400      	movs	r4, #0
 808155a:	e7f6      	b.n	808154a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

0808155c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 808155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081560:	4691      	mov	r9, r2
        capacity_(0) {
 8081562:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 8081564:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8081566:	b097      	sub	sp, #92	; 0x5c
 8081568:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 808156a:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 808156e:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 8081570:	4299      	cmp	r1, r3
        capacity_(0) {
 8081572:	e9c0 3300 	strd	r3, r3, [r0]
 8081576:	e9c0 3302 	strd	r3, r3, [r0, #8]
 808157a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 808157e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 8081582:	7602      	strb	r2, [r0, #24]
 8081584:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 8081586:	dc23      	bgt.n	80815d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 8081588:	e9d9 5700 	ldrd	r5, r7, [r9]
 808158c:	2314      	movs	r3, #20
 808158e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 8081592:	42af      	cmp	r7, r5
 8081594:	d03b      	beq.n	808160e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 8081596:	4629      	mov	r1, r5
 8081598:	a80d      	add	r0, sp, #52	; 0x34
 808159a:	f7ff fa62 	bl	8080a62 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 808159e:	a90d      	add	r1, sp, #52	; 0x34
 80815a0:	a811      	add	r0, sp, #68	; 0x44
 80815a2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80815a4:	f7ff fa5d 	bl	8080a62 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80815a8:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 80815ac:	4299      	cmp	r1, r3
 80815ae:	da1b      	bge.n	80815e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 80815b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 80815b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 80815b4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80815b8:	4631      	mov	r1, r6
 80815ba:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80815be:	f106 0010 	add.w	r0, r6, #16
 80815c2:	f7ff ff89 	bl	80814d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80815c6:	b9ee      	cbnz	r6, 8081604 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 80815c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80815ca:	3301      	adds	r3, #1
 80815cc:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 80815ce:	e011      	b.n	80815f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 80815d0:	a80a      	add	r0, sp, #40	; 0x28
 80815d2:	f7ff ffab 	bl	808152c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80815d6:	2800      	cmp	r0, #0
 80815d8:	d1d6      	bne.n	8081588 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 80815da:	a80a      	add	r0, sp, #40	; 0x28
 80815dc:	f7ff fd48 	bl	8081070 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80815e0:	4620      	mov	r0, r4
 80815e2:	b017      	add	sp, #92	; 0x5c
 80815e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80815e8:	3101      	adds	r1, #1
 80815ea:	a80a      	add	r0, sp, #40	; 0x28
 80815ec:	f7ff ff9e 	bl	808152c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80815f0:	2800      	cmp	r0, #0
 80815f2:	d1dd      	bne.n	80815b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 80815f4:	a811      	add	r0, sp, #68	; 0x44
 80815f6:	f7ff f9cd 	bl	8080994 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 80815fa:	a80d      	add	r0, sp, #52	; 0x34
 80815fc:	f7ff f9ca 	bl	8080994 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 8081600:	3514      	adds	r5, #20
 8081602:	e7c6      	b.n	8081592 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 8081604:	4630      	mov	r0, r6
 8081606:	a911      	add	r1, sp, #68	; 0x44
 8081608:	f7ff fa2b 	bl	8080a62 <_ZN6StringC1EOS_>
 808160c:	e7dc      	b.n	80815c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 808160e:	2600      	movs	r6, #0
 8081610:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 8081614:	4637      	mov	r7, r6
 8081616:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 808161a:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 808161c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8081620:	429e      	cmp	r6, r3
 8081622:	f280 8097 	bge.w	8081754 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 8081626:	0133      	lsls	r3, r6, #4
 8081628:	58d3      	ldr	r3, [r2, r3]
 808162a:	9308      	str	r3, [sp, #32]
        if (!category) {
 808162c:	b90b      	cbnz	r3, 8081632 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 808162e:	3601      	adds	r6, #1
 8081630:	e7f4      	b.n	808161c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 8081632:	fb0a f306 	mul.w	r3, sl, r6
 8081636:	9709      	str	r7, [sp, #36]	; 0x24
 8081638:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 808163a:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 808163c:	a909      	add	r1, sp, #36	; 0x24
 808163e:	a808      	add	r0, sp, #32
 8081640:	f7ff fac5 	bl	8080bce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8081644:	4683      	mov	fp, r0
 8081646:	2800      	cmp	r0, #0
 8081648:	d0f1      	beq.n	808162e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 808164a:	4601      	mov	r1, r0
 808164c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808164e:	4628      	mov	r0, r5
 8081650:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 8081654:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 8081658:	f7ff fb42 	bl	8080ce0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 808165c:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 8081660:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8081662:	f1b8 0f00 	cmp.w	r8, #0
 8081666:	d166      	bne.n	8081736 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 8081668:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 808166c:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 8081670:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8081674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8081678:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 808167c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8081680:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8081684:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 8081688:	4293      	cmp	r3, r2
 808168a:	db1a      	blt.n	80816c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 808168c:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 8081690:	f1bb 0f00 	cmp.w	fp, #0
 8081694:	dd4a      	ble.n	808172c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 8081696:	fb0a f00b 	mul.w	r0, sl, fp
 808169a:	f7ff f89b 	bl	80807d4 <malloc>
            if (!d) {
 808169e:	9004      	str	r0, [sp, #16]
 80816a0:	2800      	cmp	r0, #0
 80816a2:	d045      	beq.n	8081730 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 80816a4:	e9d5 1200 	ldrd	r1, r2, [r5]
 80816a8:	fb0a 1202 	mla	r2, sl, r2, r1
 80816ac:	f7ff fe72 	bl	8081394 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80816b0:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 80816b2:	6828      	ldr	r0, [r5, #0]
 80816b4:	9304      	str	r3, [sp, #16]
 80816b6:	f7ff f895 	bl	80807e4 <free>
        data_ = d;
 80816ba:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 80816bc:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 80816c0:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 80816c2:	9b01      	ldr	r3, [sp, #4]
 80816c4:	f8d5 b000 	ldr.w	fp, [r5]
 80816c8:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 80816cc:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 80816ce:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 80816d2:	f101 0014 	add.w	r0, r1, #20
 80816d6:	fb0a b202 	mla	r2, sl, r2, fp
 80816da:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 80816dc:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 80816de:	f7ff fe59 	bl	8081394 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80816e2:	9904      	ldr	r1, [sp, #16]
 80816e4:	b1a9      	cbz	r1, 8081712 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 80816e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80816e8:	9b05      	ldr	r3, [sp, #20]
 80816ea:	f84b 2003 	str.w	r2, [fp, r3]
 80816ee:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80816f2:	808b      	strh	r3, [r1, #4]
 80816f4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 80816f8:	e9c1 7702 	strd	r7, r7, [r1, #8]
 80816fc:	610f      	str	r7, [r1, #16]
 80816fe:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 8081700:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8081702:	608b      	str	r3, [r1, #8]
 8081704:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 8081706:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 8081708:	60cb      	str	r3, [r1, #12]
 808170a:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 808170c:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 808170e:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8081710:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 8081712:	686b      	ldr	r3, [r5, #4]
 8081714:	3301      	adds	r3, #1
 8081716:	606b      	str	r3, [r5, #4]
 8081718:	a813      	add	r0, sp, #76	; 0x4c
 808171a:	f7ff fc95 	bl	8081048 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 808171e:	f1b8 0f00 	cmp.w	r8, #0
 8081722:	d008      	beq.n	8081736 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 8081724:	a80d      	add	r0, sp, #52	; 0x34
 8081726:	f7ff fc8f 	bl	8081048 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 808172a:	e756      	b.n	80815da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 808172c:	4643      	mov	r3, r8
 808172e:	e7c0      	b.n	80816b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8081730:	f04f 0801 	mov.w	r8, #1
 8081734:	e7f0      	b.n	8081718 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 8081736:	9b01      	ldr	r3, [sp, #4]
 8081738:	682d      	ldr	r5, [r5, #0]
 808173a:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 808173e:	9b08      	ldr	r3, [sp, #32]
 8081740:	781b      	ldrb	r3, [r3, #0]
 8081742:	b92b      	cbnz	r3, 8081750 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 8081744:	f8d9 3000 	ldr.w	r3, [r9]
 8081748:	9a02      	ldr	r2, [sp, #8]
 808174a:	4413      	add	r3, r2
 808174c:	7c1b      	ldrb	r3, [r3, #16]
 808174e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 8081750:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 8081752:	e773      	b.n	808163c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081754:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081756:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081758:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 808175a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808175c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808175e:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 8081760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 8081762:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081764:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081766:	60a2      	str	r2, [r4, #8]
 8081768:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 808176a:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808176c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 808176e:	60e2      	str	r2, [r4, #12]
 8081770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 8081772:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081774:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081776:	6122      	str	r2, [r4, #16]
 8081778:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 808177a:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 808177c:	9b03      	ldr	r3, [sp, #12]
 808177e:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 8081780:	6162      	str	r2, [r4, #20]
 8081782:	7623      	strb	r3, [r4, #24]
 8081784:	e7ce      	b.n	8081724 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

08081788 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 8081788:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 808178a:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 808178c:	460e      	mov	r6, r1
 808178e:	4604      	mov	r4, r0
        filter_(level, filters) {
 8081790:	4b08      	ldr	r3, [pc, #32]	; (80817b4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 8081792:	4611      	mov	r1, r2
 8081794:	f845 3b04 	str.w	r3, [r5], #4
 8081798:	a801      	add	r0, sp, #4
 808179a:	f7fe fdda 	bl	8080352 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 808179e:	4631      	mov	r1, r6
 80817a0:	aa01      	add	r2, sp, #4
 80817a2:	4628      	mov	r0, r5
 80817a4:	f7ff feda 	bl	808155c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80817a8:	a801      	add	r0, sp, #4
 80817aa:	f7fe fd91 	bl	80802d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80817ae:	4620      	mov	r0, r4
 80817b0:	b004      	add	sp, #16
 80817b2:	bd70      	pop	{r4, r5, r6, pc}
 80817b4:	08082954 	.word	0x08082954

080817b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 80817b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80817ba:	460f      	mov	r7, r1
 80817bc:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80817be:	4638      	mov	r0, r7
 80817c0:	4925      	ldr	r1, [pc, #148]	; (8081858 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 80817c2:	4616      	mov	r6, r2
 80817c4:	461d      	mov	r5, r3
 80817c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80817c8:	f000 ffcb 	bl	8082762 <strcmp>
 80817cc:	bb00      	cbnz	r0, 8081810 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 80817ce:	b1e4      	cbz	r4, 808180a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 80817d0:	4629      	mov	r1, r5
 80817d2:	4668      	mov	r0, sp
 80817d4:	f7ff fc92 	bl	80810fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80817d8:	2024      	movs	r0, #36	; 0x24
 80817da:	4920      	ldr	r1, [pc, #128]	; (808185c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80817dc:	f000 ff45 	bl	808266a <_ZnwjRKSt9nothrow_t>
 80817e0:	4605      	mov	r5, r0
 80817e2:	b170      	cbz	r0, 8081802 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80817e4:	4669      	mov	r1, sp
 80817e6:	a803      	add	r0, sp, #12
 80817e8:	f7fe fdb3 	bl	8080352 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80817ec:	4631      	mov	r1, r6
 80817ee:	aa03      	add	r2, sp, #12
 80817f0:	4628      	mov	r0, r5
 80817f2:	f7ff ffc9 	bl	8081788 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80817f6:	a803      	add	r0, sp, #12
 80817f8:	f7fe fd6a 	bl	80802d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 80817fc:	4b18      	ldr	r3, [pc, #96]	; (8081860 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 80817fe:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 8081800:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 8081802:	4668      	mov	r0, sp
 8081804:	f7fe fd64 	bl	80802d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081808:	462c      	mov	r4, r5
}
 808180a:	4620      	mov	r0, r4
 808180c:	b007      	add	sp, #28
 808180e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 8081810:	4638      	mov	r0, r7
 8081812:	4914      	ldr	r1, [pc, #80]	; (8081864 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 8081814:	f000 ffa5 	bl	8082762 <strcmp>
 8081818:	b9e0      	cbnz	r0, 8081854 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 808181a:	2c00      	cmp	r4, #0
 808181c:	d0f5      	beq.n	808180a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 808181e:	4629      	mov	r1, r5
 8081820:	4668      	mov	r0, sp
 8081822:	f7ff fc6b 	bl	80810fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8081826:	2024      	movs	r0, #36	; 0x24
 8081828:	490c      	ldr	r1, [pc, #48]	; (808185c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 808182a:	f000 ff1e 	bl	808266a <_ZnwjRKSt9nothrow_t>
 808182e:	4605      	mov	r5, r0
 8081830:	2800      	cmp	r0, #0
 8081832:	d0e6      	beq.n	8081802 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 8081834:	4669      	mov	r1, sp
 8081836:	a803      	add	r0, sp, #12
 8081838:	f7fe fd8b 	bl	8080352 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 808183c:	4631      	mov	r1, r6
 808183e:	aa03      	add	r2, sp, #12
 8081840:	4628      	mov	r0, r5
 8081842:	f7ff ffa1 	bl	8081788 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8081846:	a803      	add	r0, sp, #12
 8081848:	f7fe fd42 	bl	80802d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 808184c:	4b06      	ldr	r3, [pc, #24]	; (8081868 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 808184e:	622c      	str	r4, [r5, #32]
 8081850:	602b      	str	r3, [r5, #0]
}
 8081852:	e7d6      	b.n	8081802 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 8081854:	2400      	movs	r4, #0
 8081856:	e7d8      	b.n	808180a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 8081858:	080829c1 	.word	0x080829c1
 808185c:	08082b9d 	.word	0x08082b9d
 8081860:	08082a5c 	.word	0x08082a5c
 8081864:	080829c5 	.word	0x080829c5
 8081868:	08082a44 	.word	0x08082a44

0808186c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 808186c:	4b01      	ldr	r3, [pc, #4]	; (8081874 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808186e:	4a02      	ldr	r2, [pc, #8]	; (8081878 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8081870:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8081872:	4770      	bx	lr
 8081874:	200000c8 	.word	0x200000c8
 8081878:	080829d6 	.word	0x080829d6

0808187c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 808187c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081880:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 8081882:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8081886:	4604      	mov	r4, r0
 8081888:	460e      	mov	r6, r1
 808188a:	4617      	mov	r7, r2
 808188c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 808188e:	f000 fb2f 	bl	8081ef0 <_Z16_fetch_usbserialv>
 8081892:	4581      	cmp	r9, r0
 8081894:	d04d      	beq.n	8081932 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 8081896:	792b      	ldrb	r3, [r5, #4]
 8081898:	0719      	lsls	r1, r3, #28
 808189a:	d504      	bpl.n	80818a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 808189c:	4620      	mov	r0, r4
 808189e:	696a      	ldr	r2, [r5, #20]
 80818a0:	4954      	ldr	r1, [pc, #336]	; (80819f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 80818a2:	f7ff fa0e 	bl	8080cc2 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 80818a6:	f1b8 0f00 	cmp.w	r8, #0
 80818aa:	d00d      	beq.n	80818c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 80818ac:	215b      	movs	r1, #91	; 0x5b
 80818ae:	4620      	mov	r0, r4
 80818b0:	f7ff f9fb 	bl	8080caa <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 80818b4:	4641      	mov	r1, r8
 80818b6:	4620      	mov	r0, r4
 80818b8:	f7ff f9e9 	bl	8080c8e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 80818bc:	6823      	ldr	r3, [r4, #0]
 80818be:	2202      	movs	r2, #2
 80818c0:	4620      	mov	r0, r4
 80818c2:	68db      	ldr	r3, [r3, #12]
 80818c4:	494c      	ldr	r1, [pc, #304]	; (80819f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 80818c6:	4798      	blx	r3
    if (attr.has_file) {
 80818c8:	792b      	ldrb	r3, [r5, #4]
 80818ca:	07da      	lsls	r2, r3, #31
 80818cc:	d524      	bpl.n	8081918 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 80818ce:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 80818d2:	212f      	movs	r1, #47	; 0x2f
 80818d4:	4640      	mov	r0, r8
 80818d6:	f000 ff70 	bl	80827ba <strrchr>
    if (s1) {
 80818da:	b108      	cbz	r0, 80818e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 80818dc:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 80818e0:	4641      	mov	r1, r8
 80818e2:	4620      	mov	r0, r4
 80818e4:	f7ff f9d3 	bl	8080c8e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80818e8:	792b      	ldrb	r3, [r5, #4]
 80818ea:	079b      	lsls	r3, r3, #30
 80818ec:	d508      	bpl.n	8081900 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 80818ee:	213a      	movs	r1, #58	; 0x3a
 80818f0:	4620      	mov	r0, r4
 80818f2:	f7ff f9da 	bl	8080caa <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 80818f6:	4620      	mov	r0, r4
 80818f8:	68ea      	ldr	r2, [r5, #12]
 80818fa:	4940      	ldr	r1, [pc, #256]	; (80819fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 80818fc:	f7ff f9e1 	bl	8080cc2 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 8081900:	792a      	ldrb	r2, [r5, #4]
 8081902:	6823      	ldr	r3, [r4, #0]
 8081904:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 8081908:	4620      	mov	r0, r4
            write(", ", 2);
 808190a:	f04f 0202 	mov.w	r2, #2
 808190e:	68db      	ldr	r3, [r3, #12]
 8081910:	bf14      	ite	ne
 8081912:	493b      	ldrne	r1, [pc, #236]	; (8081a00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 8081914:	493b      	ldreq	r1, [pc, #236]	; (8081a04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 8081916:	4798      	blx	r3
    if (attr.has_function) {
 8081918:	792b      	ldrb	r3, [r5, #4]
 808191a:	0758      	lsls	r0, r3, #29
 808191c:	d51d      	bpl.n	808195a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 808191e:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 8081920:	460b      	mov	r3, r1
 8081922:	461a      	mov	r2, r3
    for (; *s; ++s) {
 8081924:	f813 0b01 	ldrb.w	r0, [r3], #1
 8081928:	b160      	cbz	r0, 8081944 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 808192a:	2820      	cmp	r0, #32
 808192c:	d108      	bne.n	8081940 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 808192e:	4619      	mov	r1, r3
 8081930:	e7f7      	b.n	8081922 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 8081932:	4835      	ldr	r0, [pc, #212]	; (8081a08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 8081934:	f000 fc5f 	bl	80821f6 <_ZN5spark12NetworkClass9listeningEv>
 8081938:	2800      	cmp	r0, #0
 808193a:	d0ac      	beq.n	8081896 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 808193c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 8081940:	2828      	cmp	r0, #40	; 0x28
 8081942:	d1ee      	bne.n	8081922 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 8081944:	6823      	ldr	r3, [r4, #0]
 8081946:	1a52      	subs	r2, r2, r1
 8081948:	4620      	mov	r0, r4
 808194a:	68db      	ldr	r3, [r3, #12]
 808194c:	4798      	blx	r3
        write("(): ", 4);
 808194e:	6823      	ldr	r3, [r4, #0]
 8081950:	2204      	movs	r2, #4
 8081952:	4620      	mov	r0, r4
 8081954:	68db      	ldr	r3, [r3, #12]
 8081956:	492d      	ldr	r1, [pc, #180]	; (8081a0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 8081958:	4798      	blx	r3
    return log_level_name(level, nullptr);
 808195a:	2100      	movs	r1, #0
 808195c:	4638      	mov	r0, r7
 808195e:	f7fe fe7b 	bl	8080658 <log_level_name>
 8081962:	4601      	mov	r1, r0
    write(s);
 8081964:	4620      	mov	r0, r4
 8081966:	f7ff f992 	bl	8080c8e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 808196a:	6823      	ldr	r3, [r4, #0]
 808196c:	2202      	movs	r2, #2
 808196e:	4620      	mov	r0, r4
 8081970:	68db      	ldr	r3, [r3, #12]
 8081972:	4924      	ldr	r1, [pc, #144]	; (8081a04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 8081974:	4798      	blx	r3
    if (msg) {
 8081976:	b11e      	cbz	r6, 8081980 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 8081978:	4631      	mov	r1, r6
 808197a:	4620      	mov	r0, r4
 808197c:	f7ff f987 	bl	8080c8e <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 8081980:	792b      	ldrb	r3, [r5, #4]
 8081982:	f013 0f30 	tst.w	r3, #48	; 0x30
 8081986:	d02c      	beq.n	80819e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 8081988:	6823      	ldr	r3, [r4, #0]
 808198a:	4921      	ldr	r1, [pc, #132]	; (8081a10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 808198c:	68db      	ldr	r3, [r3, #12]
 808198e:	2202      	movs	r2, #2
 8081990:	4620      	mov	r0, r4
 8081992:	4798      	blx	r3
        if (attr.has_code) {
 8081994:	792b      	ldrb	r3, [r5, #4]
 8081996:	06d9      	lsls	r1, r3, #27
 8081998:	d50a      	bpl.n	80819b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 808199a:	6823      	ldr	r3, [r4, #0]
 808199c:	2207      	movs	r2, #7
 808199e:	4620      	mov	r0, r4
 80819a0:	491c      	ldr	r1, [pc, #112]	; (8081a14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80819a2:	68db      	ldr	r3, [r3, #12]
 80819a4:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 80819a6:	4620      	mov	r0, r4
 80819a8:	69aa      	ldr	r2, [r5, #24]
 80819aa:	491b      	ldr	r1, [pc, #108]	; (8081a18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80819ac:	f7ff f989 	bl	8080cc2 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 80819b0:	792b      	ldrb	r3, [r5, #4]
 80819b2:	069a      	lsls	r2, r3, #26
 80819b4:	d511      	bpl.n	80819da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 80819b6:	06db      	lsls	r3, r3, #27
 80819b8:	d505      	bpl.n	80819c6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 80819ba:	6823      	ldr	r3, [r4, #0]
 80819bc:	2202      	movs	r2, #2
 80819be:	4620      	mov	r0, r4
 80819c0:	68db      	ldr	r3, [r3, #12]
 80819c2:	490f      	ldr	r1, [pc, #60]	; (8081a00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80819c4:	4798      	blx	r3
            write("details = ", 10);
 80819c6:	6823      	ldr	r3, [r4, #0]
 80819c8:	4620      	mov	r0, r4
 80819ca:	4914      	ldr	r1, [pc, #80]	; (8081a1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 80819cc:	220a      	movs	r2, #10
 80819ce:	68db      	ldr	r3, [r3, #12]
 80819d0:	4798      	blx	r3
            write(attr.details);
 80819d2:	4620      	mov	r0, r4
 80819d4:	69e9      	ldr	r1, [r5, #28]
 80819d6:	f7ff f95a 	bl	8080c8e <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 80819da:	215d      	movs	r1, #93	; 0x5d
 80819dc:	4620      	mov	r0, r4
 80819de:	f7ff f964 	bl	8080caa <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 80819e2:	6823      	ldr	r3, [r4, #0]
 80819e4:	4620      	mov	r0, r4
}
 80819e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 80819ea:	2202      	movs	r2, #2
 80819ec:	68db      	ldr	r3, [r3, #12]
 80819ee:	490c      	ldr	r1, [pc, #48]	; (8081a20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 80819f0:	4718      	bx	r3
 80819f2:	bf00      	nop
 80819f4:	080829da 	.word	0x080829da
 80819f8:	080829e1 	.word	0x080829e1
 80819fc:	08082946 	.word	0x08082946
 8081a00:	080829e4 	.word	0x080829e4
 8081a04:	080829e9 	.word	0x080829e9
 8081a08:	20000594 	.word	0x20000594
 8081a0c:	080829e7 	.word	0x080829e7
 8081a10:	080829ec 	.word	0x080829ec
 8081a14:	080829ef 	.word	0x080829ef
 8081a18:	080829f7 	.word	0x080829f7
 8081a1c:	080829fa 	.word	0x080829fa
 8081a20:	08082a05 	.word	0x08082a05

08081a24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8081a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081a28:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 8081a2a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8081a2e:	4605      	mov	r5, r0
 8081a30:	460f      	mov	r7, r1
 8081a32:	4690      	mov	r8, r2
 8081a34:	461e      	mov	r6, r3
 8081a36:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 8081a38:	f000 fa5a 	bl	8081ef0 <_Z16_fetch_usbserialv>
 8081a3c:	4581      	cmp	r9, r0
 8081a3e:	d105      	bne.n	8081a4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 8081a40:	4849      	ldr	r0, [pc, #292]	; (8081b68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 8081a42:	f000 fbd8 	bl	80821f6 <_ZN5spark12NetworkClass9listeningEv>
 8081a46:	2800      	cmp	r0, #0
 8081a48:	f040 808a 	bne.w	8081b60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 8081a4c:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 8081a50:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 8081a52:	4a46      	ldr	r2, [pc, #280]	; (8081b6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 8081a54:	a801      	add	r0, sp, #4
 8081a56:	9201      	str	r2, [sp, #4]
 8081a58:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 8081a5a:	f88d 9008 	strb.w	r9, [sp, #8]
 8081a5e:	f000 fd3e 	bl	80824de <_ZN5spark10JSONWriter11beginObjectEv>
 8081a62:	4649      	mov	r1, r9
 8081a64:	4640      	mov	r0, r8
 8081a66:	f7fe fdf7 	bl	8080658 <log_level_name>
 8081a6a:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 8081a6c:	4940      	ldr	r1, [pc, #256]	; (8081b70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 8081a6e:	2201      	movs	r2, #1
 8081a70:	a801      	add	r0, sp, #4
 8081a72:	f000 fdbd 	bl	80825f0 <_ZN5spark10JSONWriter4nameEPKcj>
 8081a76:	4641      	mov	r1, r8
 8081a78:	f7ff f8fc 	bl	8080c74 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 8081a7c:	b13f      	cbz	r7, 8081a8e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 8081a7e:	493d      	ldr	r1, [pc, #244]	; (8081b74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 8081a80:	2201      	movs	r2, #1
 8081a82:	a801      	add	r0, sp, #4
 8081a84:	f000 fdb4 	bl	80825f0 <_ZN5spark10JSONWriter4nameEPKcj>
 8081a88:	4639      	mov	r1, r7
 8081a8a:	f7ff f8f3 	bl	8080c74 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 8081a8e:	b13e      	cbz	r6, 8081aa0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 8081a90:	4939      	ldr	r1, [pc, #228]	; (8081b78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 8081a92:	2201      	movs	r2, #1
 8081a94:	a801      	add	r0, sp, #4
 8081a96:	f000 fdab 	bl	80825f0 <_ZN5spark10JSONWriter4nameEPKcj>
 8081a9a:	4631      	mov	r1, r6
 8081a9c:	f7ff f8ea 	bl	8080c74 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 8081aa0:	7923      	ldrb	r3, [r4, #4]
 8081aa2:	07df      	lsls	r7, r3, #31
 8081aa4:	d50e      	bpl.n	8081ac4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 8081aa6:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 8081aa8:	212f      	movs	r1, #47	; 0x2f
 8081aaa:	4630      	mov	r0, r6
 8081aac:	f000 fe85 	bl	80827ba <strrchr>
    if (s1) {
 8081ab0:	b100      	cbz	r0, 8081ab4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 8081ab2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 8081ab4:	4931      	ldr	r1, [pc, #196]	; (8081b7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 8081ab6:	2201      	movs	r2, #1
 8081ab8:	a801      	add	r0, sp, #4
 8081aba:	f000 fd99 	bl	80825f0 <_ZN5spark10JSONWriter4nameEPKcj>
 8081abe:	4631      	mov	r1, r6
 8081ac0:	f7ff f8d8 	bl	8080c74 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 8081ac4:	7923      	ldrb	r3, [r4, #4]
 8081ac6:	079e      	lsls	r6, r3, #30
 8081ac8:	d507      	bpl.n	8081ada <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 8081aca:	492d      	ldr	r1, [pc, #180]	; (8081b80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 8081acc:	2202      	movs	r2, #2
 8081ace:	a801      	add	r0, sp, #4
 8081ad0:	f000 fd8e 	bl	80825f0 <_ZN5spark10JSONWriter4nameEPKcj>
 8081ad4:	68e1      	ldr	r1, [r4, #12]
 8081ad6:	f000 fd0f 	bl	80824f8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 8081ada:	7923      	ldrb	r3, [r4, #4]
 8081adc:	0758      	lsls	r0, r3, #29
 8081ade:	d514      	bpl.n	8081b0a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 8081ae0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 8081ae2:	4633      	mov	r3, r6
 8081ae4:	461f      	mov	r7, r3
    for (; *s; ++s) {
 8081ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8081aea:	b12a      	cbz	r2, 8081af8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 8081aec:	2a20      	cmp	r2, #32
 8081aee:	d101      	bne.n	8081af4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 8081af0:	461e      	mov	r6, r3
 8081af2:	e7f7      	b.n	8081ae4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 8081af4:	2a28      	cmp	r2, #40	; 0x28
 8081af6:	d1f5      	bne.n	8081ae4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 8081af8:	2202      	movs	r2, #2
 8081afa:	4922      	ldr	r1, [pc, #136]	; (8081b84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 8081afc:	a801      	add	r0, sp, #4
 8081afe:	f000 fd77 	bl	80825f0 <_ZN5spark10JSONWriter4nameEPKcj>
 8081b02:	4631      	mov	r1, r6
 8081b04:	1bba      	subs	r2, r7, r6
 8081b06:	f000 fd82 	bl	808260e <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 8081b0a:	7923      	ldrb	r3, [r4, #4]
 8081b0c:	0719      	lsls	r1, r3, #28
 8081b0e:	d507      	bpl.n	8081b20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 8081b10:	491d      	ldr	r1, [pc, #116]	; (8081b88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 8081b12:	2201      	movs	r2, #1
 8081b14:	a801      	add	r0, sp, #4
 8081b16:	f000 fd6b 	bl	80825f0 <_ZN5spark10JSONWriter4nameEPKcj>
 8081b1a:	6961      	ldr	r1, [r4, #20]
 8081b1c:	f000 fcfe 	bl	808251c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 8081b20:	7923      	ldrb	r3, [r4, #4]
 8081b22:	06da      	lsls	r2, r3, #27
 8081b24:	d508      	bpl.n	8081b38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 8081b26:	2204      	movs	r2, #4
 8081b28:	4918      	ldr	r1, [pc, #96]	; (8081b8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 8081b2a:	eb0d 0002 	add.w	r0, sp, r2
 8081b2e:	f000 fd5f 	bl	80825f0 <_ZN5spark10JSONWriter4nameEPKcj>
 8081b32:	69a1      	ldr	r1, [r4, #24]
 8081b34:	f000 fce0 	bl	80824f8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 8081b38:	7923      	ldrb	r3, [r4, #4]
 8081b3a:	069b      	lsls	r3, r3, #26
 8081b3c:	d507      	bpl.n	8081b4e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 8081b3e:	4914      	ldr	r1, [pc, #80]	; (8081b90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 8081b40:	2206      	movs	r2, #6
 8081b42:	a801      	add	r0, sp, #4
 8081b44:	f000 fd54 	bl	80825f0 <_ZN5spark10JSONWriter4nameEPKcj>
 8081b48:	69e1      	ldr	r1, [r4, #28]
 8081b4a:	f7ff f893 	bl	8080c74 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 8081b4e:	a801      	add	r0, sp, #4
 8081b50:	f000 fcaf 	bl	80824b2 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 8081b54:	6a28      	ldr	r0, [r5, #32]
 8081b56:	2202      	movs	r2, #2
 8081b58:	6803      	ldr	r3, [r0, #0]
 8081b5a:	490e      	ldr	r1, [pc, #56]	; (8081b94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 8081b5c:	68db      	ldr	r3, [r3, #12]
 8081b5e:	4798      	blx	r3
}
 8081b60:	b005      	add	sp, #20
 8081b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8081b66:	bf00      	nop
 8081b68:	20000594 	.word	0x20000594
 8081b6c:	08082a2c 	.word	0x08082a2c
 8081b70:	080829b4 	.word	0x080829b4
 8081b74:	08082a08 	.word	0x08082a08
 8081b78:	08082a0a 	.word	0x08082a0a
 8081b7c:	08082a0c 	.word	0x08082a0c
 8081b80:	08082a0e 	.word	0x08082a0e
 8081b84:	08082a11 	.word	0x08082a11
 8081b88:	08082a14 	.word	0x08082a14
 8081b8c:	08082a16 	.word	0x08082a16
 8081b90:	08082a1b 	.word	0x08082a1b
 8081b94:	08082a05 	.word	0x08082a05

08081b98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8081b98:	4b02      	ldr	r3, [pc, #8]	; (8081ba4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8081b9a:	681a      	ldr	r2, [r3, #0]
 8081b9c:	4b02      	ldr	r3, [pc, #8]	; (8081ba8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8081b9e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8081ba0:	4770      	bx	lr
 8081ba2:	bf00      	nop
 8081ba4:	2000000c 	.word	0x2000000c
 8081ba8:	200000f4 	.word	0x200000f4

08081bac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081bac:	2100      	movs	r1, #0
 8081bae:	f7fe bd6b 	b.w	8080688 <system_delay_ms>

08081bb2 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081bb2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8081bb4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8081bb6:	4604      	mov	r4, r0
      if (_M_manager)
 8081bb8:	b113      	cbz	r3, 8081bc0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081bba:	2203      	movs	r2, #3
 8081bbc:	4601      	mov	r1, r0
 8081bbe:	4798      	blx	r3
    }
 8081bc0:	4620      	mov	r0, r4
 8081bc2:	bd10      	pop	{r4, pc}

08081bc4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8081bc4:	b510      	push	{r4, lr}
 8081bc6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081bc8:	f7ff fff3 	bl	8081bb2 <_ZNSt14_Function_baseD1Ev>
 8081bcc:	4620      	mov	r0, r4
 8081bce:	bd10      	pop	{r4, pc}

08081bd0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8081bd0:	2300      	movs	r3, #0
 8081bd2:	4803      	ldr	r0, [pc, #12]	; (8081be0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8081bd4:	4a03      	ldr	r2, [pc, #12]	; (8081be4 <_GLOBAL__sub_I_RGB+0x14>)
 8081bd6:	4904      	ldr	r1, [pc, #16]	; (8081be8 <_GLOBAL__sub_I_RGB+0x18>)
 8081bd8:	6083      	str	r3, [r0, #8]
 8081bda:	f000 bd3f 	b.w	808265c <__aeabi_atexit>
 8081bde:	bf00      	nop
 8081be0:	200000f8 	.word	0x200000f8
 8081be4:	20000074 	.word	0x20000074
 8081be8:	08081bc5 	.word	0x08081bc5

08081bec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8081bec:	4b01      	ldr	r3, [pc, #4]	; (8081bf4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8081bee:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8081bf0:	4770      	bx	lr
 8081bf2:	bf00      	nop
 8081bf4:	20000010 	.word	0x20000010

08081bf8 <serialEventRun>:
{
 8081bf8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8081bfa:	4b17      	ldr	r3, [pc, #92]	; (8081c58 <serialEventRun+0x60>)
 8081bfc:	b143      	cbz	r3, 8081c10 <serialEventRun+0x18>
 8081bfe:	f000 f977 	bl	8081ef0 <_Z16_fetch_usbserialv>
 8081c02:	6803      	ldr	r3, [r0, #0]
 8081c04:	691b      	ldr	r3, [r3, #16]
 8081c06:	4798      	blx	r3
 8081c08:	2800      	cmp	r0, #0
 8081c0a:	dd01      	ble.n	8081c10 <serialEventRun+0x18>
        serialEvent();
 8081c0c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8081c10:	4b12      	ldr	r3, [pc, #72]	; (8081c5c <serialEventRun+0x64>)
 8081c12:	b143      	cbz	r3, 8081c26 <serialEventRun+0x2e>
 8081c14:	f000 fa98 	bl	8082148 <_Z22__fetch_global_Serial1v>
 8081c18:	6803      	ldr	r3, [r0, #0]
 8081c1a:	691b      	ldr	r3, [r3, #16]
 8081c1c:	4798      	blx	r3
 8081c1e:	2800      	cmp	r0, #0
 8081c20:	dd01      	ble.n	8081c26 <serialEventRun+0x2e>
        serialEvent1();
 8081c22:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8081c26:	4b0e      	ldr	r3, [pc, #56]	; (8081c60 <serialEventRun+0x68>)
 8081c28:	b10b      	cbz	r3, 8081c2e <serialEventRun+0x36>
 8081c2a:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8081c2e:	4b0d      	ldr	r3, [pc, #52]	; (8081c64 <serialEventRun+0x6c>)
 8081c30:	b10b      	cbz	r3, 8081c36 <serialEventRun+0x3e>
 8081c32:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8081c36:	4b0c      	ldr	r3, [pc, #48]	; (8081c68 <serialEventRun+0x70>)
 8081c38:	b10b      	cbz	r3, 8081c3e <serialEventRun+0x46>
 8081c3a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8081c3e:	4b0b      	ldr	r3, [pc, #44]	; (8081c6c <serialEventRun+0x74>)
 8081c40:	b143      	cbz	r3, 8081c54 <serialEventRun+0x5c>
 8081c42:	f000 f993 	bl	8081f6c <_Z17_fetch_usbserial1v>
 8081c46:	6803      	ldr	r3, [r0, #0]
 8081c48:	691b      	ldr	r3, [r3, #16]
 8081c4a:	4798      	blx	r3
 8081c4c:	2800      	cmp	r0, #0
 8081c4e:	dd01      	ble.n	8081c54 <serialEventRun+0x5c>
        usbSerialEvent1();
 8081c50:	f3af 8000 	nop.w
}
 8081c54:	bd08      	pop	{r3, pc}
 8081c56:	bf00      	nop
	...

08081c70 <_post_loop>:
{
 8081c70:	b508      	push	{r3, lr}
	serialEventRun();
 8081c72:	f7ff ffc1 	bl	8081bf8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8081c76:	f7fe fc17 	bl	80804a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8081c7a:	4b01      	ldr	r3, [pc, #4]	; (8081c80 <_post_loop+0x10>)
 8081c7c:	6018      	str	r0, [r3, #0]
}
 8081c7e:	bd08      	pop	{r3, pc}
 8081c80:	2000059c 	.word	0x2000059c

08081c84 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8081c84:	4802      	ldr	r0, [pc, #8]	; (8081c90 <_Z33system_initialize_user_backup_ramv+0xc>)
 8081c86:	4a03      	ldr	r2, [pc, #12]	; (8081c94 <_Z33system_initialize_user_backup_ramv+0x10>)
 8081c88:	4903      	ldr	r1, [pc, #12]	; (8081c98 <_Z33system_initialize_user_backup_ramv+0x14>)
 8081c8a:	1a12      	subs	r2, r2, r0
 8081c8c:	f000 bcfe 	b.w	808268c <memcpy>
 8081c90:	40024000 	.word	0x40024000
 8081c94:	40024004 	.word	0x40024004
 8081c98:	08082cc0 	.word	0x08082cc0

08081c9c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081c9c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8081c9e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081ca0:	461a      	mov	r2, r3
 8081ca2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081ca6:	9300      	str	r3, [sp, #0]
 8081ca8:	f7fe fd08 	bl	80806bc <system_ctrl_set_result>
}
 8081cac:	b003      	add	sp, #12
 8081cae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08081cb4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8081cb4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8081cb6:	8843      	ldrh	r3, [r0, #2]
 8081cb8:	2b0a      	cmp	r3, #10
 8081cba:	d008      	beq.n	8081cce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8081cbc:	2b50      	cmp	r3, #80	; 0x50
 8081cbe:	d10b      	bne.n	8081cd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8081cc0:	4b09      	ldr	r3, [pc, #36]	; (8081ce8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8081cc2:	681b      	ldr	r3, [r3, #0]
 8081cc4:	b14b      	cbz	r3, 8081cda <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8081cc6:	b003      	add	sp, #12
 8081cc8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8081ccc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8081cce:	f7ff ffe5 	bl	8081c9c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8081cd2:	b003      	add	sp, #12
 8081cd4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081cd8:	2300      	movs	r3, #0
 8081cda:	461a      	mov	r2, r3
 8081cdc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081ce0:	9300      	str	r3, [sp, #0]
 8081ce2:	f7fe fceb 	bl	80806bc <system_ctrl_set_result>
}
 8081ce6:	e7f4      	b.n	8081cd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8081ce8:	2000010c 	.word	0x2000010c

08081cec <module_user_init_hook>:
{
 8081cec:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8081cee:	4c12      	ldr	r4, [pc, #72]	; (8081d38 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8081cf0:	2100      	movs	r1, #0
 8081cf2:	4812      	ldr	r0, [pc, #72]	; (8081d3c <module_user_init_hook+0x50>)
 8081cf4:	f7fe fd8e 	bl	8080814 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8081cf8:	4d11      	ldr	r5, [pc, #68]	; (8081d40 <module_user_init_hook+0x54>)
 8081cfa:	6823      	ldr	r3, [r4, #0]
 8081cfc:	42ab      	cmp	r3, r5
 8081cfe:	bf0c      	ite	eq
 8081d00:	2201      	moveq	r2, #1
 8081d02:	2200      	movne	r2, #0
 8081d04:	4b0f      	ldr	r3, [pc, #60]	; (8081d44 <module_user_init_hook+0x58>)
 8081d06:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8081d08:	d002      	beq.n	8081d10 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 8081d0a:	f7ff ffbb 	bl	8081c84 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8081d0e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8081d10:	f7fe fbba 	bl	8080488 <HAL_RNG_GetRandomNumber>
 8081d14:	4604      	mov	r4, r0
    srand(seed);
 8081d16:	f000 fce9 	bl	80826ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8081d1a:	4b0b      	ldr	r3, [pc, #44]	; (8081d48 <module_user_init_hook+0x5c>)
 8081d1c:	b113      	cbz	r3, 8081d24 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8081d1e:	4620      	mov	r0, r4
 8081d20:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8081d24:	2100      	movs	r1, #0
 8081d26:	4808      	ldr	r0, [pc, #32]	; (8081d48 <module_user_init_hook+0x5c>)
 8081d28:	f7fe fd44 	bl	80807b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8081d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8081d30:	2100      	movs	r1, #0
 8081d32:	4806      	ldr	r0, [pc, #24]	; (8081d4c <module_user_init_hook+0x60>)
 8081d34:	f7fe bcb8 	b.w	80806a8 <system_ctrl_set_app_request_handler>
 8081d38:	40024000 	.word	0x40024000
 8081d3c:	08081bed 	.word	0x08081bed
 8081d40:	9a271c1e 	.word	0x9a271c1e
 8081d44:	20000108 	.word	0x20000108
 8081d48:	00000000 	.word	0x00000000
 8081d4c:	08081cb5 	.word	0x08081cb5

08081d50 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:
} // namespace

spark_cloud_disconnect_options CloudDisconnectOptions::toSystemOptions() const
{
    spark_cloud_disconnect_options opts = {};
    opts.size = sizeof(opts);
 8081d50:	2308      	movs	r3, #8

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 8081d52:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
 8081d54:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
 8081d58:	6803      	ldr	r3, [r0, #0]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8081d5a:	2100      	movs	r1, #0
    opts.flags = flags_;
 8081d5c:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
 8081d60:	7a03      	ldrb	r3, [r0, #8]
 8081d62:	f88d 3003 	strb.w	r3, [sp, #3]
    opts.timeout = timeout_;
 8081d66:	6843      	ldr	r3, [r0, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8081d68:	4668      	mov	r0, sp
    opts.timeout = timeout_;
 8081d6a:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8081d6c:	f7fe fd2a 	bl	80807c4 <spark_cloud_disconnect>
}
 8081d70:	b003      	add	sp, #12
 8081d72:	f85d fb04 	ldr.w	pc, [sp], #4

08081d76 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8081d76:	4770      	bx	lr

08081d78 <_ZN9IPAddressD0Ev>:
 8081d78:	b510      	push	{r4, lr}
 8081d7a:	4604      	mov	r4, r0
 8081d7c:	2108      	movs	r1, #8
 8081d7e:	f000 fc72 	bl	8082666 <_ZdlPvj>
 8081d82:	4620      	mov	r0, r4
 8081d84:	bd10      	pop	{r4, pc}

08081d86 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8081d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081d88:	460e      	mov	r6, r1
 8081d8a:	2400      	movs	r4, #0
 8081d8c:	f100 0708 	add.w	r7, r0, #8
 8081d90:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8081d92:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8081d96:	220a      	movs	r2, #10
 8081d98:	4630      	mov	r0, r6
 8081d9a:	f7fe febc 	bl	8080b16 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081d9e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081da0:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8081da2:	d101      	bne.n	8081da8 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8081da4:	4620      	mov	r0, r4
 8081da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8081da8:	2c00      	cmp	r4, #0
 8081daa:	d0f2      	beq.n	8081d92 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8081dac:	212e      	movs	r1, #46	; 0x2e
 8081dae:	4630      	mov	r0, r6
 8081db0:	f7fe fea2 	bl	8080af8 <_ZN5Print5printEc>
 8081db4:	4404      	add	r4, r0
 8081db6:	e7ec      	b.n	8081d92 <_ZNK9IPAddress7printToER5Print+0xc>

08081db8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8081db8:	4a02      	ldr	r2, [pc, #8]	; (8081dc4 <_ZN9IPAddressC1Ev+0xc>)
 8081dba:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8081dbc:	2200      	movs	r2, #0
 8081dbe:	6042      	str	r2, [r0, #4]
}
 8081dc0:	4770      	bx	lr
 8081dc2:	bf00      	nop
 8081dc4:	08082ac0 	.word	0x08082ac0

08081dc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8081dc8:	4a02      	ldr	r2, [pc, #8]	; (8081dd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8081dca:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8081dcc:	680a      	ldr	r2, [r1, #0]
 8081dce:	6042      	str	r2, [r0, #4]
}
 8081dd0:	4770      	bx	lr
 8081dd2:	bf00      	nop
 8081dd4:	08082ac0 	.word	0x08082ac0

08081dd8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8081dd8:	4a01      	ldr	r2, [pc, #4]	; (8081de0 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 8081dda:	e9c0 2100 	strd	r2, r1, [r0]
}
 8081dde:	4770      	bx	lr
 8081de0:	08082ac0 	.word	0x08082ac0

08081de4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8081de4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8081de6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8081dea:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8081dee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8081df2:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8081df6:	6044      	str	r4, [r0, #4]
}
 8081df8:	bd10      	pop	{r4, pc}
	...

08081dfc <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8081dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081dfe:	4d04      	ldr	r5, [pc, #16]	; (8081e10 <_ZN9IPAddressC1Ehhhh+0x14>)
 8081e00:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8081e02:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8081e06:	9500      	str	r5, [sp, #0]
 8081e08:	f7ff ffec 	bl	8081de4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8081e0c:	b003      	add	sp, #12
 8081e0e:	bd30      	pop	{r4, r5, pc}
 8081e10:	08082ac0 	.word	0x08082ac0

08081e14 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081e14:	7441      	strb	r1, [r0, #17]
}
 8081e16:	4770      	bx	lr

08081e18 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8081e18:	4770      	bx	lr

08081e1a <_ZN9USBSerial4readEv>:
{
 8081e1a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8081e1c:	2100      	movs	r1, #0
 8081e1e:	7c00      	ldrb	r0, [r0, #16]
 8081e20:	f7fe fbea 	bl	80805f8 <HAL_USB_USART_Receive_Data>
}
 8081e24:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8081e28:	bd08      	pop	{r3, pc}

08081e2a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 8081e2a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8081e2c:	2101      	movs	r1, #1
 8081e2e:	7c00      	ldrb	r0, [r0, #16]
 8081e30:	f7fe fbe2 	bl	80805f8 <HAL_USB_USART_Receive_Data>
}
 8081e34:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8081e38:	bd08      	pop	{r3, pc}

08081e3a <_ZN9USBSerial17availableForWriteEv>:
{
 8081e3a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8081e3c:	7c00      	ldrb	r0, [r0, #16]
 8081e3e:	f7fe fbd3 	bl	80805e8 <HAL_USB_USART_Available_Data_For_Write>
}
 8081e42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081e46:	bd08      	pop	{r3, pc}

08081e48 <_ZN9USBSerial9availableEv>:
{
 8081e48:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8081e4a:	7c00      	ldrb	r0, [r0, #16]
 8081e4c:	f7fe fbc4 	bl	80805d8 <HAL_USB_USART_Available_Data>
}
 8081e50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081e54:	bd08      	pop	{r3, pc}

08081e56 <_ZN9USBSerial5writeEh>:
{
 8081e56:	b538      	push	{r3, r4, r5, lr}
 8081e58:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081e5a:	7c00      	ldrb	r0, [r0, #16]
{
 8081e5c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081e5e:	f7fe fbc3 	bl	80805e8 <HAL_USB_USART_Available_Data_For_Write>
 8081e62:	2800      	cmp	r0, #0
 8081e64:	dc01      	bgt.n	8081e6a <_ZN9USBSerial5writeEh+0x14>
 8081e66:	7c60      	ldrb	r0, [r4, #17]
 8081e68:	b128      	cbz	r0, 8081e76 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8081e6a:	4629      	mov	r1, r5
 8081e6c:	7c20      	ldrb	r0, [r4, #16]
 8081e6e:	f7fe fbcb 	bl	8080608 <HAL_USB_USART_Send_Data>
 8081e72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8081e76:	bd38      	pop	{r3, r4, r5, pc}

08081e78 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8081e78:	7c00      	ldrb	r0, [r0, #16]
 8081e7a:	f7fe bbcd 	b.w	8080618 <HAL_USB_USART_Flush_Data>

08081e7e <_ZN9USBSerialD0Ev>:
 8081e7e:	b510      	push	{r4, lr}
 8081e80:	4604      	mov	r4, r0
 8081e82:	2114      	movs	r1, #20
 8081e84:	f000 fbef 	bl	8082666 <_ZdlPvj>
 8081e88:	4620      	mov	r0, r4
 8081e8a:	bd10      	pop	{r4, pc}

08081e8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8081e8c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8081e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081e92:	4604      	mov	r4, r0
 8081e94:	4608      	mov	r0, r1
 8081e96:	2100      	movs	r1, #0
 8081e98:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8081e9c:	4b04      	ldr	r3, [pc, #16]	; (8081eb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8081e9e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8081ea0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8081ea2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8081ea4:	4611      	mov	r1, r2
  _blocking = true;
 8081ea6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8081ea8:	f7fe fb7e 	bl	80805a8 <HAL_USB_USART_Init>
}
 8081eac:	4620      	mov	r0, r4
 8081eae:	bd10      	pop	{r4, pc}
 8081eb0:	08082ad4 	.word	0x08082ad4

08081eb4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8081eb4:	2200      	movs	r2, #0
 8081eb6:	7c00      	ldrb	r0, [r0, #16]
 8081eb8:	f7fe bb7e 	b.w	80805b8 <HAL_USB_USART_Begin>

08081ebc <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 8081ebc:	7c00      	ldrb	r0, [r0, #16]
 8081ebe:	f7fe bb83 	b.w	80805c8 <HAL_USB_USART_End>
	...

08081ec4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8081ec4:	b510      	push	{r4, lr}
 8081ec6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081ec8:	2214      	movs	r2, #20
 8081eca:	2100      	movs	r1, #0
 8081ecc:	f000 fc06 	bl	80826dc <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8081ed0:	4b05      	ldr	r3, [pc, #20]	; (8081ee8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081ed2:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8081ed4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8081ed6:	4b05      	ldr	r3, [pc, #20]	; (8081eec <_Z19acquireSerialBufferv+0x28>)
 8081ed8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8081eda:	f240 1301 	movw	r3, #257	; 0x101
 8081ede:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081ee0:	2381      	movs	r3, #129	; 0x81
 8081ee2:	8223      	strh	r3, [r4, #16]
}
 8081ee4:	bd10      	pop	{r4, pc}
 8081ee6:	bf00      	nop
 8081ee8:	20000140 	.word	0x20000140
 8081eec:	20000241 	.word	0x20000241

08081ef0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8081ef0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081ef2:	4d0f      	ldr	r5, [pc, #60]	; (8081f30 <_Z16_fetch_usbserialv+0x40>)
{
 8081ef4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8081ef6:	a801      	add	r0, sp, #4
 8081ef8:	f7ff ffe4 	bl	8081ec4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081efc:	7829      	ldrb	r1, [r5, #0]
 8081efe:	f3bf 8f5b 	dmb	ish
 8081f02:	f011 0401 	ands.w	r4, r1, #1
 8081f06:	d110      	bne.n	8081f2a <_Z16_fetch_usbserialv+0x3a>
 8081f08:	4628      	mov	r0, r5
 8081f0a:	f7fe f8d3 	bl	80800b4 <__cxa_guard_acquire>
 8081f0e:	b160      	cbz	r0, 8081f2a <_Z16_fetch_usbserialv+0x3a>
 8081f10:	4621      	mov	r1, r4
 8081f12:	aa01      	add	r2, sp, #4
 8081f14:	4807      	ldr	r0, [pc, #28]	; (8081f34 <_Z16_fetch_usbserialv+0x44>)
 8081f16:	f7ff ffb9 	bl	8081e8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081f1a:	4628      	mov	r0, r5
 8081f1c:	f7fe f8cf 	bl	80800be <__cxa_guard_release>
 8081f20:	4a05      	ldr	r2, [pc, #20]	; (8081f38 <_Z16_fetch_usbserialv+0x48>)
 8081f22:	4906      	ldr	r1, [pc, #24]	; (8081f3c <_Z16_fetch_usbserialv+0x4c>)
 8081f24:	4803      	ldr	r0, [pc, #12]	; (8081f34 <_Z16_fetch_usbserialv+0x44>)
 8081f26:	f000 fb99 	bl	808265c <__aeabi_atexit>
	return _usbserial;
}
 8081f2a:	4802      	ldr	r0, [pc, #8]	; (8081f34 <_Z16_fetch_usbserialv+0x44>)
 8081f2c:	b007      	add	sp, #28
 8081f2e:	bd30      	pop	{r4, r5, pc}
 8081f30:	20000110 	.word	0x20000110
 8081f34:	20000118 	.word	0x20000118
 8081f38:	20000074 	.word	0x20000074
 8081f3c:	08081e19 	.word	0x08081e19

08081f40 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8081f40:	b510      	push	{r4, lr}
 8081f42:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081f44:	2214      	movs	r2, #20
 8081f46:	2100      	movs	r1, #0
 8081f48:	f000 fbc8 	bl	80826dc <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081f4c:	4b05      	ldr	r3, [pc, #20]	; (8081f64 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081f4e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8081f50:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8081f52:	4b05      	ldr	r3, [pc, #20]	; (8081f68 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8081f54:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8081f56:	f240 1301 	movw	r3, #257	; 0x101
 8081f5a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081f5c:	2381      	movs	r3, #129	; 0x81
 8081f5e:	8223      	strh	r3, [r4, #16]
}
 8081f60:	bd10      	pop	{r4, pc}
 8081f62:	bf00      	nop
 8081f64:	200002c2 	.word	0x200002c2
 8081f68:	200003c3 	.word	0x200003c3

08081f6c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8081f6c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081f6e:	4c0f      	ldr	r4, [pc, #60]	; (8081fac <_Z17_fetch_usbserial1v+0x40>)
{
 8081f70:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8081f72:	a801      	add	r0, sp, #4
 8081f74:	f7ff ffe4 	bl	8081f40 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081f78:	7823      	ldrb	r3, [r4, #0]
 8081f7a:	f3bf 8f5b 	dmb	ish
 8081f7e:	07db      	lsls	r3, r3, #31
 8081f80:	d410      	bmi.n	8081fa4 <_Z17_fetch_usbserial1v+0x38>
 8081f82:	4620      	mov	r0, r4
 8081f84:	f7fe f896 	bl	80800b4 <__cxa_guard_acquire>
 8081f88:	b160      	cbz	r0, 8081fa4 <_Z17_fetch_usbserial1v+0x38>
 8081f8a:	2101      	movs	r1, #1
 8081f8c:	aa01      	add	r2, sp, #4
 8081f8e:	4808      	ldr	r0, [pc, #32]	; (8081fb0 <_Z17_fetch_usbserial1v+0x44>)
 8081f90:	f7ff ff7c 	bl	8081e8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081f94:	4620      	mov	r0, r4
 8081f96:	f7fe f892 	bl	80800be <__cxa_guard_release>
 8081f9a:	4a06      	ldr	r2, [pc, #24]	; (8081fb4 <_Z17_fetch_usbserial1v+0x48>)
 8081f9c:	4906      	ldr	r1, [pc, #24]	; (8081fb8 <_Z17_fetch_usbserial1v+0x4c>)
 8081f9e:	4804      	ldr	r0, [pc, #16]	; (8081fb0 <_Z17_fetch_usbserial1v+0x44>)
 8081fa0:	f000 fb5c 	bl	808265c <__aeabi_atexit>
  return _usbserial1;
}
 8081fa4:	4802      	ldr	r0, [pc, #8]	; (8081fb0 <_Z17_fetch_usbserial1v+0x44>)
 8081fa6:	b006      	add	sp, #24
 8081fa8:	bd10      	pop	{r4, pc}
 8081faa:	bf00      	nop
 8081fac:	20000114 	.word	0x20000114
 8081fb0:	2000012c 	.word	0x2000012c
 8081fb4:	20000074 	.word	0x20000074
 8081fb8:	08081e19 	.word	0x08081e19

08081fbc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8081fbc:	2200      	movs	r2, #0
 8081fbe:	6840      	ldr	r0, [r0, #4]
 8081fc0:	4611      	mov	r1, r2
 8081fc2:	f7fe bba7 	b.w	8080714 <network_ready>

08081fc6 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8081fc8:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8081fca:	b085      	sub	sp, #20
 8081fcc:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081fce:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 8081fd0:	460f      	mov	r7, r1
 8081fd2:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8081fd4:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081fd6:	f000 fbd6 	bl	8082786 <strlen>
 8081fda:	687b      	ldr	r3, [r7, #4]
 8081fdc:	b281      	uxth	r1, r0
 8081fde:	9600      	str	r6, [sp, #0]
 8081fe0:	4628      	mov	r0, r5
 8081fe2:	aa03      	add	r2, sp, #12
 8081fe4:	f7fe fad8 	bl	8080598 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081fe8:	b130      	cbz	r0, 8081ff8 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 8081fea:	4631      	mov	r1, r6
 8081fec:	4620      	mov	r0, r4
 8081fee:	f7ff fef3 	bl	8081dd8 <_ZN9IPAddressC1Em>
    }
 8081ff2:	4620      	mov	r0, r4
 8081ff4:	b005      	add	sp, #20
 8081ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081ff8:	4620      	mov	r0, r4
 8081ffa:	a903      	add	r1, sp, #12
 8081ffc:	f7ff fee4 	bl	8081dc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8082000:	e7f7      	b.n	8081ff2 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08082002 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8082002:	2200      	movs	r2, #0
 8082004:	6840      	ldr	r0, [r0, #4]
 8082006:	4611      	mov	r1, r2
 8082008:	f7fe bba4 	b.w	8080754 <network_listening>

0808200c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 808200c:	2200      	movs	r2, #0
 808200e:	6840      	ldr	r0, [r0, #4]
 8082010:	4611      	mov	r1, r2
 8082012:	f7fe bbaf 	b.w	8080774 <network_get_listen_timeout>

08082016 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8082016:	2200      	movs	r2, #0
 8082018:	6840      	ldr	r0, [r0, #4]
 808201a:	f7fe bba3 	b.w	8080764 <network_set_listen_timeout>

0808201e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 808201e:	2200      	movs	r2, #0
 8082020:	6840      	ldr	r0, [r0, #4]
 8082022:	f081 0101 	eor.w	r1, r1, #1
 8082026:	f7fe bb8d 	b.w	8080744 <network_listen>

0808202a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 808202a:	2300      	movs	r3, #0
 808202c:	6840      	ldr	r0, [r0, #4]
 808202e:	461a      	mov	r2, r3
 8082030:	4619      	mov	r1, r3
 8082032:	f7fe bb7f 	b.w	8080734 <network_off>

08082036 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 8082036:	2300      	movs	r3, #0
 8082038:	6840      	ldr	r0, [r0, #4]
 808203a:	461a      	mov	r2, r3
 808203c:	4619      	mov	r1, r3
 808203e:	f7fe bb71 	b.w	8080724 <network_on>

08082042 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8082042:	2200      	movs	r2, #0
 8082044:	6840      	ldr	r0, [r0, #4]
 8082046:	4611      	mov	r1, r2
 8082048:	f7fe bb54 	b.w	80806f4 <network_connecting>

0808204c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808204c:	2200      	movs	r2, #0
 808204e:	2102      	movs	r1, #2
 8082050:	6840      	ldr	r0, [r0, #4]
 8082052:	f7fe bb57 	b.w	8080704 <network_disconnect>

08082056 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 8082056:	2300      	movs	r3, #0
 8082058:	6840      	ldr	r0, [r0, #4]
 808205a:	461a      	mov	r2, r3
 808205c:	f7fe bb42 	b.w	80806e4 <network_connect>

08082060 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8082060:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8082062:	2428      	movs	r4, #40	; 0x28
 8082064:	4b07      	ldr	r3, [pc, #28]	; (8082084 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8082066:	4622      	mov	r2, r4
 8082068:	4618      	mov	r0, r3
 808206a:	2100      	movs	r1, #0
 808206c:	f000 fb36 	bl	80826dc <memset>
        cid = -1;
 8082070:	f04f 32ff 	mov.w	r2, #4294967295
 8082074:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8082076:	2204      	movs	r2, #4
 8082078:	4b03      	ldr	r3, [pc, #12]	; (8082088 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 808207a:	8004      	strh	r4, [r0, #0]
 808207c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808207e:	4a03      	ldr	r2, [pc, #12]	; (808208c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8082080:	601a      	str	r2, [r3, #0]
 8082082:	bd10      	pop	{r4, pc}
 8082084:	2000044c 	.word	0x2000044c
 8082088:	20000444 	.word	0x20000444
 808208c:	08082b04 	.word	0x08082b04

08082090 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8082090:	4770      	bx	lr

08082092 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082092:	7441      	strb	r1, [r0, #17]
}
 8082094:	4770      	bx	lr

08082096 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 8082096:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8082098:	7c00      	ldrb	r0, [r0, #16]
 808209a:	f7fe fa6d 	bl	8080578 <hal_usart_available_data_for_write>
}
 808209e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80820a2:	bd08      	pop	{r3, pc}

080820a4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80820a4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80820a6:	7c00      	ldrb	r0, [r0, #16]
 80820a8:	f7fe fa46 	bl	8080538 <hal_usart_available>
}
 80820ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80820b0:	bd08      	pop	{r3, pc}

080820b2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80820b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80820b4:	7c00      	ldrb	r0, [r0, #16]
 80820b6:	f7fe fa4f 	bl	8080558 <hal_usart_peek>
}
 80820ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80820be:	bd08      	pop	{r3, pc}

080820c0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80820c0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80820c2:	7c00      	ldrb	r0, [r0, #16]
 80820c4:	f7fe fa40 	bl	8080548 <hal_usart_read>
}
 80820c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80820cc:	bd08      	pop	{r3, pc}

080820ce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80820ce:	7c00      	ldrb	r0, [r0, #16]
 80820d0:	f7fe ba4a 	b.w	8080568 <hal_usart_flush>

080820d4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80820d4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80820d6:	7c46      	ldrb	r6, [r0, #17]
{
 80820d8:	4604      	mov	r4, r0
 80820da:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80820dc:	b12e      	cbz	r6, 80820ea <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80820de:	4629      	mov	r1, r5
 80820e0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80820e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80820e6:	f7fe ba1f 	b.w	8080528 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80820ea:	7c00      	ldrb	r0, [r0, #16]
 80820ec:	f7fe fa44 	bl	8080578 <hal_usart_available_data_for_write>
 80820f0:	2800      	cmp	r0, #0
 80820f2:	dcf4      	bgt.n	80820de <_ZN11USARTSerial5writeEh+0xa>
}
 80820f4:	4630      	mov	r0, r6
 80820f6:	bd70      	pop	{r4, r5, r6, pc}

080820f8 <_ZN11USARTSerialD0Ev>:
 80820f8:	b510      	push	{r4, lr}
 80820fa:	4604      	mov	r4, r0
 80820fc:	2114      	movs	r1, #20
 80820fe:	f000 fab2 	bl	8082666 <_ZdlPvj>
 8082102:	4620      	mov	r0, r4
 8082104:	bd10      	pop	{r4, pc}
	...

08082108 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8082108:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808210c:	b510      	push	{r4, lr}
 808210e:	4604      	mov	r4, r0
 8082110:	4608      	mov	r0, r1
 8082112:	4611      	mov	r1, r2
 8082114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8082118:	e9c4 c201 	strd	ip, r2, [r4, #4]
 808211c:	4a04      	ldr	r2, [pc, #16]	; (8082130 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 808211e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8082120:	6022      	str	r2, [r4, #0]
  _blocking = true;
 8082122:	2201      	movs	r2, #1
 8082124:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 8082126:	461a      	mov	r2, r3
 8082128:	f7fe f9ee 	bl	8080508 <hal_usart_init>
}
 808212c:	4620      	mov	r0, r4
 808212e:	bd10      	pop	{r4, pc}
 8082130:	08082b38 	.word	0x08082b38

08082134 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 8082134:	2300      	movs	r3, #0
 8082136:	7c00      	ldrb	r0, [r0, #16]
 8082138:	f7fe ba26 	b.w	8080588 <hal_usart_begin_config>

0808213c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 808213c:	2200      	movs	r2, #0
 808213e:	f7ff bff9 	b.w	8082134 <_ZN11USARTSerial5beginEmm>

08082142 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 8082142:	7c00      	ldrb	r0, [r0, #16]
 8082144:	f7fe b9e8 	b.w	8080518 <hal_usart_end>

08082148 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8082148:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808214a:	4d0d      	ldr	r5, [pc, #52]	; (8082180 <_Z22__fetch_global_Serial1v+0x38>)
 808214c:	7829      	ldrb	r1, [r5, #0]
 808214e:	f3bf 8f5b 	dmb	ish
 8082152:	f011 0401 	ands.w	r4, r1, #1
 8082156:	d111      	bne.n	808217c <_Z22__fetch_global_Serial1v+0x34>
 8082158:	4628      	mov	r0, r5
 808215a:	f7fd ffab 	bl	80800b4 <__cxa_guard_acquire>
 808215e:	b168      	cbz	r0, 808217c <_Z22__fetch_global_Serial1v+0x34>
 8082160:	4621      	mov	r1, r4
 8082162:	4a08      	ldr	r2, [pc, #32]	; (8082184 <_Z22__fetch_global_Serial1v+0x3c>)
 8082164:	4b08      	ldr	r3, [pc, #32]	; (8082188 <_Z22__fetch_global_Serial1v+0x40>)
 8082166:	4809      	ldr	r0, [pc, #36]	; (808218c <_Z22__fetch_global_Serial1v+0x44>)
 8082168:	f7ff ffce 	bl	8082108 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 808216c:	4628      	mov	r0, r5
 808216e:	f7fd ffa6 	bl	80800be <__cxa_guard_release>
 8082172:	4a07      	ldr	r2, [pc, #28]	; (8082190 <_Z22__fetch_global_Serial1v+0x48>)
 8082174:	4907      	ldr	r1, [pc, #28]	; (8082194 <_Z22__fetch_global_Serial1v+0x4c>)
 8082176:	4805      	ldr	r0, [pc, #20]	; (808218c <_Z22__fetch_global_Serial1v+0x44>)
 8082178:	f000 fa70 	bl	808265c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808217c:	4803      	ldr	r0, [pc, #12]	; (808218c <_Z22__fetch_global_Serial1v+0x44>)
 808217e:	bd38      	pop	{r3, r4, r5, pc}
 8082180:	20000474 	.word	0x20000474
 8082184:	20000478 	.word	0x20000478
 8082188:	200004fc 	.word	0x200004fc
 808218c:	20000580 	.word	0x20000580
 8082190:	20000074 	.word	0x20000074
 8082194:	08082091 	.word	0x08082091

08082198 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8082198:	2300      	movs	r3, #0
 808219a:	6840      	ldr	r0, [r0, #4]
 808219c:	461a      	mov	r2, r3
 808219e:	f7fe baa1 	b.w	80806e4 <network_connect>

080821a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80821a2:	2200      	movs	r2, #0
 80821a4:	2102      	movs	r1, #2
 80821a6:	6840      	ldr	r0, [r0, #4]
 80821a8:	f7fe baac 	b.w	8080704 <network_disconnect>

080821ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80821ac:	2200      	movs	r2, #0
 80821ae:	6840      	ldr	r0, [r0, #4]
 80821b0:	4611      	mov	r1, r2
 80821b2:	f7fe ba9f 	b.w	80806f4 <network_connecting>

080821b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80821b6:	2200      	movs	r2, #0
 80821b8:	6840      	ldr	r0, [r0, #4]
 80821ba:	4611      	mov	r1, r2
 80821bc:	f7fe baaa 	b.w	8080714 <network_ready>

080821c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80821c0:	2300      	movs	r3, #0
 80821c2:	6840      	ldr	r0, [r0, #4]
 80821c4:	461a      	mov	r2, r3
 80821c6:	4619      	mov	r1, r3
 80821c8:	f7fe baac 	b.w	8080724 <network_on>

080821cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80821cc:	2300      	movs	r3, #0
 80821ce:	6840      	ldr	r0, [r0, #4]
 80821d0:	461a      	mov	r2, r3
 80821d2:	4619      	mov	r1, r3
 80821d4:	f7fe baae 	b.w	8080734 <network_off>

080821d8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80821d8:	2200      	movs	r2, #0
 80821da:	6840      	ldr	r0, [r0, #4]
 80821dc:	f081 0101 	eor.w	r1, r1, #1
 80821e0:	f7fe bab0 	b.w	8080744 <network_listen>

080821e4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80821e4:	2200      	movs	r2, #0
 80821e6:	6840      	ldr	r0, [r0, #4]
 80821e8:	f7fe babc 	b.w	8080764 <network_set_listen_timeout>

080821ec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80821ec:	2200      	movs	r2, #0
 80821ee:	6840      	ldr	r0, [r0, #4]
 80821f0:	4611      	mov	r1, r2
 80821f2:	f7fe babf 	b.w	8080774 <network_get_listen_timeout>

080821f6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80821f6:	2200      	movs	r2, #0
 80821f8:	6840      	ldr	r0, [r0, #4]
 80821fa:	4611      	mov	r1, r2
 80821fc:	f7fe baaa 	b.w	8080754 <network_listening>

08082200 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8082200:	b570      	push	{r4, r5, r6, lr}
 8082202:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8082204:	2600      	movs	r6, #0
 8082206:	b086      	sub	sp, #24
 8082208:	4604      	mov	r4, r0
    IPAddress addr;
 808220a:	a804      	add	r0, sp, #16
 808220c:	f7ff fdd4 	bl	8081db8 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082210:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 8082212:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082214:	f000 fab7 	bl	8082786 <strlen>
 8082218:	4b0a      	ldr	r3, [pc, #40]	; (8082244 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 808221a:	9600      	str	r6, [sp, #0]
 808221c:	b281      	uxth	r1, r0
 808221e:	685b      	ldr	r3, [r3, #4]
 8082220:	4628      	mov	r0, r5
 8082222:	aa03      	add	r2, sp, #12
 8082224:	f7fe f9b8 	bl	8080598 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082228:	b130      	cbz	r0, 8082238 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808222a:	4631      	mov	r1, r6
 808222c:	4620      	mov	r0, r4
 808222e:	f7ff fdd3 	bl	8081dd8 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8082232:	4620      	mov	r0, r4
 8082234:	b006      	add	sp, #24
 8082236:	bd70      	pop	{r4, r5, r6, pc}
 8082238:	4620      	mov	r0, r4
 808223a:	a903      	add	r1, sp, #12
 808223c:	f7ff fdc4 	bl	8081dc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 8082240:	e7f7      	b.n	8082232 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 8082242:	bf00      	nop
 8082244:	20000444 	.word	0x20000444

08082248 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8082248:	4b02      	ldr	r3, [pc, #8]	; (8082254 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808224a:	4a03      	ldr	r2, [pc, #12]	; (8082258 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808224c:	601a      	str	r2, [r3, #0]
 808224e:	2200      	movs	r2, #0
 8082250:	605a      	str	r2, [r3, #4]

} // spark
 8082252:	4770      	bx	lr
 8082254:	20000594 	.word	0x20000594
 8082258:	08082b68 	.word	0x08082b68

0808225c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 808225c:	2201      	movs	r2, #1
 808225e:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 8082262:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8082266:	4618      	mov	r0, r3
 8082268:	2901      	cmp	r1, #1
 808226a:	d108      	bne.n	808227e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 808226c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8082270:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 8082274:	3a01      	subs	r2, #1
 8082276:	f103 0310 	add.w	r3, r3, #16
 808227a:	d1f2      	bne.n	8082262 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 808227c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 808227e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 8082280:	bf04      	itt	eq
 8082282:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 8082286:	1852      	addeq	r2, r2, r1
 8082288:	e7f4      	b.n	8082274 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

0808228a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 808228a:	b40e      	push	{r1, r2, r3}
 808228c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082290:	b087      	sub	sp, #28
 8082292:	af00      	add	r7, sp, #0
 8082294:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8082298:	f855 8b04 	ldr.w	r8, [r5], #4
 808229c:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 808229e:	462b      	mov	r3, r5
 80822a0:	4642      	mov	r2, r8
 80822a2:	2110      	movs	r1, #16
 80822a4:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 80822a8:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80822aa:	f7fe faab 	bl	8080804 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 80822ae:	280f      	cmp	r0, #15
 80822b0:	d91b      	bls.n	80822ea <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 80822b2:	f100 0308 	add.w	r3, r0, #8
 80822b6:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 80822ba:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 80822bc:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80822c0:	4642      	mov	r2, r8
 80822c2:	1c41      	adds	r1, r0, #1
 80822c4:	462b      	mov	r3, r5
 80822c6:	4668      	mov	r0, sp
        va_start(args, fmt);
 80822c8:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80822ca:	f7fe fa9b 	bl	8080804 <vsnprintf>
        if (n > 0) {
 80822ce:	1e02      	subs	r2, r0, #0
 80822d0:	dd04      	ble.n	80822dc <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80822d2:	6823      	ldr	r3, [r4, #0]
 80822d4:	4669      	mov	r1, sp
 80822d6:	4620      	mov	r0, r4
 80822d8:	689b      	ldr	r3, [r3, #8]
 80822da:	4798      	blx	r3
 80822dc:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 80822de:	371c      	adds	r7, #28
 80822e0:	46bd      	mov	sp, r7
 80822e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80822e6:	b003      	add	sp, #12
 80822e8:	4770      	bx	lr
    } else if (n > 0) {
 80822ea:	2800      	cmp	r0, #0
 80822ec:	d0f7      	beq.n	80822de <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 80822ee:	6823      	ldr	r3, [r4, #0]
 80822f0:	4602      	mov	r2, r0
 80822f2:	689b      	ldr	r3, [r3, #8]
 80822f4:	4620      	mov	r0, r4
 80822f6:	f107 0108 	add.w	r1, r7, #8
 80822fa:	4798      	blx	r3
}
 80822fc:	e7ef      	b.n	80822de <_ZN5spark10JSONWriter6printfEPKcz+0x54>

080822fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80822fe:	b510      	push	{r4, lr}
 8082300:	4604      	mov	r4, r0
          _M_dispose();
 8082302:	6803      	ldr	r3, [r0, #0]
 8082304:	689b      	ldr	r3, [r3, #8]
 8082306:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8082308:	68a3      	ldr	r3, [r4, #8]
 808230a:	3b01      	subs	r3, #1
 808230c:	60a3      	str	r3, [r4, #8]
 808230e:	b92b      	cbnz	r3, 808231c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 8082310:	6823      	ldr	r3, [r4, #0]
 8082312:	4620      	mov	r0, r4
    }
 8082314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 8082318:	68db      	ldr	r3, [r3, #12]
 808231a:	4718      	bx	r3
    }
 808231c:	bd10      	pop	{r4, pc}

0808231e <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 808231e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 8082320:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 8082322:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 8082326:	2201      	movs	r2, #1
 8082328:	689b      	ldr	r3, [r3, #8]
 808232a:	f10d 0107 	add.w	r1, sp, #7
 808232e:	4798      	blx	r3
}
 8082330:	b003      	add	sp, #12
 8082332:	f85d fb04 	ldr.w	pc, [sp], #4

08082336 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
 8082336:	b538      	push	{r3, r4, r5, lr}
 8082338:	680b      	ldr	r3, [r1, #0]
 808233a:	4604      	mov	r4, r0
 808233c:	6003      	str	r3, [r0, #0]
 808233e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 8082340:	6843      	ldr	r3, [r0, #4]
 8082342:	429d      	cmp	r5, r3
 8082344:	d00c      	beq.n	8082360 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 8082346:	b115      	cbz	r5, 808234e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 8082348:	686b      	ldr	r3, [r5, #4]
 808234a:	3301      	adds	r3, #1
 808234c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 808234e:	6860      	ldr	r0, [r4, #4]
 8082350:	b128      	cbz	r0, 808235e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 8082352:	6843      	ldr	r3, [r0, #4]
 8082354:	3b01      	subs	r3, #1
 8082356:	6043      	str	r3, [r0, #4]
 8082358:	b90b      	cbnz	r3, 808235e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 808235a:	f7ff ffd0 	bl	80822fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 808235e:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 8082360:	4620      	mov	r0, r4
 8082362:	bd38      	pop	{r3, r4, r5, pc}

08082364 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 8082364:	460b      	mov	r3, r1
 8082366:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 8082368:	2200      	movs	r2, #0
 808236a:	b510      	push	{r4, lr}
 808236c:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 808236e:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 8082372:	6083      	str	r3, [r0, #8]
    if (t) {
 8082374:	b90b      	cbnz	r3, 808237a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 8082376:	4620      	mov	r0, r4
 8082378:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 808237a:	f7ff ffdc 	bl	8082336 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 808237e:	e7fa      	b.n	8082376 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

08082380 <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 8082380:	4603      	mov	r3, r0
    if (!t_) {
 8082382:	6880      	ldr	r0, [r0, #8]
 8082384:	b320      	cbz	r0, 80823d0 <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 8082386:	7802      	ldrb	r2, [r0, #0]
 8082388:	2a03      	cmp	r2, #3
 808238a:	d81a      	bhi.n	80823c2 <_ZNK5spark9JSONValue4typeEv+0x42>
 808238c:	e8df f002 	tbb	[pc, r2]
 8082390:	1b021704 	.word	0x1b021704
 8082394:	2005      	movs	r0, #5
 8082396:	4770      	bx	lr
        const char c = d_->json[t_->start];
 8082398:	681b      	ldr	r3, [r3, #0]
 808239a:	685a      	ldr	r2, [r3, #4]
 808239c:	6843      	ldr	r3, [r0, #4]
 808239e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80823a0:	282d      	cmp	r0, #45	; 0x2d
 80823a2:	d012      	beq.n	80823ca <_ZNK5spark9JSONValue4typeEv+0x4a>
 80823a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80823a8:	2b09      	cmp	r3, #9
 80823aa:	d90e      	bls.n	80823ca <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80823ac:	2874      	cmp	r0, #116	; 0x74
 80823ae:	d00e      	beq.n	80823ce <_ZNK5spark9JSONValue4typeEv+0x4e>
 80823b0:	2866      	cmp	r0, #102	; 0x66
 80823b2:	d00c      	beq.n	80823ce <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 80823b4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80823b8:	4258      	negs	r0, r3
 80823ba:	4158      	adcs	r0, r3
 80823bc:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 80823be:	2006      	movs	r0, #6
 80823c0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 80823c2:	2000      	movs	r0, #0
 80823c4:	4770      	bx	lr
        return JSON_TYPE_STRING;
 80823c6:	2004      	movs	r0, #4
 80823c8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 80823ca:	2003      	movs	r0, #3
 80823cc:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 80823ce:	2002      	movs	r0, #2
}
 80823d0:	4770      	bx	lr

080823d2 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 80823d2:	b510      	push	{r4, lr}
 80823d4:	4604      	mov	r4, r0
    switch (type()) {
 80823d6:	f7ff ffd3 	bl	8082380 <_ZNK5spark9JSONValue4typeEv>
 80823da:	2802      	cmp	r0, #2
 80823dc:	d00e      	beq.n	80823fc <_ZNK5spark9JSONValue5toIntEv+0x2a>
 80823de:	1ec3      	subs	r3, r0, #3
 80823e0:	b2db      	uxtb	r3, r3
 80823e2:	2b01      	cmp	r3, #1
 80823e4:	d814      	bhi.n	8082410 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 80823e6:	6822      	ldr	r2, [r4, #0]
 80823e8:	68a3      	ldr	r3, [r4, #8]
 80823ea:	6850      	ldr	r0, [r2, #4]
 80823ec:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 80823ee:	220a      	movs	r2, #10
}
 80823f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 80823f4:	2100      	movs	r1, #0
 80823f6:	4418      	add	r0, r3
 80823f8:	f000 ba6e 	b.w	80828d8 <strtol>
        const char* const s = d_->json + t_->start;
 80823fc:	6822      	ldr	r2, [r4, #0]
 80823fe:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 8082400:	6852      	ldr	r2, [r2, #4]
 8082402:	685b      	ldr	r3, [r3, #4]
 8082404:	5cd0      	ldrb	r0, [r2, r3]
 8082406:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 808240a:	4258      	negs	r0, r3
 808240c:	4158      	adcs	r0, r3
}
 808240e:	bd10      	pop	{r4, pc}
    switch (type()) {
 8082410:	2000      	movs	r0, #0
 8082412:	e7fc      	b.n	808240e <_ZNK5spark9JSONValue5toIntEv+0x3c>

08082414 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 8082414:	460b      	mov	r3, r1
 8082416:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 8082418:	2200      	movs	r2, #0
 808241a:	b510      	push	{r4, lr}
 808241c:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 808241e:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 8082422:	480d      	ldr	r0, [pc, #52]	; (8082458 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 8082424:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 8082428:	b1a3      	cbz	r3, 8082454 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 808242a:	781a      	ldrb	r2, [r3, #0]
 808242c:	2a03      	cmp	r2, #3
 808242e:	d006      	beq.n	808243e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 8082430:	b982      	cbnz	r2, 8082454 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 8082432:	680a      	ldr	r2, [r1, #0]
 8082434:	6850      	ldr	r0, [r2, #4]
 8082436:	685a      	ldr	r2, [r3, #4]
 8082438:	5c82      	ldrb	r2, [r0, r2]
 808243a:	2a6e      	cmp	r2, #110	; 0x6e
 808243c:	d007      	beq.n	808244e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 808243e:	680a      	ldr	r2, [r1, #0]
 8082440:	6858      	ldr	r0, [r3, #4]
 8082442:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 8082444:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 8082446:	4402      	add	r2, r0
            n_ = t->end - t->start;
 8082448:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 808244a:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 808244c:	60e3      	str	r3, [r4, #12]
 808244e:	4620      	mov	r0, r4
 8082450:	f7ff ff71 	bl	8082336 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 8082454:	4620      	mov	r0, r4
 8082456:	bd10      	pop	{r4, pc}
 8082458:	08082a07 	.word	0x08082a07

0808245c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 808245c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 808245e:	2500      	movs	r5, #0
 8082460:	460b      	mov	r3, r1
 8082462:	4604      	mov	r4, r0
 8082464:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 8082466:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 808246a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 808246e:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 8082472:	b14b      	cbz	r3, 8082488 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 8082474:	781a      	ldrb	r2, [r3, #0]
 8082476:	2a01      	cmp	r2, #1
 8082478:	d106      	bne.n	8082488 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 808247a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 808247e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 8082480:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 8082482:	6143      	str	r3, [r0, #20]
 8082484:	f7ff ff57 	bl	8082336 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 8082488:	4620      	mov	r0, r4
 808248a:	bd38      	pop	{r3, r4, r5, pc}

0808248c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 808248c:	b510      	push	{r4, lr}
    if (!n_) {
 808248e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 8082490:	4604      	mov	r4, r0
    if (!n_) {
 8082492:	b163      	cbz	r3, 80824ae <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 8082494:	6880      	ldr	r0, [r0, #8]
    --n_;
 8082496:	3b01      	subs	r3, #1
    k_ = t_; // Name
 8082498:	60e0      	str	r0, [r4, #12]
    ++t_;
 808249a:	3010      	adds	r0, #16
 808249c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 808249e:	6120      	str	r0, [r4, #16]
    --n_;
 80824a0:	6163      	str	r3, [r4, #20]
    if (n_) {
 80824a2:	b113      	cbz	r3, 80824aa <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 80824a4:	f7ff feda 	bl	808225c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80824a8:	60a0      	str	r0, [r4, #8]
    return true;
 80824aa:	2001      	movs	r0, #1
 80824ac:	e000      	b.n	80824b0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 80824ae:	4618      	mov	r0, r3
}
 80824b0:	bd10      	pop	{r4, pc}

080824b2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 80824b2:	b510      	push	{r4, lr}
    write('}');
 80824b4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 80824b6:	4604      	mov	r4, r0
    write('}');
 80824b8:	f7ff ff31 	bl	808231e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80824bc:	2301      	movs	r3, #1
}
 80824be:	4620      	mov	r0, r4
    state_ = NEXT;
 80824c0:	7123      	strb	r3, [r4, #4]
}
 80824c2:	bd10      	pop	{r4, pc}

080824c4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 80824c4:	b508      	push	{r3, lr}
    switch (state_) {
 80824c6:	7903      	ldrb	r3, [r0, #4]
 80824c8:	2b01      	cmp	r3, #1
 80824ca:	d002      	beq.n	80824d2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80824cc:	2b02      	cmp	r3, #2
 80824ce:	d004      	beq.n	80824da <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 80824d0:	bd08      	pop	{r3, pc}
        write(',');
 80824d2:	212c      	movs	r1, #44	; 0x2c
        write(':');
 80824d4:	f7ff ff23 	bl	808231e <_ZN5spark10JSONWriter5writeEc>
}
 80824d8:	e7fa      	b.n	80824d0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 80824da:	213a      	movs	r1, #58	; 0x3a
 80824dc:	e7fa      	b.n	80824d4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

080824de <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 80824de:	b510      	push	{r4, lr}
 80824e0:	4604      	mov	r4, r0
    writeSeparator();
 80824e2:	f7ff ffef 	bl	80824c4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80824e6:	4620      	mov	r0, r4
 80824e8:	217b      	movs	r1, #123	; 0x7b
 80824ea:	f7ff ff18 	bl	808231e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80824ee:	2300      	movs	r3, #0
}
 80824f0:	4620      	mov	r0, r4
    state_ = BEGIN;
 80824f2:	7123      	strb	r3, [r4, #4]
}
 80824f4:	bd10      	pop	{r4, pc}
	...

080824f8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 80824f8:	b538      	push	{r3, r4, r5, lr}
 80824fa:	4604      	mov	r4, r0
 80824fc:	460d      	mov	r5, r1
    writeSeparator();
 80824fe:	f7ff ffe1 	bl	80824c4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 8082502:	6823      	ldr	r3, [r4, #0]
 8082504:	4620      	mov	r0, r4
 8082506:	462a      	mov	r2, r5
 8082508:	68db      	ldr	r3, [r3, #12]
 808250a:	4903      	ldr	r1, [pc, #12]	; (8082518 <_ZN5spark10JSONWriter5valueEi+0x20>)
 808250c:	4798      	blx	r3
    state_ = NEXT;
 808250e:	2301      	movs	r3, #1
}
 8082510:	4620      	mov	r0, r4
    state_ = NEXT;
 8082512:	7123      	strb	r3, [r4, #4]
}
 8082514:	bd38      	pop	{r3, r4, r5, pc}
 8082516:	bf00      	nop
 8082518:	08082946 	.word	0x08082946

0808251c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 808251c:	b538      	push	{r3, r4, r5, lr}
 808251e:	4604      	mov	r4, r0
 8082520:	460d      	mov	r5, r1
    writeSeparator();
 8082522:	f7ff ffcf 	bl	80824c4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 8082526:	6823      	ldr	r3, [r4, #0]
 8082528:	4620      	mov	r0, r4
 808252a:	462a      	mov	r2, r5
 808252c:	68db      	ldr	r3, [r3, #12]
 808252e:	4903      	ldr	r1, [pc, #12]	; (808253c <_ZN5spark10JSONWriter5valueEj+0x20>)
 8082530:	4798      	blx	r3
    state_ = NEXT;
 8082532:	2301      	movs	r3, #1
}
 8082534:	4620      	mov	r0, r4
    state_ = NEXT;
 8082536:	7123      	strb	r3, [r4, #4]
}
 8082538:	bd38      	pop	{r3, r4, r5, pc}
 808253a:	bf00      	nop
 808253c:	08082b94 	.word	0x08082b94

08082540 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 8082540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082544:	460d      	mov	r5, r1
 8082546:	4617      	mov	r7, r2
    write('"');
 8082548:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808254a:	4604      	mov	r4, r0
    write('"');
 808254c:	f7ff fee7 	bl	808231e <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 8082550:	4629      	mov	r1, r5
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 8082552:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80825ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 8082556:	442f      	add	r7, r5
    while (s != end) {
 8082558:	42bd      	cmp	r5, r7
 808255a:	462a      	mov	r2, r5
 808255c:	d038      	beq.n	80825d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 808255e:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 8082562:	2e22      	cmp	r6, #34	; 0x22
 8082564:	d003      	beq.n	808256e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 8082566:	2e5c      	cmp	r6, #92	; 0x5c
 8082568:	d001      	beq.n	808256e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 808256a:	2e1f      	cmp	r6, #31
 808256c:	d8f4      	bhi.n	8082558 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 808256e:	6823      	ldr	r3, [r4, #0]
 8082570:	1a52      	subs	r2, r2, r1
 8082572:	4620      	mov	r0, r4
 8082574:	689b      	ldr	r3, [r3, #8]
 8082576:	4798      	blx	r3
            write('\\');
 8082578:	215c      	movs	r1, #92	; 0x5c
 808257a:	4620      	mov	r0, r4
 808257c:	f7ff fecf 	bl	808231e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 8082580:	2e0d      	cmp	r6, #13
 8082582:	d80a      	bhi.n	808259a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 8082584:	2e07      	cmp	r6, #7
 8082586:	d91c      	bls.n	80825c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 8082588:	f1a6 0308 	sub.w	r3, r6, #8
 808258c:	2b05      	cmp	r3, #5
 808258e:	d818      	bhi.n	80825c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 8082590:	e8df f003 	tbb	[pc, r3]
 8082594:	17110f0d 	.word	0x17110f0d
 8082598:	1513      	.short	0x1513
 808259a:	2e22      	cmp	r6, #34	; 0x22
 808259c:	d001      	beq.n	80825a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 808259e:	2e5c      	cmp	r6, #92	; 0x5c
 80825a0:	d10f      	bne.n	80825c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 80825a2:	4631      	mov	r1, r6
                write('b');
 80825a4:	4620      	mov	r0, r4
 80825a6:	f7ff feba 	bl	808231e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 80825aa:	4629      	mov	r1, r5
    while (s != end) {
 80825ac:	e7d4      	b.n	8082558 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 80825ae:	2162      	movs	r1, #98	; 0x62
 80825b0:	e7f8      	b.n	80825a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 80825b2:	2174      	movs	r1, #116	; 0x74
 80825b4:	e7f6      	b.n	80825a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 80825b6:	216e      	movs	r1, #110	; 0x6e
 80825b8:	e7f4      	b.n	80825a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 80825ba:	2166      	movs	r1, #102	; 0x66
 80825bc:	e7f2      	b.n	80825a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 80825be:	2172      	movs	r1, #114	; 0x72
 80825c0:	e7f0      	b.n	80825a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 80825c2:	6823      	ldr	r3, [r4, #0]
 80825c4:	4632      	mov	r2, r6
 80825c6:	4641      	mov	r1, r8
 80825c8:	4620      	mov	r0, r4
 80825ca:	68db      	ldr	r3, [r3, #12]
 80825cc:	4798      	blx	r3
                break;
 80825ce:	e7ec      	b.n	80825aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
 80825d0:	428d      	cmp	r5, r1
 80825d2:	d004      	beq.n	80825de <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 80825d4:	6823      	ldr	r3, [r4, #0]
 80825d6:	4620      	mov	r0, r4
 80825d8:	689b      	ldr	r3, [r3, #8]
 80825da:	1a6a      	subs	r2, r5, r1
 80825dc:	4798      	blx	r3
    }
    write('"');
 80825de:	2122      	movs	r1, #34	; 0x22
 80825e0:	4620      	mov	r0, r4
 80825e2:	f7ff fe9c 	bl	808231e <_ZN5spark10JSONWriter5writeEc>
}
 80825e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80825ea:	bf00      	nop
 80825ec:	08082b97 	.word	0x08082b97

080825f0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80825f0:	b570      	push	{r4, r5, r6, lr}
 80825f2:	4604      	mov	r4, r0
 80825f4:	460d      	mov	r5, r1
 80825f6:	4616      	mov	r6, r2
    writeSeparator();
 80825f8:	f7ff ff64 	bl	80824c4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80825fc:	4620      	mov	r0, r4
 80825fe:	4632      	mov	r2, r6
 8082600:	4629      	mov	r1, r5
 8082602:	f7ff ff9d 	bl	8082540 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 8082606:	2302      	movs	r3, #2
}
 8082608:	4620      	mov	r0, r4
    state_ = VALUE;
 808260a:	7123      	strb	r3, [r4, #4]
}
 808260c:	bd70      	pop	{r4, r5, r6, pc}

0808260e <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 808260e:	b570      	push	{r4, r5, r6, lr}
 8082610:	4604      	mov	r4, r0
 8082612:	460d      	mov	r5, r1
 8082614:	4616      	mov	r6, r2
    writeSeparator();
 8082616:	f7ff ff55 	bl	80824c4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 808261a:	4620      	mov	r0, r4
 808261c:	4632      	mov	r2, r6
 808261e:	4629      	mov	r1, r5
 8082620:	f7ff ff8e 	bl	8082540 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 8082624:	2301      	movs	r3, #1
}
 8082626:	4620      	mov	r0, r4
    state_ = NEXT;
 8082628:	7123      	strb	r3, [r4, #4]
}
 808262a:	bd70      	pop	{r4, r5, r6, pc}

0808262c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808262c:	2300      	movs	r3, #0
 808262e:	b513      	push	{r0, r1, r4, lr}
 8082630:	4c07      	ldr	r4, [pc, #28]	; (8082650 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8082632:	461a      	mov	r2, r3
 8082634:	4619      	mov	r1, r3
 8082636:	4620      	mov	r0, r4
 8082638:	9300      	str	r3, [sp, #0]
 808263a:	f7ff fbdf 	bl	8081dfc <_ZN9IPAddressC1Ehhhh>
 808263e:	4620      	mov	r0, r4
 8082640:	4a04      	ldr	r2, [pc, #16]	; (8082654 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8082642:	4905      	ldr	r1, [pc, #20]	; (8082658 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8082644:	b002      	add	sp, #8
 8082646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808264a:	f000 b807 	b.w	808265c <__aeabi_atexit>
 808264e:	bf00      	nop
 8082650:	200005a0 	.word	0x200005a0
 8082654:	20000074 	.word	0x20000074
 8082658:	08081d77 	.word	0x08081d77

0808265c <__aeabi_atexit>:
 808265c:	460b      	mov	r3, r1
 808265e:	4601      	mov	r1, r0
 8082660:	4618      	mov	r0, r3
 8082662:	f000 b805 	b.w	8082670 <__cxa_atexit>

08082666 <_ZdlPvj>:
 8082666:	f7fd bd18 	b.w	808009a <_ZdlPv>

0808266a <_ZnwjRKSt9nothrow_t>:
 808266a:	f7fd bd14 	b.w	8080096 <_Znwj>
	...

08082670 <__cxa_atexit>:
 8082670:	b510      	push	{r4, lr}
 8082672:	4604      	mov	r4, r0
 8082674:	4804      	ldr	r0, [pc, #16]	; (8082688 <__cxa_atexit+0x18>)
 8082676:	4613      	mov	r3, r2
 8082678:	b120      	cbz	r0, 8082684 <__cxa_atexit+0x14>
 808267a:	460a      	mov	r2, r1
 808267c:	2002      	movs	r0, #2
 808267e:	4621      	mov	r1, r4
 8082680:	f3af 8000 	nop.w
 8082684:	bd10      	pop	{r4, pc}
 8082686:	bf00      	nop
 8082688:	00000000 	.word	0x00000000

0808268c <memcpy>:
 808268c:	440a      	add	r2, r1
 808268e:	4291      	cmp	r1, r2
 8082690:	f100 33ff 	add.w	r3, r0, #4294967295
 8082694:	d100      	bne.n	8082698 <memcpy+0xc>
 8082696:	4770      	bx	lr
 8082698:	b510      	push	{r4, lr}
 808269a:	f811 4b01 	ldrb.w	r4, [r1], #1
 808269e:	4291      	cmp	r1, r2
 80826a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80826a4:	d1f9      	bne.n	808269a <memcpy+0xe>
 80826a6:	bd10      	pop	{r4, pc}

080826a8 <memmove>:
 80826a8:	4288      	cmp	r0, r1
 80826aa:	b510      	push	{r4, lr}
 80826ac:	eb01 0402 	add.w	r4, r1, r2
 80826b0:	d902      	bls.n	80826b8 <memmove+0x10>
 80826b2:	4284      	cmp	r4, r0
 80826b4:	4623      	mov	r3, r4
 80826b6:	d807      	bhi.n	80826c8 <memmove+0x20>
 80826b8:	1e43      	subs	r3, r0, #1
 80826ba:	42a1      	cmp	r1, r4
 80826bc:	d008      	beq.n	80826d0 <memmove+0x28>
 80826be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80826c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80826c6:	e7f8      	b.n	80826ba <memmove+0x12>
 80826c8:	4601      	mov	r1, r0
 80826ca:	4402      	add	r2, r0
 80826cc:	428a      	cmp	r2, r1
 80826ce:	d100      	bne.n	80826d2 <memmove+0x2a>
 80826d0:	bd10      	pop	{r4, pc}
 80826d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80826d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80826da:	e7f7      	b.n	80826cc <memmove+0x24>

080826dc <memset>:
 80826dc:	4603      	mov	r3, r0
 80826de:	4402      	add	r2, r0
 80826e0:	4293      	cmp	r3, r2
 80826e2:	d100      	bne.n	80826e6 <memset+0xa>
 80826e4:	4770      	bx	lr
 80826e6:	f803 1b01 	strb.w	r1, [r3], #1
 80826ea:	e7f9      	b.n	80826e0 <memset+0x4>

080826ec <srand>:
 80826ec:	b538      	push	{r3, r4, r5, lr}
 80826ee:	4b0d      	ldr	r3, [pc, #52]	; (8082724 <srand+0x38>)
 80826f0:	4604      	mov	r4, r0
 80826f2:	681d      	ldr	r5, [r3, #0]
 80826f4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80826f6:	b97b      	cbnz	r3, 8082718 <srand+0x2c>
 80826f8:	2018      	movs	r0, #24
 80826fa:	f7fe f86b 	bl	80807d4 <malloc>
 80826fe:	4a0a      	ldr	r2, [pc, #40]	; (8082728 <srand+0x3c>)
 8082700:	4b0a      	ldr	r3, [pc, #40]	; (808272c <srand+0x40>)
 8082702:	63a8      	str	r0, [r5, #56]	; 0x38
 8082704:	e9c0 2300 	strd	r2, r3, [r0]
 8082708:	4b09      	ldr	r3, [pc, #36]	; (8082730 <srand+0x44>)
 808270a:	2201      	movs	r2, #1
 808270c:	6083      	str	r3, [r0, #8]
 808270e:	230b      	movs	r3, #11
 8082710:	8183      	strh	r3, [r0, #12]
 8082712:	2300      	movs	r3, #0
 8082714:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8082718:	2200      	movs	r2, #0
 808271a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808271c:	611c      	str	r4, [r3, #16]
 808271e:	615a      	str	r2, [r3, #20]
 8082720:	bd38      	pop	{r3, r4, r5, pc}
 8082722:	bf00      	nop
 8082724:	20000010 	.word	0x20000010
 8082728:	abcd330e 	.word	0xabcd330e
 808272c:	e66d1234 	.word	0xe66d1234
 8082730:	0005deec 	.word	0x0005deec

08082734 <strchr>:
 8082734:	4603      	mov	r3, r0
 8082736:	b2c9      	uxtb	r1, r1
 8082738:	4618      	mov	r0, r3
 808273a:	f813 2b01 	ldrb.w	r2, [r3], #1
 808273e:	b112      	cbz	r2, 8082746 <strchr+0x12>
 8082740:	428a      	cmp	r2, r1
 8082742:	d1f9      	bne.n	8082738 <strchr+0x4>
 8082744:	4770      	bx	lr
 8082746:	2900      	cmp	r1, #0
 8082748:	bf18      	it	ne
 808274a:	2000      	movne	r0, #0
 808274c:	4770      	bx	lr

0808274e <strchrnul>:
 808274e:	b510      	push	{r4, lr}
 8082750:	4604      	mov	r4, r0
 8082752:	f7ff ffef 	bl	8082734 <strchr>
 8082756:	b918      	cbnz	r0, 8082760 <strchrnul+0x12>
 8082758:	4620      	mov	r0, r4
 808275a:	f000 f814 	bl	8082786 <strlen>
 808275e:	4420      	add	r0, r4
 8082760:	bd10      	pop	{r4, pc}

08082762 <strcmp>:
 8082762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8082766:	f811 3b01 	ldrb.w	r3, [r1], #1
 808276a:	2a01      	cmp	r2, #1
 808276c:	bf28      	it	cs
 808276e:	429a      	cmpcs	r2, r3
 8082770:	d0f7      	beq.n	8082762 <strcmp>
 8082772:	1ad0      	subs	r0, r2, r3
 8082774:	4770      	bx	lr

08082776 <strcpy>:
 8082776:	4603      	mov	r3, r0
 8082778:	f811 2b01 	ldrb.w	r2, [r1], #1
 808277c:	f803 2b01 	strb.w	r2, [r3], #1
 8082780:	2a00      	cmp	r2, #0
 8082782:	d1f9      	bne.n	8082778 <strcpy+0x2>
 8082784:	4770      	bx	lr

08082786 <strlen>:
 8082786:	4603      	mov	r3, r0
 8082788:	f813 2b01 	ldrb.w	r2, [r3], #1
 808278c:	2a00      	cmp	r2, #0
 808278e:	d1fb      	bne.n	8082788 <strlen+0x2>
 8082790:	1a18      	subs	r0, r3, r0
 8082792:	3801      	subs	r0, #1
 8082794:	4770      	bx	lr

08082796 <strncmp>:
 8082796:	b510      	push	{r4, lr}
 8082798:	b16a      	cbz	r2, 80827b6 <strncmp+0x20>
 808279a:	3901      	subs	r1, #1
 808279c:	1884      	adds	r4, r0, r2
 808279e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80827a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80827a6:	4293      	cmp	r3, r2
 80827a8:	d103      	bne.n	80827b2 <strncmp+0x1c>
 80827aa:	42a0      	cmp	r0, r4
 80827ac:	d001      	beq.n	80827b2 <strncmp+0x1c>
 80827ae:	2b00      	cmp	r3, #0
 80827b0:	d1f5      	bne.n	808279e <strncmp+0x8>
 80827b2:	1a98      	subs	r0, r3, r2
 80827b4:	bd10      	pop	{r4, pc}
 80827b6:	4610      	mov	r0, r2
 80827b8:	e7fc      	b.n	80827b4 <strncmp+0x1e>

080827ba <strrchr>:
 80827ba:	b538      	push	{r3, r4, r5, lr}
 80827bc:	4603      	mov	r3, r0
 80827be:	460c      	mov	r4, r1
 80827c0:	b969      	cbnz	r1, 80827de <strrchr+0x24>
 80827c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80827c6:	f7ff bfb5 	b.w	8082734 <strchr>
 80827ca:	4605      	mov	r5, r0
 80827cc:	1c43      	adds	r3, r0, #1
 80827ce:	4621      	mov	r1, r4
 80827d0:	4618      	mov	r0, r3
 80827d2:	f7ff ffaf 	bl	8082734 <strchr>
 80827d6:	2800      	cmp	r0, #0
 80827d8:	d1f7      	bne.n	80827ca <strrchr+0x10>
 80827da:	4628      	mov	r0, r5
 80827dc:	bd38      	pop	{r3, r4, r5, pc}
 80827de:	2500      	movs	r5, #0
 80827e0:	e7f5      	b.n	80827ce <strrchr+0x14>
	...

080827e4 <_strtol_l.isra.0>:
 80827e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80827e8:	468c      	mov	ip, r1
 80827ea:	4686      	mov	lr, r0
 80827ec:	4e39      	ldr	r6, [pc, #228]	; (80828d4 <_strtol_l.isra.0+0xf0>)
 80827ee:	4660      	mov	r0, ip
 80827f0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80827f4:	5da5      	ldrb	r5, [r4, r6]
 80827f6:	f015 0508 	ands.w	r5, r5, #8
 80827fa:	d1f8      	bne.n	80827ee <_strtol_l.isra.0+0xa>
 80827fc:	2c2d      	cmp	r4, #45	; 0x2d
 80827fe:	d133      	bne.n	8082868 <_strtol_l.isra.0+0x84>
 8082800:	f04f 0801 	mov.w	r8, #1
 8082804:	f89c 4000 	ldrb.w	r4, [ip]
 8082808:	f100 0c02 	add.w	ip, r0, #2
 808280c:	2b00      	cmp	r3, #0
 808280e:	d05c      	beq.n	80828ca <_strtol_l.isra.0+0xe6>
 8082810:	2b10      	cmp	r3, #16
 8082812:	d10c      	bne.n	808282e <_strtol_l.isra.0+0x4a>
 8082814:	2c30      	cmp	r4, #48	; 0x30
 8082816:	d10a      	bne.n	808282e <_strtol_l.isra.0+0x4a>
 8082818:	f89c 0000 	ldrb.w	r0, [ip]
 808281c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8082820:	2858      	cmp	r0, #88	; 0x58
 8082822:	d14d      	bne.n	80828c0 <_strtol_l.isra.0+0xdc>
 8082824:	2310      	movs	r3, #16
 8082826:	f89c 4001 	ldrb.w	r4, [ip, #1]
 808282a:	f10c 0c02 	add.w	ip, ip, #2
 808282e:	2600      	movs	r6, #0
 8082830:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8082834:	3f01      	subs	r7, #1
 8082836:	fbb7 f9f3 	udiv	r9, r7, r3
 808283a:	4630      	mov	r0, r6
 808283c:	fb03 7a19 	mls	sl, r3, r9, r7
 8082840:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8082844:	2d09      	cmp	r5, #9
 8082846:	d818      	bhi.n	808287a <_strtol_l.isra.0+0x96>
 8082848:	462c      	mov	r4, r5
 808284a:	42a3      	cmp	r3, r4
 808284c:	dd24      	ble.n	8082898 <_strtol_l.isra.0+0xb4>
 808284e:	1c75      	adds	r5, r6, #1
 8082850:	d007      	beq.n	8082862 <_strtol_l.isra.0+0x7e>
 8082852:	4581      	cmp	r9, r0
 8082854:	d31d      	bcc.n	8082892 <_strtol_l.isra.0+0xae>
 8082856:	d101      	bne.n	808285c <_strtol_l.isra.0+0x78>
 8082858:	45a2      	cmp	sl, r4
 808285a:	db1a      	blt.n	8082892 <_strtol_l.isra.0+0xae>
 808285c:	2601      	movs	r6, #1
 808285e:	fb00 4003 	mla	r0, r0, r3, r4
 8082862:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8082866:	e7eb      	b.n	8082840 <_strtol_l.isra.0+0x5c>
 8082868:	2c2b      	cmp	r4, #43	; 0x2b
 808286a:	bf08      	it	eq
 808286c:	f89c 4000 	ldrbeq.w	r4, [ip]
 8082870:	46a8      	mov	r8, r5
 8082872:	bf08      	it	eq
 8082874:	f100 0c02 	addeq.w	ip, r0, #2
 8082878:	e7c8      	b.n	808280c <_strtol_l.isra.0+0x28>
 808287a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 808287e:	2d19      	cmp	r5, #25
 8082880:	d801      	bhi.n	8082886 <_strtol_l.isra.0+0xa2>
 8082882:	3c37      	subs	r4, #55	; 0x37
 8082884:	e7e1      	b.n	808284a <_strtol_l.isra.0+0x66>
 8082886:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 808288a:	2d19      	cmp	r5, #25
 808288c:	d804      	bhi.n	8082898 <_strtol_l.isra.0+0xb4>
 808288e:	3c57      	subs	r4, #87	; 0x57
 8082890:	e7db      	b.n	808284a <_strtol_l.isra.0+0x66>
 8082892:	f04f 36ff 	mov.w	r6, #4294967295
 8082896:	e7e4      	b.n	8082862 <_strtol_l.isra.0+0x7e>
 8082898:	1c73      	adds	r3, r6, #1
 808289a:	d106      	bne.n	80828aa <_strtol_l.isra.0+0xc6>
 808289c:	2322      	movs	r3, #34	; 0x22
 808289e:	4638      	mov	r0, r7
 80828a0:	f8ce 3000 	str.w	r3, [lr]
 80828a4:	b942      	cbnz	r2, 80828b8 <_strtol_l.isra.0+0xd4>
 80828a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80828aa:	f1b8 0f00 	cmp.w	r8, #0
 80828ae:	d000      	beq.n	80828b2 <_strtol_l.isra.0+0xce>
 80828b0:	4240      	negs	r0, r0
 80828b2:	2a00      	cmp	r2, #0
 80828b4:	d0f7      	beq.n	80828a6 <_strtol_l.isra.0+0xc2>
 80828b6:	b10e      	cbz	r6, 80828bc <_strtol_l.isra.0+0xd8>
 80828b8:	f10c 31ff 	add.w	r1, ip, #4294967295
 80828bc:	6011      	str	r1, [r2, #0]
 80828be:	e7f2      	b.n	80828a6 <_strtol_l.isra.0+0xc2>
 80828c0:	2430      	movs	r4, #48	; 0x30
 80828c2:	2b00      	cmp	r3, #0
 80828c4:	d1b3      	bne.n	808282e <_strtol_l.isra.0+0x4a>
 80828c6:	2308      	movs	r3, #8
 80828c8:	e7b1      	b.n	808282e <_strtol_l.isra.0+0x4a>
 80828ca:	2c30      	cmp	r4, #48	; 0x30
 80828cc:	d0a4      	beq.n	8082818 <_strtol_l.isra.0+0x34>
 80828ce:	230a      	movs	r3, #10
 80828d0:	e7ad      	b.n	808282e <_strtol_l.isra.0+0x4a>
 80828d2:	bf00      	nop
 80828d4:	08082b9f 	.word	0x08082b9f

080828d8 <strtol>:
 80828d8:	4613      	mov	r3, r2
 80828da:	460a      	mov	r2, r1
 80828dc:	4601      	mov	r1, r0
 80828de:	4802      	ldr	r0, [pc, #8]	; (80828e8 <strtol+0x10>)
 80828e0:	6800      	ldr	r0, [r0, #0]
 80828e2:	f7ff bf7f 	b.w	80827e4 <_strtol_l.isra.0>
 80828e6:	bf00      	nop
 80828e8:	20000010 	.word	0x20000010

080828ec <dynalib_user>:
 80828ec:	0808001d 0808005d 08080085 08080089     ....]...........
 80828fc:	00000000 3d3d0a0a 4c203d3d 20504f4f     ......==== LOOP 
 808290c:	3d3d3d3d 6c654300 616c756c 203d2072     ====.Cellular = 
 808291c:	432e6425 64756f6c 25203d20 74002e64     %d.Cloud = %d..t
 808292c:	6c61746f 6d697420 25203a65 202c756c     otal time: %lu, 
 808293c:	6c696166 73657275 6425203a 00000000     failures: %d....

0808294c <_ZTVN5spark10LogHandlerE>:
	...
 808295c:	080800a1 080800c5                       ........

08082964 <_ZTVN5spark16SerialLogHandlerE>:
	...
 808296c:	080800d1 08080105 0808187d 080800c7     ........}.......
 808297c:	69726977 5300676e 65747379 6c73206d     wiring.System sl
 808298c:	20706565 666e6f63 72756769 6f697461     eep configuratio
 808299c:	7369206e 766e6920 64696c61 6162002e     n is invalid..ba
 80829ac:	53006475 61697265 5355006c 72655342     ud.Serial.USBSer
 80829bc:	316c6169 4f534a00 7274534e 4c6d6165     ial1.JSONStreamL
 80829cc:	6148676f 656c646e 70610072 30250070     ogHandler.app.%0
 80829dc:	20753031 00205d00 2800202c 00203a29     10u .] ., .(): .
 80829ec:	63005b20 2065646f 2500203d 65640069      [.code = .%i.de
 80829fc:	6c696174 203d2073 000a0d00 0063006d     tails = ....m.c.
 8082a0c:	6e6c0066 006e6600 6f630074 64006564     f.ln.fn.t.code.d
 8082a1c:	69617465 0000006c                       etail...

08082a24 <_ZTVN5spark16JSONStreamWriterE>:
	...
 8082a2c:	08080bcd 08080bf3 08080bb3 0808228b     ............."..

08082a3c <_ZTVN5spark16StreamLogHandlerE>:
	...
 8082a44:	080810a9 080810c1 0808187d 080800c7     ........}.......

08082a54 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 8082a5c:	080810d5 080810e9 08081a25 08080bbb     ........%.......

08082a6c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 8082a74:	08080bcb 08080c01 080817b9 08080bbd     ................

08082a84 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 8082a8c:	08080bc9 08080c0f 08080fd1 08080c2b     ............+...
 8082a9c:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
 8082aac:	007a2553 74637361 00656d69              S%z.asctime.

08082ab8 <_ZTV9IPAddress>:
	...
 8082ac0:	08081d87 08081d77 08081d79              ....w...y...

08082acc <_ZTV9USBSerial>:
	...
 8082ad4:	08081e19 08081e7f 08081e57 08080aad     ........W.......
 8082ae4:	08081e49 08081e1b 08081e2b 08081e79     I.......+...y...
 8082af4:	08081e3b 08081e15                       ;.......

08082afc <_ZTVN5spark13CellularClassE>:
	...
 8082b04:	08082057 0808204d 08082043 08081fbd     W ..M ..C ......
 8082b14:	08082037 0808202b 0808201f 08082017     7 ..+ ... ... ..
 8082b24:	0808200d 08082003 08081fc7              . ... ......

08082b30 <_ZTV11USARTSerial>:
	...
 8082b38:	08082091 080820f9 080820d5 08080aad     . ... ... ......
 8082b48:	080820a5 080820c1 080820b3 080820cf     . ... ... ... ..
 8082b58:	08082093 08082097                       . ... ..

08082b60 <_ZTVN5spark12NetworkClassE>:
	...
 8082b68:	08082199 080821a3 080821ad 080821b7     .!...!...!...!..
 8082b78:	080821c1 080821cd 080821d9 080821e5     .!...!...!...!..
 8082b88:	080821ed 080821f7 08082201 75007525     .!...!..."..%u.u
 8082b98:	78343025                                 %04x.

08082b9d <_ZSt7nothrow>:
	...

08082b9e <_ctype_>:
 8082b9e:	20202000 20202020 28282020 20282828     .         ((((( 
 8082bae:	20202020 20202020 20202020 20202020                     
 8082bbe:	10108820 10101010 10101010 10101010      ...............
 8082bce:	04040410 04040404 10040404 10101010     ................
 8082bde:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8082bee:	01010101 01010101 01010101 10101010     ................
 8082bfe:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8082c0e:	02020202 02020202 02020202 10101010     ................
 8082c1e:	00000020 00000000 00000000 00000000      ...............
	...

08082c9f <link_const_variable_data_end>:
	...

08082ca0 <link_constructors_location>:
 8082ca0:	080803b9 	.word	0x080803b9
 8082ca4:	08080959 	.word	0x08080959
 8082ca8:	0808186d 	.word	0x0808186d
 8082cac:	08081b99 	.word	0x08081b99
 8082cb0:	08081bd1 	.word	0x08081bd1
 8082cb4:	08082061 	.word	0x08082061
 8082cb8:	08082249 	.word	0x08082249
 8082cbc:	0808262d 	.word	0x0808262d
